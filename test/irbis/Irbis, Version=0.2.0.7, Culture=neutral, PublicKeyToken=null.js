/* Generated by JSIL v0.8.2 build 25468. See http://jsil.org/ for more information. */ 
'use strict';
var $asm00 = JSIL.DeclareAssembly("Irbis, Version=0.2.0.7, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("Irbis.Program"), "Main", JSIL.MethodSignature.Void);

/* class Bars */ 

(function Bars$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.UIElementSlider)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.UIElementDiscreteSlider)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Print)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };


  function Bars__ctor (HealthTexture, ShieldTexture, EnergyTexture, PotionTexture, EnemyHealthTexture, ShieldBarOverlay, BackgroundTexture, EnemyBackgroundTexture, PotionBackgroundTextures) {
    var scale = (($T03().screenScale) | 0);
    var resizefactor = +((16 / +scale));
    $thisType.backgroundTexture = $T03().ResizeTexture(BackgroundTexture, resizefactor, false);
    $thisType.enemyBackgroundTexture = $T03().ResizeTexture(EnemyBackgroundTexture, resizefactor, false);
    HealthTexture = $T03().ResizeTexture(HealthTexture, resizefactor, false);
    ShieldTexture = $T03().ResizeTexture(ShieldTexture, resizefactor, false);
    EnergyTexture = $T03().ResizeTexture(EnergyTexture, resizefactor, false);
    EnemyHealthTexture = $T03().ResizeTexture(EnemyHealthTexture, resizefactor, false);
    $thisType.backgroundTextureLocation = $S00().Construct(32, 32);
    $thisType.enemyBackgroundTextureLocation = $S00().Construct(+(($T03().resolution.X | 0) - ((($thisType.enemyBackgroundTexture.get_Width() | 0) + 32) | 0)), 32);

    for (var i = 0; i < (PotionBackgroundTextures.length | 0); i = ((i + 1) | 0)) {
      PotionBackgroundTextures[i] = $T03().ResizeTexture(PotionBackgroundTextures[i], resizefactor, false);
    }
    PotionTexture = $T03().ResizeTexture(PotionTexture, resizefactor, false);
    $thisType.healthBar = new ($T06())($T07().Left, $S01().Construct(((32 + scale) | 0), ((32 + scale) | 0), HealthTexture.get_Width(), HealthTexture.get_Height()), $S02().Construct(scale, 0), $T03().jamie.maxHealth, $T0A().Color$White$value.MemberwiseClone(), null, null, null, HealthTexture, null, null, false, $T03().font.MemberwiseClone(), false, 0.5, 0.499, 0.501, 0.502);
    $thisType.shieldBar = new ($T06())($T07().Left, $S01().Construct(((((32 + scale) | 0) + Math.imul(15, scale)) | 0), ((((32 + scale) | 0) + Math.imul(10, scale)) | 0), ShieldTexture.get_Width(), ShieldTexture.get_Height()), $S02().Construct(scale, 0), $T03().jamie.maxShield, $T0A().Color$White$value.MemberwiseClone(), null, null, null, ShieldTexture, null, ShieldBarOverlay, false, $T03().font.MemberwiseClone(), false, 0.5, 0.499, 0.501, 0.502);
    $thisType.energyBar = new ($T06())($T07().Left, $S01().Construct(((32 + scale) | 0), ((((32 + scale) | 0) + Math.imul(16, scale)) | 0), EnergyTexture.get_Width(), EnergyTexture.get_Height()), $S02().Construct(scale, 0), $T03().jamie.maxEnergy, $T0A().Color$White$value.MemberwiseClone(), null, null, null, EnergyTexture, null, null, false, $T03().font.MemberwiseClone(), false, 0.5, 0.499, 0.501, 0.502);
    $thisType.energyBar.drawOverlay = false;
    var maxpots = 3;
    if (((($T03().jamie.maxNumberOfPotions | 0) / 2) | 0) > 3) {
      maxpots = ((($T03().jamie.maxNumberOfPotions | 0) / 2) | 0);
    }
    $thisType.potionBar = new ($T0B())($T07().Left, ($T05().op_Addition($thisType.backgroundTextureLocation.MemberwiseClone(), $S03().CallStatic($T05(), "op_Division", null, $S00().Construct(1040, 176), resizefactor)).MemberwiseClone()).ToPoint().MemberwiseClone(), ($T05().op_Addition($thisType.backgroundTextureLocation.MemberwiseClone(), $S03().CallStatic($T05(), "op_Division", null, $S00().Construct(800, 336), resizefactor)).MemberwiseClone()).ToPoint().MemberwiseClone(), JSIL.Array.New($T00(), [PotionTexture]), PotionBackgroundTextures, null, $T0A().Color$White$value.MemberwiseClone(), $T0A().Color$White$value.MemberwiseClone(), null, $T03().jamie.maxNumberOfPotions, maxpots, ($S03().CallStatic($T05(), "op_Division", null, $S00().Construct(222, 96), resizefactor).MemberwiseClone()).ToPoint().MemberwiseClone(), ($S03().CallStatic($T05(), "op_Division", null, $S00().Construct(272, 128), resizefactor).MemberwiseClone()).ToPoint().MemberwiseClone(), scale, 0.5);
    $thisType.enemyHealthBar = new ($T06())($T07().Right, $S01().Construct(((($T03().resolution.X | 0) - ((32 + scale) | 0)) | 0), ((32 + scale) | 0), EnemyHealthTexture.get_Width(), EnemyHealthTexture.get_Height()), $S02().Construct(Math.imul(((scale / 2) | 0), -1), 0), 100, $S04().Construct(108, 3, 3), null, null, null, EnemyHealthTexture, null, null, false, $T03().font.MemberwiseClone(), false, 0.5, 0.499, 0.501, 0.502);
    $thisType.$name = $S05().Construct(EnemyHealthTexture.get_Width(), $T03().font.MemberwiseClone(), $T0A().Color$White$value.MemberwiseClone(), false, $S02().Construct(((($T03().resolution.X | 0) - ((32 + Math.imul(18, scale)) | 0)) | 0), ((40 + Math.imul(10, scale)) | 0)), $T07().Right, 0.6);
    $thisType.$name.Update("default", true);
  }; 

  function Bars_Draw (sb) {
    $S06().CallVirtual("Draw", null, sb, 
      $thisType.backgroundTexture, 
      $thisType.backgroundTextureLocation.MemberwiseClone(), 
      null, 
      $T0A().Color$White$value.MemberwiseClone(), 
      0, 
      $T05().get_Zero().MemberwiseClone(), 
      1, 
      $T0E().None, 
      0.499
    );
    if ($thisType.healthBar !== null) {
      $thisType.healthBar.Draw(sb);
    }
    if ($thisType.shieldBar !== null) {
      $thisType.shieldBar.Draw(sb);
    }
    if ($thisType.energyBar !== null) {
      $thisType.energyBar.Draw(sb);
    }
    if ($thisType.potionBar !== null) {
      $thisType.potionBar.Draw(sb);
    }
    if ($T03().displayEnemyHealth) {
      $S06().CallVirtual("Draw", null, sb, 
        $thisType.enemyBackgroundTexture, 
        $thisType.enemyBackgroundTextureLocation.MemberwiseClone(), 
        null, 
        $T0A().Color$White$value.MemberwiseClone(), 
        0, 
        $T05().get_Zero().MemberwiseClone(), 
        1, 
        $T0E().None, 
        0.499
      );
      $thisType.enemyHealthBar.Draw(sb);
      $thisType.$name.Draw(sb);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Bars", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])
        ]), 
      Bars__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Bars_Draw
    );

    $.Field({Static:true , Public:true }, "healthBar", $asm00.TypeRef("UIElementSlider"));

    $.Field({Static:true , Public:true }, "shieldBar", $asm00.TypeRef("UIElementSlider"));

    $.Field({Static:true , Public:true }, "energyBar", $asm00.TypeRef("UIElementSlider"));

    $.Field({Static:true , Public:true }, "potionBar", $asm00.TypeRef("UIElementDiscreteSlider"));

    $.Field({Static:true , Public:true }, "enemyHealthBar", $asm00.TypeRef("UIElementSlider"));

    $.Field({Static:true , Public:true }, "backgroundTexture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:true }, "enemyBackgroundTexture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:true }, "backgroundTextureLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:true }, "enemyBackgroundTextureLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:true }, "$name", $asm00.TypeRef("Print"));


    function Bars__cctor () {
      $thisType.backgroundTextureLocation = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.enemyBackgroundTextureLocation = new $asm01.Microsoft.Xna.Framework.Vector2();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Bars__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BinaryTree`1 */ 

(function BinaryTree$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };


  function BinaryTree$b1__ctor$00 (value, parentNode) {
    this.parent = parentNode;
    this.data = JSIL.CloneParameter($thisType.T.get(this), value);
    this.left = null;
    this.right = null;
    this.rootIsNull = false;
  }; 

  function BinaryTree$b1__ctor$01 (value) {
    this.parent = null;
    this.data = JSIL.CloneParameter($thisType.T.get(this), value);
    this.left = null;
    this.right = null;
    this.rootIsNull = false;
  }; 

  function BinaryTree$b1__ctor$02 () {
    this.parent = null;
    this.data = (
      $thisType.T.get(this).IsValueType
         ? JSIL.CreateInstanceOfType($thisType.T.get(this))
         : null)
    ;
    this.left = null;
    this.right = null;
    this.rootIsNull = true;
  }; 

  function BinaryTree$b1_Add (value) {
    var $s00 = new JSIL.MethodSignature($asm02.System.Int32, [$thisType.T.get(this), $thisType.T.get(this)]);
    var $s01 = new JSIL.ConstructorSignature($asm00.TypeRef("BinaryTree`1", [$thisType.T.get(this)]), [$thisType.T.get(this), $asm00.TypeRef("BinaryTree`1", [$thisType.T.get(this)])]);
    if (!this.rootIsNull) {
      var placeLeft = false;
      var placeRight = false;

    $loop0: 
      for (var node = this; node !== null; ) {
        if (($s00.CallVirtual("Compare", null, $asm02.System.Collections.Generic.Comparer$b1.Of($thisType.T.get(this)).get_Default(), JSIL.CloneParameter($thisType.T.get(this), value), JSIL.CloneParameter($thisType.T.get(this), node.get_Data())) | 0) < 0) {
          if (node.get_Left() === null) {
            placeLeft = true;
            break $loop0;
          }
          node = node.get_Left();
        } else {
          if (node.get_Right() === null) {
            placeRight = true;
            break $loop0;
          }
          node = node.get_Right();
        }
      }
      if (placeLeft) {
        node.set_Left($s01.Construct(JSIL.CloneParameter($thisType.T.get(this), value), node));
      } else if (placeRight) {
        node.set_Right($s01.Construct(JSIL.CloneParameter($thisType.T.get(this), value), node));
      }
    } else {
      this.data = JSIL.CloneParameter($thisType.T.get(this), value);
      this.rootIsNull = false;
    }
  }; 

  function BinaryTree$b1_Clear () {
  }; 

  function BinaryTree$b1_get_Data () {
    return this.data;
  }; 

  function BinaryTree$b1_get_Left () {
    return this.left;
  }; 

  function BinaryTree$b1_get_Parent () {
    return this.parent;
  }; 

  function BinaryTree$b1_get_Right () {
    return this.right;
  }; 

  function BinaryTree$b1_GetEnumerator () {
    var $lGetEnumerator$gd__ = new ($asm00.BinaryTree$b1_$lGetEnumerator$gd__0.Of($thisType.T.get(this))) (0);
    $lGetEnumerator$gd__.$l$g4__this = this;
    return $lGetEnumerator$gd__;
  }; 

  function BinaryTree$b1_GetLeftmost (treeRoot) {

  $loop0: 
    for (var node = treeRoot; node !== null; node = node.get_Left()) {
      if (node.get_Left() === null) {
        break $loop0;
      }
    }
    return node;
  }; 

  function BinaryTree$b1_GetNext (treeRoot) {

  $loop0: 
    for (var node = treeRoot; node !== null; node = node.get_Left()) {
      if (node.get_Left() === null) {
        break $loop0;
      }
    }
    return node;
  }; 

  function BinaryTree$b1_Print () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["{parent:", this.parent, " data:", this.data, " left:", this.left, " right:", this.right, "}"]));
  }; 

  function BinaryTree$b1_set_Data (value) {
    this.data = JSIL.CloneParameter($thisType.T.get(this), value);
  }; 

  function BinaryTree$b1_set_Left (value) {
    this.left = value;
  }; 

  function BinaryTree$b1_set_Right (value) {
    this.right = value;
  }; 

  function BinaryTree$b1_toString () {
    var returnstring = "{parent:";
    if (this.parent !== null) {
      var obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), [obj, this.parent.data, " data:", this.data])));
    } else {
      returnstring = (JSIL.ConcatString(returnstring, "null data:", this.data));
    }
    returnstring = (JSIL.ConcatString(returnstring, " left:"));
    if (this.left !== null) {
      returnstring = (JSIL.ConcatString(returnstring, this.left.data));
    } else {
      returnstring = (JSIL.ConcatString(returnstring, "null"));
    }
    returnstring = (JSIL.ConcatString(returnstring, " right:"));
    if (this.right !== null) {
      returnstring = (JSIL.ConcatString(returnstring, this.right.data));
    } else {
      returnstring = (JSIL.ConcatString(returnstring, "null"));
    }
    return JSIL.ConcatString(returnstring, "}");
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "BinaryTree`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")])]), 
      BinaryTree$b1__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      BinaryTree$b1__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BinaryTree$b1__ctor$02
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      BinaryTree$b1_Add
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      BinaryTree$b1_Clear
    );

    $.Method({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      BinaryTree$b1_get_Data
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]), null), 
      BinaryTree$b1_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Parent", 
      new JSIL.MethodSignature($asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]), null), 
      BinaryTree$b1_get_Parent
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]), null), 
      BinaryTree$b1_get_Right
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator")), 
      BinaryTree$b1_GetEnumerator
    );

    $.Method({Static:false, Public:true }, "GetLeftmost", 
      new JSIL.MethodSignature($asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]), [$asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")])]), 
      BinaryTree$b1_GetLeftmost
    );

    $.Method({Static:false, Public:true }, "GetNext", 
      new JSIL.MethodSignature($asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]), [$asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")])]), 
      BinaryTree$b1_GetNext
    );

    $.Method({Static:false, Public:true }, "Print", 
      JSIL.MethodSignature.Return($.String), 
      BinaryTree$b1_Print
    );

    $.Method({Static:false, Public:true }, "set_Data", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      BinaryTree$b1_set_Data
    );

    $.Method({Static:false, Public:true }, "set_Left", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")])]), 
      BinaryTree$b1_set_Left
    );

    $.Method({Static:false, Public:true }, "set_Right", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")])]), 
      BinaryTree$b1_set_Right
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      BinaryTree$b1_toString
    );

    $.Field({Static:false, Public:false}, "rootIsNull", $.Boolean);

    $.Field({Static:false, Public:false}, "parent", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "data", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "left", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "right", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Parent", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Data", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Left", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Right", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BinaryTree`1+<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.IDisposable)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Exception)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Collections.IEnumerator)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm02.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm02.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm02.System.Collections.IEnumerator.get_Current)) ();
  };


  function $lGetEnumerator$gd__0__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
  }; 

  function $lGetEnumerator$gd__0_$l$gm__Finally5 () {
    this.$l$g1__state = -1;
    this.$l$g7__wrap4 = $T01().$As(this.$l$g7__wrap3);
    if (this.$l$g7__wrap4 !== null) {
      $IM00().Call(this.$l$g7__wrap4, null);
    }
  }; 

  function $lGetEnumerator$gd__0_$l$gm__Finally8 () {
    this.$l$g1__state = -1;
    this.$l$g7__wrap7 = $T01().$As(this.$l$g7__wrap6);
    if (this.$l$g7__wrap7 !== null) {
      $IM00().Call(this.$l$g7__wrap7, null);
    }
  }; 

  function $lGetEnumerator$gd__0_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                if (this.$l$g4__this.left !== null) {
                  this.$l$g7__wrap3 = $asm00.BinaryTree$b1.Of($thisType.T.get(this)).prototype.GetEnumerator.call(this.$l$g4__this.left);
                  this.$l$g1__state = 1;
                  $label0 = 1 /* goto IL_B6 */ ;
                  continue $labelgroup0;
                }
                $label0 = 2 /* goto IL_CD */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_B6 */ ;
                continue $labelgroup0;

              case 3: 
                this.$l$g1__state = -1;
                if (this.$l$g4__this.right !== null) {
                  this.$l$g7__wrap6 = $asm00.BinaryTree$b1.Of($thisType.T.get(this)).prototype.GetEnumerator.call(this.$l$g4__this.right);
                  this.$l$g1__state = 4;
                  $label0 = 3 /* goto IL_166 */ ;
                  continue $labelgroup0;
                }
                break;

              case 5: 
                this.$l$g1__state = 4;
                $label0 = 3 /* goto IL_166 */ ;
                continue $labelgroup0;

            }
            $label0 = 4 /* goto IL_17E */ ;
            continue $labelgroup0;

          case 1: /* IL_B6 */ 
            if ($IM01().Call(this.$l$g7__wrap3, null)) {
              this.$lf$g5__1 = $T04().$Cast($IM02().Call(this.$l$g7__wrap3, null));
              this.$l$g2__current = $T04().$Box(this.$lf$g5__1);
              this.$l$g1__state = 2;
              var result = true;
              return result;
            }
            this.$l$gm__Finally5();

            $label0 = 2 /* goto IL_CD */ ;
            continue $labelgroup0;
          case 2: /* IL_CD */ 
            this.$l$g2__current = JSIL.CloneParameter($thisType.T.get(this), this.$l$g4__this.data);
            this.$l$g1__state = 3;
            result = true;
            return result;

            $label0 = 3 /* goto IL_166 */ ;
            continue $labelgroup0;
          case 3: /* IL_166 */ 
            if ($IM01().Call(this.$l$g7__wrap6, null)) {
              this.$lf$g5__2 = $T04().$Cast($IM02().Call(this.$l$g7__wrap6, null));
              this.$l$g2__current = $T04().$Box(this.$lf$g5__2);
              this.$l$g1__state = 5;
              result = true;
              return result;
            }
            this.$l$gm__Finally8();

            $label0 = 4 /* goto IL_17E */ ;
            continue $labelgroup0;
          case 4: /* IL_17E */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetEnumerator$gd__0_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetEnumerator$gd__0_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetEnumerator$gd__0_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetEnumerator$gd__0_System_IDisposable_Dispose () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 1: 
              break;

            case 2: 
              break;

            default: 
              break $labelgroup0;

          }
          try {
          } finally {
            this.$l$gm__Finally5();
          }
          break $labelgroup0;

      }
    }
    /* Original label IL_2A */ 
    switch (this.$l$g1__state) {
      case 4: 
        break;

      case 5: 
        break;

      default: 
        return;

    }
    try {
    } finally {
      this.$l$gm__Finally8();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "BinaryTree`1+<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetEnumerator$gd__0__ctor
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally5", 
      JSIL.MethodSignature.Void, 
      $lGetEnumerator$gd__0_$l$gm__Finally5
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally8", 
      JSIL.MethodSignature.Void, 
      $lGetEnumerator$gd__0_$l$gm__Finally8
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetEnumerator$gd__0_MoveNext
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetEnumerator$gd__0_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetEnumerator$gd__0_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetEnumerator$gd__0_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetEnumerator$gd__0_System_IDisposable_Dispose
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("BinaryTree`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "$lf$g5__1", $.Single);

    $.Field({Static:false, Public:true }, "$lf$g5__2", $.Single);

    $.Field({Static:false, Public:true }, "$l$g7__wrap3", $asm02.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap4", $asm02.TypeRef("System.IDisposable"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap6", $asm02.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap7", $asm02.TypeRef("System.IDisposable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Boss */ 

(function Boss$Members () {
  var $, $thisType;

  function Boss__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Boss", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Boss__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Button */ 

(function Button$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Font)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.String")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean
      ]))) ();
  };


  function Button__ctor$00 (buttonBounds, align, buttonText, highlightText, borderColor, borderTexture, font, fillColor, AlignRectangle, drawDepth) {
    if (AlignRectangle) {
      if (align === $T01().Left) {
        this.bounds = buttonBounds.MemberwiseClone();
      } else if (align === $T01().Right) {
        this.bounds = $S00().Construct($S01().Construct((((buttonBounds.X | 0) - (buttonBounds.Width | 0)) | 0), buttonBounds.Y), buttonBounds.get_Size());
      } else {
        this.bounds = $S00().Construct($S01().Construct((((buttonBounds.X | 0) - (((buttonBounds.Width | 0) / 2) | 0)) | 0), buttonBounds.Y), buttonBounds.get_Size());
      }
    } else {
      this.bounds = buttonBounds.MemberwiseClone();
    }
    this.alignSide = align;
    this.buttonStatement = buttonText;
    this.originalStatement = buttonText;
    this.data = buttonText;
    this.buttonBorderColor = borderColor.MemberwiseClone();
    this.highlightStatement = highlightText;
    this.depth = +drawDepth;
    this.borderTex = borderTexture;
    this.buttonLocation = (this.bounds).get_Center().MemberwiseClone();
    this.text = $S02().Construct(this.bounds.Width, font.MemberwiseClone(), $T03().Color$White$value.MemberwiseClone(), false, this.buttonLocation, $T01().Forward, this.depth);
    $S03().CallVirtual("Update", null, this.text, this.originalStatement);
    this.drawBorder = true;
  }; 

  function Button__ctor$01 (buttonBounds, align, buttonText, highlightText, borderColor, borderTexture, font, fillColor, AlignRectangle, dBorder, drawDepth) {
    if (AlignRectangle) {
      if (align === $T01().Left) {
        this.bounds = buttonBounds.MemberwiseClone();
      } else if (align === $T01().Right) {
        this.bounds = $S00().Construct($S01().Construct((((buttonBounds.X | 0) - (buttonBounds.Width | 0)) | 0), buttonBounds.Y), buttonBounds.get_Size());
      } else {
        this.bounds = $S00().Construct($S01().Construct((((buttonBounds.X | 0) - (((buttonBounds.Width | 0) / 2) | 0)) | 0), buttonBounds.Y), buttonBounds.get_Size());
      }
    } else {
      this.bounds = buttonBounds.MemberwiseClone();
    }
    this.alignSide = align;
    this.buttonStatement = buttonText;
    this.originalStatement = buttonText;
    this.data = buttonText;
    this.highlightStatement = highlightText;
    this.buttonBorderColor = borderColor.MemberwiseClone();
    this.depth = +drawDepth;
    this.borderTex = borderTexture;
    this.buttonLocation = (this.bounds).get_Center().MemberwiseClone();
    this.text = $S02().Construct(this.bounds.Width, font.MemberwiseClone(), $T03().Color$White$value.MemberwiseClone(), false, this.buttonLocation, align, this.depth);
    $S03().CallVirtual("Update", null, this.text, this.buttonStatement);
    this.drawBorder = dBorder;
  }; 

  function Button__ctor$02 (buttonBounds, align, side, buttonText, highlightText, borderColor, borderTexture, font, fillColor, AlignRectangle, dBorder, drawDepth) {
    if (AlignRectangle) {
      if (align === $T01().Left) {
        this.bounds = buttonBounds.MemberwiseClone();
      } else if (align === $T01().Right) {
        this.bounds = $S00().Construct($S01().Construct((((buttonBounds.X | 0) - (buttonBounds.Width | 0)) | 0), buttonBounds.Y), buttonBounds.get_Size());
      } else {
        this.bounds = $S00().Construct($S01().Construct((((buttonBounds.X | 0) - (((buttonBounds.Width | 0) / 2) | 0)) | 0), buttonBounds.Y), buttonBounds.get_Size());
      }
    } else {
      this.bounds = buttonBounds.MemberwiseClone();
    }
    this.alignSide = align;
    this.buttonStatement = buttonText;
    this.originalStatement = buttonText;
    this.data = buttonText;
    this.highlightStatement = highlightText;
    this.buttonBorderColor = borderColor.MemberwiseClone();
    this.depth = +drawDepth;
    this.borderTex = borderTexture;
    this.buttonLocation = (this.bounds).get_Center().MemberwiseClone();
    if (side === $T0A().Left) {
      this.text = $S02().Construct(this.bounds.Width, font.MemberwiseClone(), $T03().Color$White$value.MemberwiseClone(), false, $S01().Construct((this.bounds).get_Left(), (this.bounds).get_Center().Y), align, this.depth);
    } else if (side === $T0A().Right) {
      this.text = $S02().Construct(this.bounds.Width, font.MemberwiseClone(), $T03().Color$White$value.MemberwiseClone(), false, $S01().Construct((this.bounds).get_Right(), (this.bounds).get_Center().Y), align, this.depth);
    } else if (side === $T0A().Top) {
      this.text = $S02().Construct(this.bounds.Width, font.MemberwiseClone(), $T03().Color$White$value.MemberwiseClone(), false, $S01().Construct((this.bounds).get_Center().X, (this.bounds).get_Top()), align, this.depth);
    } else if (side === $T0A().Bottom) {
      this.text = $S02().Construct(this.bounds.Width, font.MemberwiseClone(), $T03().Color$White$value.MemberwiseClone(), false, $S01().Construct((this.bounds).get_Center().X, (this.bounds).get_Bottom()), align, this.depth);
    }
    $S03().CallVirtual("Update", null, this.text, this.buttonStatement);
    this.drawBorder = dBorder;
  }; 

  function Button_Contains (mouseState) {
    return $S04().CallVirtual("Contains", null, this.bounds, 
      mouseState.get_Position().X, 
      mouseState.get_Position().Y
    );
  }; 

  function Button_Draw (sb) {
    (this.text).Draw(sb);
    if (this.drawBorder) {
      $S05().CallStatic($T0D(), "Draw", null, sb, this.bounds.MemberwiseClone(), this.buttonBorderColor.MemberwiseClone(), false);
    }
  }; 

  function Button_Pressed$03 (mouseState) {
    return !(!$S04().CallVirtual("Contains", null, this.bounds, 
        mouseState.get_Position().X, 
        mouseState.get_Position().Y
      ) || (mouseState.get_LeftButton() !== $T0E().Pressed));
  }; 

  function Button_Pressed$04 (mouseState, previousMouseState) {
    return !(!$S04().CallVirtual("Contains", null, this.bounds, 
        mouseState.get_Position().X, 
        mouseState.get_Position().Y
      ) || 
      (mouseState.get_LeftButton() !== $T0E().Pressed) || (previousMouseState.get_LeftButton() === $T0E().Pressed));
  }; 

  function Button_Update$05 (statement) {
    this.buttonStatement = statement;
    (this.text).Update(statement, true);
  }; 

  function Button_Update$06 (statement, clear) {
    if (clear) {
      this.buttonStatement = statement;
    } else {
      this.buttonStatement = (JSIL.ConcatString(this.buttonStatement, statement));
    }
    (this.text).Update(this.buttonStatement, true);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Button", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 12, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Direction"), 
          $.String, $.String, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm00.TypeRef("Font"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Boolean, $.Single
        ]), 
      Button__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Direction"), 
          $.String, $.String, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm00.TypeRef("Font"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Boolean, $.Boolean, 
          $.Single
        ]), 
      Button__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Direction"), 
          $asm00.TypeRef("Irbis.Side"), $.String, 
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Font"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Boolean, 
          $.Boolean, $.Single
        ]), 
      Button__ctor$02
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")]), 
      Button_Contains
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Button_Draw
    );

    $.Method({Static:false, Public:true }, "Pressed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")]), 
      Button_Pressed$03
    );

    $.Method({Static:false, Public:true }, "Pressed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")]), 
      Button_Pressed$04
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.String), 
      Button_Update$05
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean]), 
      Button_Update$06
    );

    $.Field({Static:false, Public:true }, "bounds", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "alignSide", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:true }, "highlightStatement", $.String);

    $.Field({Static:false, Public:true }, "originalStatement", $.String);

    $.Field({Static:false, Public:true }, "buttonStatement", $.String);

    $.Field({Static:false, Public:true }, "data", $.String);

    $.Field({Static:false, Public:false}, "buttonBorderColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:true }, "text", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "drawBorder", $.Boolean);

    $.Field({Static:false, Public:false}, "borderTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "buttonLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:false}, "depth", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Collided */ 

(function Collided$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Irbis.ICollisionObject)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Irbis.ICollisionObject.get_Collider)) ();
  };


  function Collided__ctor () {
    this.topCollided = $S00().Construct();
    this.leftCollided = $S00().Construct();
    this.rightCollided = $S00().Construct();
    this.bottomCollided = $S00().Construct();
  }; 

  function Collided_Add (objectToAdd, side) {
    switch (side.valueOf()) {
      case 0: 
        (this.topCollided).Add(objectToAdd);
        break;

      case 1: 
        (this.rightCollided).Add(objectToAdd);
        break;

      case 2: 
        (this.bottomCollided).Add(objectToAdd);
        break;

      case 3: 
        (this.leftCollided).Add(objectToAdd);
        break;

    }
  }; 

  function Collided_Contains (collisionObject) {
    return ((this.bottomCollided).Contains(collisionObject) || 
      (this.rightCollided).Contains(collisionObject) || 
      (this.leftCollided).Contains(collisionObject) || (this.topCollided).Contains(collisionObject));
  }; 

  function Collided_get_Count () {
    return ((((((((this.bottomCollided).get_Count() | 0) + ((this.rightCollided).get_Count() | 0)) | 0) + ((this.leftCollided).get_Count() | 0)) | 0) + ((this.topCollided).get_Count() | 0)) | 0);
  }; 

  function Collided_get_Horizontal () {
    return ((((this.leftCollided).get_Count() | 0) > 0) && (((this.rightCollided).get_Count() | 0) > 0));
  }; 

  function Collided_get_LeftmostBottomCollision () {
    var $temp00;
    var leftmost = 2147483647;

    for (var a$0 = this.bottomCollided._items, i$0 = 0, l$0 = (this.bottomCollided._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var c = a$0[i$0];
      if (leftmost > (($IM00().Call(c, null)).get_Left() | 0)) {
        leftmost = (($IM00().Call(c, null)).get_Left() | 0);
      }
    }
    return leftmost;
  }; 

  function Collided_get_RightmostBottomCollision () {
    var $temp00;
    var rightmost = -2147483648;

    for (var a$0 = this.bottomCollided._items, i$0 = 0, l$0 = (this.bottomCollided._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var c = a$0[i$0];
      if (rightmost < (($IM00().Call(c, null)).get_Right() | 0)) {
        rightmost = (($IM00().Call(c, null)).get_Right() | 0);
      }
    }
    return rightmost;
  }; 

  function Collided_get_Vertical () {
    return ((((this.topCollided).get_Count() | 0) > 0) && (((this.bottomCollided).get_Count() | 0) > 0));
  }; 

  function Collided_Intersects (rectangle) {
    var $temp00, $temp01, $temp02, $temp03;

    for (var a$0 = this.bottomCollided._items, i$0 = 0, l$0 = (this.bottomCollided._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var b = a$0[i$0];
      if (($IM00().Call(b, null)).Intersects(rectangle)) {
        var result = true;
        return result;
      }
    }

    for (var a$1 = this.rightCollided._items, i$1 = 0, l$1 = (this.rightCollided._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var r = a$1[i$1];
      if (($IM00().Call(r, null)).Intersects(rectangle)) {
        result = true;
        return result;
      }
    }

    for (var a$2 = this.leftCollided._items, i$2 = 0, l$2 = (this.leftCollided._size | 0); i$2 < l$2; ($temp02 = i$2, 
        i$2 = ((i$2 + 1) | 0), 
        $temp02)) {
      var i = a$2[i$2];
      if (($IM00().Call(i, null)).Intersects(rectangle)) {
        result = true;
        return result;
      }
    }

    for (var a$3 = this.topCollided._items, i$3 = 0, l$3 = (this.topCollided._size | 0); i$3 < l$3; ($temp03 = i$3, 
        i$3 = ((i$3 + 1) | 0), 
        $temp03)) {
      var t = a$3[i$3];
      if (($IM00().Call(t, null)).Intersects(rectangle)) {
        result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function Collided_Remove (collisionObject, side) {
    switch (side.valueOf()) {
      case 0: 
        var result = (this.topCollided).Remove(collisionObject);
        break;

      case 1: 
        result = (this.rightCollided).Remove(collisionObject);
        break;

      case 2: 
        result = (this.bottomCollided).Remove(collisionObject);
        break;

      case 3: 
        result = (this.leftCollided).Remove(collisionObject);
        break;

      default: 
        result = false;
        break;

    }
    return result;
  }; 

  function Collided_RemoveAll (collisionObject) {
    if ((this.bottomCollided).Contains(collisionObject)) {
      (this.bottomCollided).Remove(collisionObject);
    }
    if ((this.rightCollided).Contains(collisionObject)) {
      (this.rightCollided).Remove(collisionObject);
    }
    if ((this.leftCollided).Contains(collisionObject)) {
      (this.leftCollided).Remove(collisionObject);
    }
    if ((this.topCollided).Contains(collisionObject)) {
      (this.topCollided).Remove(collisionObject);
    }
    return true;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Collided", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Collided__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Irbis.ICollisionObject"), $asm00.TypeRef("Irbis.Side")]), 
      Collided_Add
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Irbis.ICollisionObject")]), 
      Collided_Contains
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      Collided_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Horizontal", 
      JSIL.MethodSignature.Return($.Boolean), 
      Collided_get_Horizontal
    );

    $.Method({Static:false, Public:true }, "get_LeftmostBottomCollision", 
      JSIL.MethodSignature.Return($.Int32), 
      Collided_get_LeftmostBottomCollision
    );

    $.Method({Static:false, Public:true }, "get_RightmostBottomCollision", 
      JSIL.MethodSignature.Return($.Int32), 
      Collided_get_RightmostBottomCollision
    );

    $.Method({Static:false, Public:true }, "get_Vertical", 
      JSIL.MethodSignature.Return($.Boolean), 
      Collided_get_Vertical
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Collided_Intersects
    );

    $.Method({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Irbis.ICollisionObject"), $asm00.TypeRef("Irbis.Side")]), 
      Collided_Remove
    );

    $.Method({Static:false, Public:true }, "RemoveAll", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Irbis.ICollisionObject")]), 
      Collided_RemoveAll
    );

    $.Field({Static:false, Public:true }, "topCollided", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")]));

    $.Field({Static:false, Public:true }, "leftCollided", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")]));

    $.Field({Static:false, Public:true }, "rightCollided", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")]));

    $.Field({Static:false, Public:true }, "bottomCollided", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")]));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Horizontal", $.Boolean);

    $.Property({Static:false, Public:true }, "Vertical", $.Boolean);

    $.Property({Static:false, Public:true }, "RightmostBottomCollision", $.Int32);

    $.Property({Static:false, Public:true }, "LeftmostBottomCollision", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Enchant */ 

(function Enchant$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Irbis.EnchantType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Irbis.IEnemy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Enchant, [$asm00.Enchant]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Irbis.IEnemy.get_ActiveEffects)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Irbis.IEnemy.UpgradeEffect)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Irbis.IEnemy.AddEffect)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Irbis.IEnemy.Hurt)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm00.Irbis.IEnemy.Stun)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm00.Irbis.IEnemy.set_SpeedModifier)) ();
  };


  function Enchant__ctor$00 (Type, Strength) {
    this.enchantType = Type;
    this.strength = (Strength | 0);
    this.CalculateStrength();
  }; 

  function Enchant__ctor$01 (enchant) {
    this.enchantType = enchant.enchantType;
    this.effectValue = +enchant.effectValue;
    this.effectDuration = +enchant.effectDuration;
    this.strength = 1;
  }; 

  function Enchant_AddEffect (enemy) {
    switch ((this.enchantType).valueOf()) {
      case 0: 
        var enchantIndex = (this.Contains($IM00().Call(enemy, null), $T00().Bleed) | 0);
        if (enchantIndex >= 0) {
          if ((($IM00().Call(enemy, null)).get_Item(enchantIndex).strength | 0) < (this.maxStack | 0)) {
            $IM01().Call(enemy, null, enchantIndex, this.effectDuration);
          }
        } else {
          $IM02().Call(enemy, null, this.CloneOf(this));
        }
        break;

      case 1: 
        enchantIndex = (this.Contains($IM00().Call(enemy, null), $T00().Fire) | 0);
        if (enchantIndex >= 0) {
          if ((($IM00().Call(enemy, null)).get_Item(enchantIndex).strength | 0) < (this.maxStack | 0)) {
            $IM01().Call(enemy, null, enchantIndex, this.effectDuration);
          }
        } else {
          $IM02().Call(enemy, null, this.CloneOf(this));
        }
        break;

      case 2: 
        if ((this.Contains($IM00().Call(enemy, null), $T00().Poison) | 0) < 0) {
          $IM02().Call(enemy, null, this.CloneOf(this));
        }
        break;

      case 4: 
        if ((this.uses | 0) > 0) {
          enchantIndex = (this.Contains($IM00().Call(enemy, null), $T00().Poison) | 0);
          if (enchantIndex >= 0) {
            if ((($IM00().Call(enemy, null)).get_Item(enchantIndex).strength | 0) < (this.maxStack | 0)) {
              $IM01().Call(enemy, null, enchantIndex, this.effectDuration);
            }
          } else {
            $IM02().Call(enemy, null, this.CloneOf(this));
          }
          this.uses = (((this.uses | 0) - 1) | 0);
        }
        break;

      case 5: 
        $IM03().Call(enemy, null, this.effectValue);
        break;

      case 6: 
        $IM04().Call(enemy, null, this.effectDuration);
        break;

    }
  }; 

  function Enchant_ApplyEffect (enemy) {
    switch ((this.enchantType).valueOf()) {
      case 0: 
        $IM03().Call(enemy, null, (+this.effectValue * +(this.strength)) * +$T04().get_DeltaTime());
        break;

      case 1: 
        $IM03().Call(enemy, null, (+this.effectValue * +(this.strength)) * +$T04().get_DeltaTime());
        break;

      case 2: 
        $IM05().Call(enemy, null, this.effectValue);
        break;

      case 4: 
        $IM03().Call(enemy, null, (+this.effectValue * +(this.strength)) * +$T04().get_DeltaTime());
        break;

    }
    this.effectDuration = +this.effectDuration - +$T04().get_DeltaTime();
    if (+this.effectDuration <= 0) {
      var enchantType = this.enchantType;
      if (enchantType === $T00().Frost) {
        $IM05().Call(enemy, null, 1);
      }
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function Enchant_CalculateStrength () {
    switch ((this.enchantType).valueOf()) {
      case 0: 
        this.effectDuration = +(this.strength) * 10;
        this.effectValue = +(this.strength) * 1;
        this.maxStack = ((((+(+(this.strength) / 3)) | 0) + 2) | 0);
        break;

      case 1: 
        this.effectDuration = (+(this.strength) * 2) + 1;
        this.effectValue = +(this.strength) * 3;
        this.maxStack = ((((+(+(this.strength) / 3)) | 0) + 2) | 0);
        break;

      case 2: 
        this.effectDuration = +(this.strength) * 5;
        this.effectValue = Math.fround(Math.pow(0.5, +(this.strength)));
        this.maxStack = ((((+(+(this.strength) / 3)) | 0) + 2) | 0);
        break;

      case 3: 
        this.effectValue = +(this.strength);
        break;

      case 4: 
        this.effectDuration = +(this.strength) * 30;
        this.effectValue = Math.fround(Math.pow(2, +(this.strength)));
        this.maxStack = ((((+(+(this.strength) / 3)) | 0) + 2) | 0);
        this.uses = Math.imul(this.strength, 5);
        break;

      case 5: 
        this.effectValue = +(this.strength) * 15;
        break;

      case 6: 
        this.effectDuration = +(this.strength) * 1.5;
        break;

    }
  }; 

  function Enchant_CloneOf (enchant) {
    return $S00().Construct(enchant);
  }; 

  function Enchant_Contains (EnchantList, Type) {

    for (var i = 0; i < (EnchantList.get_Count() | 0); i = ((i + 1) | 0)) {
      if (EnchantList.get_Item(i).enchantType === Type) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  }; 

  function Enchant_Downgrade () {
    this.strength = (((this.strength | 0) - 1) | 0);
    this.CalculateStrength();
  }; 

  function Enchant_Upgrade () {
    this.strength = (((this.strength | 0) + 1) | 0);
    this.CalculateStrength();
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Enchant", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Irbis.EnchantType"), $.Int32]), 
      Enchant__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      Enchant__ctor$01
    );

    $.Method({Static:false, Public:true }, "AddEffect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.IEnemy")), 
      Enchant_AddEffect
    );

    $.Method({Static:false, Public:true }, "ApplyEffect", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Irbis.IEnemy")]), 
      Enchant_ApplyEffect
    );

    $.Method({Static:false, Public:true }, "CalculateStrength", 
      JSIL.MethodSignature.Void, 
      Enchant_CalculateStrength
    );

    $.Method({Static:false, Public:true }, "CloneOf", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Enchant_CloneOf
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.List`1", [$.Type]), $asm00.TypeRef("Irbis.EnchantType")]), 
      Enchant_Contains
    );

    $.Method({Static:false, Public:true }, "Downgrade", 
      JSIL.MethodSignature.Void, 
      Enchant_Downgrade
    );

    $.Method({Static:false, Public:true }, "Upgrade", 
      JSIL.MethodSignature.Void, 
      Enchant_Upgrade
    );

    $.Field({Static:false, Public:true }, "enchantType", $asm00.TypeRef("Irbis.EnchantType"));

    $.Field({Static:false, Public:true }, "strength", $.Int32);

    $.Field({Static:false, Public:true }, "maxStack", $.Int32);

    $.Field({Static:false, Public:false}, "uses", $.Int32);

    $.Field({Static:false, Public:true }, "effectValue", $.Single);

    $.Field({Static:false, Public:true }, "effectDuration", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Line */ 

(function Line$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm02.System.Int16))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.Int16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Ray)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Line, [$asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector3, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.PrimitiveType, $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm02.System.Int32, $asm02.System.Int32, 
        System.Array.Of($asm02.System.Int16), $asm02.System.Int32, 
        $asm02.System.Int32
      ], ["T"]))) ();
  };


  function Line__ctor$00 (Origin, End) {
    this.origin = $S01().Construct((+Origin.X - +((+($T01().halfResolution.X) / +$T01().screenScale))), -(+Origin.Y - +((+($T01().halfResolution.Y) / +$T01().screenScale))));
    this.end = $S01().Construct((+End.X - +((+($T01().halfResolution.X) / +$T01().screenScale))), -(+End.Y - +((+($T01().halfResolution.Y) / +$T01().screenScale))));
    this.direction = $T00().op_Subtraction(this.end.MemberwiseClone(), this.origin);
    (this.direction).Normalize();
  }; 

  function Line__ctor$01 (Origin, End, CorrectWorldCoordinates) {
    if (CorrectWorldCoordinates) {
      this.origin = $S01().Construct((+Origin.X - +((+($T01().halfResolution.X) / +$T01().screenScale))), -(+Origin.Y - +((+($T01().halfResolution.Y) / +$T01().screenScale))));
      this.end = $S01().Construct((+End.X - +((+($T01().halfResolution.X) / +$T01().screenScale))), -(+End.Y - +((+($T01().halfResolution.Y) / +$T01().screenScale))));
      this.direction = $T00().op_Subtraction(this.end.MemberwiseClone(), this.origin);
      (this.direction).Normalize();
    } else {
      this.origin = Origin.MemberwiseClone();
      this.end = End.MemberwiseClone();
      this.direction = $T00().op_Subtraction(this.end.MemberwiseClone(), this.origin);
      (this.direction).Normalize();
    }
  }; 

  function Line_Draw () {
    var vert = JSIL.Array.New($T04(), 4);
    var perp = $S01().Construct(-this.direction.Y, this.direction.X);
    perp.Normalize();
    perp = $S02().CallStatic($T00(), "op_Division", null, perp.MemberwiseClone(), 2);
    vert[0].Position = $S03().Construct($T00().op_Subtraction(this.origin.MemberwiseClone(), perp), 0);
    vert[0].Color = $T06().Color$Red$value.MemberwiseClone();
    vert[1].Position = $S03().Construct($T00().op_Addition(this.origin.MemberwiseClone(), perp), 0);
    vert[1].Color = $T06().Color$Red$value.MemberwiseClone();
    vert[2].Position = $S03().Construct($T00().op_Addition(this.end.MemberwiseClone(), perp), 0);
    vert[2].Color = $T06().Color$Red$value.MemberwiseClone();
    vert[3].Position = $S03().Construct($T00().op_Subtraction(this.end.MemberwiseClone(), perp), 0);
    vert[3].Color = $T06().Color$Red$value.MemberwiseClone();
    var ind = JSIL.Array.New($T08(), [0, 1, 2, 1, 2, 3]);
    $S04().CallVirtual("DrawUserIndexedPrimitives$b1", [$asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor], $T01().graphics.get_GraphicsDevice(), 
      $T0B().TriangleList, 
      vert, 
      0, 
      vert.length, 
      ind, 
      0, 
      (((ind.length | 0) / 3) | 0)
    );
  }; 

  function Line_get_Direction () {
    return this.direction;
  }; 

  function Line_get_End () {
    return this.end;
  }; 

  function Line_get_Origin () {
    return this.origin;
  }; 

  function Line_get_Zero () {
    return $thisType.zero;
  }; 

  function Line_Intersect (ray) {
    var r_px = +ray.get_Origin().X;
    var r_py = +ray.get_Origin().Y;
    var r_dx = +ray.get_Direction().X;
    var r_dy = +ray.get_Direction().Y;
    var s_px = +this.origin.X;
    var s_dx = +this.end.X - +this.origin.X;
    var s_dy = +this.end.Y - +this.origin.Y;
    var T2 = +((((r_dx * (+this.origin.Y - r_py)) + (r_dy * (r_px - s_px))) / ((s_dx * r_dy) - (s_dy * r_dx))));
    var T3 = +((((s_px + (s_dx * T2)) - r_px) / r_dx));
    if (T3 < 0) {
      var result = $T00().get_Zero().MemberwiseClone();
    } else if (!((T2 >= 0) && (T2 <= 1))) {
      result = $T00().get_Zero().MemberwiseClone();
    } else {
      result = $S01().Construct((r_px + (r_dx * T3)), (r_py + (r_dy * T3)));
    }
    return result;
  }; 

  function Line_set_End (value) {
    this.end = value.MemberwiseClone();
    this.direction = $T00().op_Subtraction(this.end.MemberwiseClone(), this.origin);
    (this.direction).Normalize();
  }; 

  function Line_set_Origin (value) {
    this.origin = value.MemberwiseClone();
    this.direction = $T00().op_Subtraction(this.end.MemberwiseClone(), this.origin);
    (this.direction).Normalize();
  }; 

  function Line_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T0F(), ["{Origin:", this.origin, " Direction:", this.direction, " End:", this.end, "}"]));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Line", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Line__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Boolean
        ]), 
      Line__ctor$01
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Void, 
      Line_Draw
    );

    $.Method({Static:false, Public:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Line_get_Direction
    );

    $.Method({Static:false, Public:true }, "get_End", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Line_get_End
    );

    $.Method({Static:false, Public:true }, "get_Origin", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Line_get_Origin
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type), 
      Line_get_Zero
    );

    $.Method({Static:false, Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Ray")]), 
      Line_Intersect
    );

    $.Method({Static:false, Public:true }, "set_End", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Line_set_End
    );

    $.Method({Static:false, Public:true }, "set_Origin", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Line_set_Origin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Line_toString
    );

    $.Field({Static:true , Public:false}, "zero", $.Type);

    $.Field({Static:false, Public:false}, "origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "direction", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "end", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    function Line__cctor () {
      $thisType.zero = new $thisType();
      $thisType.zero = $S00().Construct($T00().get_Zero().MemberwiseClone(), $T00().get_Zero().MemberwiseClone());
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Line__cctor
    );

    $.Property({Static:false, Public:true }, "Origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Direction", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "End", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:true , Public:true }, "Zero", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Irbis");
/* interface Irbis.ICollisionObject */ 

JSIL.MakeInterface(
  "Irbis.ICollisionObject", true, [], function ($) {
    $.Method({}, "get_Collider", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")));
    $.Method({}, "set_Collider", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")));
    $.Method({}, "get_Velocity", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")));
    $.Property({}, "Collider");
    $.Property({}, "Velocity");
  }, []);

/* interface Irbis.IEnemy */ 

JSIL.MakeInterface(
  "Irbis.IEnemy", true, [], function ($) {
    $.Method({}, "get_Collider", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")));
    $.Method({}, "set_Collider", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")));
    $.Method({}, "get_MaxHealth", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_MaxHealth", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_Health", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Health", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SpeedModifier", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SpeedModifier", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_Position", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")));
    $.Method({}, "set_Position", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")));
    $.Method({}, "get_ActiveEffects", JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")])));
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_AIenabled", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_AIenabled", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_Mass", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_StunTime", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "Update", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "ThreadPoolCallback", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "Enemy_OnPlayerAttack", new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Attacking")]));
    $.Method({}, "Enemy_OnPlayerShockwave", new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Int32, 
          $.Int32, $.Single
        ]));
    $.Method({}, "AddEffect", JSIL.MethodSignature.Action($asm00.TypeRef("Enchant")));
    $.Method({}, "UpgradeEffect", new JSIL.MethodSignature(null, [$.Int32, $.Single]));
    $.Method({}, "Hurt", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "Stun", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "Draw", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")));
    $.Property({}, "Collider");
    $.Property({}, "MaxHealth");
    $.Property({}, "Health");
    $.Property({}, "SpeedModifier");
    $.Property({}, "Position");
    $.Property({}, "ActiveEffects");
    $.Property({}, "Name");
    $.Property({}, "AIenabled");
    $.Property({}, "Mass");
    $.Property({}, "StunTime");
  }, [$asm00.TypeRef("Irbis.ICollisionObject")]);

/* class LizardGuy */ 

(function LizardGuy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Collided)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Irbis.Location)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Square)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Square))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.System.Math)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Player)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Irbis.Irbis_AttackEventDelegate)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Irbis.Irbis_ShockwaveEventDelegate)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Enchant)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.LizardGuy_LizardActivity)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm02.System.Decimal)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Irbis.ICollisionObject)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Wall)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Irbis.Attacking)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm02.System.Char)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm02.System.Threading.Interlocked)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm02.System.Threading.EventWaitHandle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm00.Irbis.Attacking]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [
        $asm01.Microsoft.Xna.Framework.Point, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Single
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [$asm02.System.Decimal]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Decimal, [$asm02.System.Decimal]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Decimal, [$asm02.System.Single]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm00.Irbis.Direction, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [
        $asm02.System.Single, $asm02.System.Single, 
        $asm02.System.Single
      ]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm00.Irbis.Direction, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [JSIL.Reference.Of($asm02.System.Int32)]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Irbis.ICollisionObject.get_Collider)) ();
  };


  function LizardGuy__ctor (t, iPos, enemyHealth, enemyDamage, enemySpeed, BossArena, drawDepth) {
    var $temp00;
    this.$name = "Lizard Guy Boss (rawr)";
    this.aiEnabled = true;
    this.mass = 5;
    this.terminalVelocity = 5000;
    this.rollCooldownTime = 8;
    this.rollStunTime = 5;
    this.rollPauseTime = 0.1;
    this.rollLerp = 2;
    this.rollDamage = 65;
    this.rollKnockback = $S00().Construct(300, -300);
    this.swipeChargeTime = 1;
    this.swipeCooldownTime = 1.5;
    this.swipePauseTime = 0.75;
    this.swipeKnockback = $S00().Construct(100, -250);
    this.swipeDamage = 25;
    this.swipeRange = 80;
    this.tailwhipChargeTime = 1;
    this.tailwhipCooldownTime = 2;
    this.tailwhipPauseTime = 0.75;
    this.tailwhipKnockback = $S00().Construct(700, -500);
    this.tailwhipDamage = 35;
    this.meleeActivityLimit = 3;
    this.buryDigSpeed = 250;
    this.buryDigLerp = 5;
    this.buryChargeTime = 0;
    this.buryCooldownTime = 20;
    this.buryStrikeMaxWaitTime = 3;
    this.buryStrikeMinWaitTime = 1;
    this.buryStrikeRadius = 100;
    this.buryStrikeChargeTime = 1.5;
    this.buryInitialEmergeChance = 0.1;
    this.buryEmergeChance = 0.1;
    this.buryStrikeDamage = 35;
    this.buryKnockback = $S00().Construct(100, -250);
    this.buryStrikeSize = $S01().Construct(100, 50);
    this.buryStrikeFrame = 10;
    this.wanderLerp = 100;
    this.stunLerp = 5;
    this.animationSpeed = JSIL.Array.New($T02(), 40);
    this.animationFrames = JSIL.Array.New($T04(), 40);
    this.attackColliderWidth = 100;
    this.attackColliderHeight = 70;
    this.state = JSIL.Array.New($T04(), 5);
    this.cooldown = JSIL.Array.New($T02(), 5);
    this.cooldown[0] = 0;
    this.cooldown[1] = 5;
    this.cooldown[2] = 3;
    this.cooldown[4] = 15;
    this.collided = new ($T05())();
    this.rollTimeMax = 0.25;
    this.rollSpeed = 1500;
    this.rollTime = 0;
    this.jumpTime = 0;
    this.idleTime = 0;
    this.airSpeed = 0.6 * +enemySpeed;
    this.attackMovementSpeed = 0.3 * +enemySpeed;
    this.attackImmediately = false;
    this.interruptAttack = false;
    this.climbablePixels = 3;
    this.animationFrame = $S02().Construct((((+($T07().font.charHeight) * 2) * +($T07().textScale)) | 0), $T07().font.MemberwiseClone(), $T08().Color$White$value.MemberwiseClone(), true, $T03().get_Zero(), $T09().Left, (+drawDepth + 0.001));
    this.tex = t;
    this.attackPlayerLock = new ($T0A())();
    this.collidedLock = new ($T0A())();
    this.set_AIenabled(true);
    this.depth = +drawDepth;
    this.climbablePixels = 3;
    this.position = iPos.MemberwiseClone();
    this.direction = $T09().Forward;
    this.location = $T0B().Air;
    this.wanderSpeed = 0.2 * +enemySpeed;
    this.wanderTime = 1;
    this.initialWanderTime = 0;
    this.defaultSpeed = +enemySpeed;
    this.speed = +enemySpeed;
    this.jumpTime = 0;
    this.animationNoLoop = false;
    this.colliderOffset = $S01().Construct(44, 26);
    (this.collider.Size = (this.trueCollider.Size = (this.colliderSize = $S01().Construct(60, 100)).MemberwiseClone()).MemberwiseClone());
    this.position.X = +this.position.X - +(this.colliderOffset.X);
    this.position.Y = +this.position.Y - +(this.colliderOffset.Y);
    this.health = +enemyHealth;
    this.maxHealth = +enemyHealth;
    this.lastHitByAttackID = -1;
    this.stunned = 0;
    this.speedModifier = 1;
    this.attackCollider = $T0C().get_Empty().MemberwiseClone();
    this.attackDamage = 0;
    this.attack1Damage = +enemyDamage;
    this.attackCooldown = 2;
    this.attackCooldownTimer = 3;
    this.combatCheckDistanceSqr = Math.imul(this.attackColliderWidth, this.attackColliderWidth);
    this.persueCheckDistanceSqr = 40000;
    this.combat = false;
    this.activeEffects = $S03().Construct();
    this.shockwaveMaxEffectDistance = +$T07().jamie.shockwaveEffectiveDistance;
    this.shockwaveMaxEffectDistanceSquared = +this.shockwaveMaxEffectDistance * +this.shockwaveMaxEffectDistance;
    this.shockwaveEffectiveDistance = 200;
    this.shockwaveStunTime = +$T07().jamie.shockwaveStunTime;
    this.shockwaveKnockback = $T07().jamie.shockwaveKnockback.MemberwiseClone();
    this.displayRect = $S04().Construct(((this.get_Position().X) | 0), ((this.get_Position().Y) | 0), 128, 128);
    this.animationSourceRect = $S04().Construct(0, 0, 128, 128);
    this.currentFrame = 0;
    this.currentAnimation = 0;
    this.animationSpeed[0] = 0.1;

    for (var i = 1; i < 40; i = ((i + 1) | 0)) {
      this.animationSpeed[i] = +this.animationSpeed[0];
    }
    this.animationFrames[0] = 0;
    this.animationFrames[1] = 0;
    this.animationFrames[2] = 0;
    this.animationFrames[3] = 0;
    this.animationFrames[4] = 0;
    this.animationFrames[5] = 0;
    this.animationFrames[6] = 2;
    this.animationFrames[7] = 2;
    this.animationFrames[8] = 2;
    this.animationFrames[9] = 2;
    this.animationFrames[10] = 0;
    this.animationFrames[11] = 0;
    this.animationFrames[12] = 0;
    this.animationFrames[13] = 0;
    this.animationFrames[14] = 0;
    this.animationFrames[15] = 0;
    this.animationFrames[16] = 0;
    this.animationFrames[17] = 0;
    this.animationFrames[18] = 0;
    this.animationFrames[19] = 0;
    this.animationFrames[20] = 0;
    this.animationFrames[21] = 0;
    this.animationFrames[22] = 0;
    this.animationFrames[23] = 0;
    this.animationFrames[24] = 0;
    this.animationFrames[25] = 0;
    this.animationFrames[26] = 1;
    this.animationFrames[27] = 1;
    this.animationFrames[28] = 5;
    this.animationFrames[29] = 5;
    this.animationFrames[30] = 4;
    this.animationFrames[31] = 4;
    this.animationFrames[32] = 0;
    this.animationFrames[33] = 0;
    this.animationFrames[34] = 0;
    this.animationFrames[35] = 0;
    this.animationFrames[36] = 0;
    this.animationFrames[37] = 0;
    this.animationFrames[38] = 3;
    this.animationFrames[39] = 2;
    this.animationSourceRect = $S04().Construct(Math.imul(128, this.currentFrame), Math.imul(128, this.currentAnimation), 128, 128);
    if (BossArena !== null) {
      this.bossArena = JSIL.Nullable_Value(BossArena).MemberwiseClone();
    } else {
      var topmostBottom = ((($T07().squareList.get_Item(0)).get_Collider()).get_Bottom() | 0);
      var leftmostRight = ((($T07().squareList.get_Item(0)).get_Collider()).get_Right() | 0);
      var rightmostLeft = ((($T07().squareList.get_Item(0)).get_Collider()).get_Left() | 0);
      var bottommosttop = ((($T07().squareList.get_Item(0)).get_Collider()).get_Top() | 0);

      for (var a$0 = $T07().squareList._items, i$0 = 0, l$0 = ($T07().squareList._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var s = a$0[i$0];
        if (((s.get_Collider()).get_Bottom() | 0) < topmostBottom) {
          topmostBottom = ((s.get_Collider()).get_Bottom() | 0);
        }
        if (((s.get_Collider()).get_Right() | 0) < leftmostRight) {
          leftmostRight = ((s.get_Collider()).get_Right() | 0);
        }
        if (((s.get_Collider()).get_Left() | 0) > rightmostLeft) {
          rightmostLeft = ((s.get_Collider()).get_Left() | 0);
        }
        if (((s.get_Collider()).get_Top() | 0) > bottommosttop) {
          bottommosttop = ((s.get_Collider()).get_Top() | 0);
        }
      }
      this.bossArena = $S04().Construct(leftmostRight, topmostBottom, ((rightmostLeft - leftmostRight) | 0), ((bottommosttop - topmostBottom) | 0));
    }
    if ((((this.bossArena.Height | 0) - (this.colliderSize.Y | 0)) | 0) > 300) {
      this.rollLeapInitialYvelocity = -Math.fround(Math.sqrt(((2 * +$T07().gravity) * +this.mass) * 300));
    } else {
      this.rollLeapInitialYvelocity = -Math.fround(Math.sqrt(((2 * +$T07().gravity) * +this.mass) * +((this.bossArena.Height | 0) - (this.colliderSize.Y | 0))));
    }
    this.rollLeapTime = +((-this.rollLeapInitialYvelocity / (+$T07().gravity * +this.mass)));
    $T07().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["rollLeapInitialYvelocity:", $T02().$Box(this.rollLeapInitialYvelocity), " rollLeapTime:", $T02().$Box(this.rollLeapTime)])));
    $T07().jamie.add_OnPlayerAttack($T15().New(this, null, new JSIL.MethodPointerInfo($thisType, "Enemy_OnPlayerAttack", $S05(), false, false)));
    $T07().jamie.add_OnPlayerShockwave($T16().New(this, null, new JSIL.MethodPointerInfo($thisType, "Enemy_OnPlayerShockwave", $S06(), false, false)));
  }; 

  function LizardGuy_AddEffect (effect) {
    (this.activeEffects).Add(effect);
  }; 

  function LizardGuy_Animate () {
    this.timeSinceLastFrame = +this.timeSinceLastFrame + +$T07().get_DeltaTime();
    if (+this.timeSinceLastFrame >= +this.animationSpeed[this.currentAnimation]) {
      this.currentFrame = (((this.currentFrame | 0) + 1) | 0);
      this.timeSinceLastFrame = +this.timeSinceLastFrame - +this.animationSpeed[this.currentAnimation];
    }
    if (this.previousActivity !== this.activity) {
      this.SetAnimation();
    } else if ((this.currentFrame | 0) > (this.animationFrames[this.currentAnimation] | 0)) {
      if (this.animationNoLoop) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              switch (this.currentAnimation) {
                case 6: 
                  break;

                case 7: 
                  break;

                case 8: 
                case 9: 
                case 10: 
                case 11: 
                case 18: 
                case 19: 
                case 22: 
                case 23: 
                  $label0 = 9 /* goto IL_1AD */ ;
                  continue $labelgroup0;

                case 12: 
                  $label0 = 1 /* goto IL_135 */ ;
                  continue $labelgroup0;

                case 13: 
                  $label0 = 1 /* goto IL_135 */ ;
                  continue $labelgroup0;

                case 14: 
                  $label0 = 2 /* goto IL_142 */ ;
                  continue $labelgroup0;

                case 15: 
                  $label0 = 2 /* goto IL_142 */ ;
                  continue $labelgroup0;

                case 16: 
                  $label0 = 3 /* goto IL_150 */ ;
                  continue $labelgroup0;

                case 17: 
                  $label0 = 3 /* goto IL_150 */ ;
                  continue $labelgroup0;

                case 20: 
                  $label0 = 4 /* goto IL_165 */ ;
                  continue $labelgroup0;

                case 21: 
                  $label0 = 4 /* goto IL_165 */ ;
                  continue $labelgroup0;

                case 24: 
                  $label0 = 5 /* goto IL_172 */ ;
                  continue $labelgroup0;

                case 25: 
                  $label0 = 5 /* goto IL_172 */ ;
                  continue $labelgroup0;

                case 26: 
                  $label0 = 6 /* goto IL_17F */ ;
                  continue $labelgroup0;

                case 27: 
                  $label0 = 6 /* goto IL_17F */ ;
                  continue $labelgroup0;

                case 28: 
                  $label0 = 7 /* goto IL_194 */ ;
                  continue $labelgroup0;

                case 29: 
                  $label0 = 7 /* goto IL_194 */ ;
                  continue $labelgroup0;

                case 30: 
                  $label0 = 8 /* goto IL_1A2 */ ;
                  continue $labelgroup0;

                case 31: 
                  $label0 = 8 /* goto IL_1A2 */ ;
                  continue $labelgroup0;

                default: 
                  $label0 = 9 /* goto IL_1AD */ ;
                  continue $labelgroup0;

              }
              this.SetAnimation(8, false);
              break $labelgroup0;

            case 1: /* IL_135 */ 
              this.SetAnimation(6, true);
              break $labelgroup0;

            case 2: /* IL_142 */ 
              this.SetAnimation(10, false);
              break $labelgroup0;

            case 3: /* IL_150 */ 
              this.SetAnimation(0, false);
              this.activity = $T18().Misc;
              break $labelgroup0;

            case 4: /* IL_165 */ 
              this.SetAnimation(0, false);
              break $labelgroup0;

            case 5: /* IL_172 */ 
              this.SetAnimation(0, false);
              break $labelgroup0;

            case 6: /* IL_17F */ 
              this.SetAnimation(0, false);
              this.activity = $T18().Misc;
              break $labelgroup0;

            case 7: /* IL_194 */ 
              this.SetAnimation(30, false);
              break $labelgroup0;

            case 8: /* IL_1A2 */ 
              this.SetAnimation(0, false);
              break $labelgroup0;

            case 9: /* IL_1AD */ 
              this.SetAnimation();
              break $labelgroup0;

          }
        }
      } else {
        this.currentFrame = 0;
      }
    }
    if ((this.previousAnimation | 0) !== (this.currentAnimation | 0)) {
      this.timeSinceLastFrame = 0;
      this.currentFrame = 0;
    }
    this.animationSourceRect.X = Math.imul(128, this.currentFrame);
    this.animationSourceRect.Y = Math.imul(128, this.currentAnimation);
    this.previousAnimation = (this.currentAnimation | 0);
    this.previousActivity = this.activity;
  }; 

  function LizardGuy_BuryAttack () {
    switch (this.state[4]) {
      case 1: 
        if (!(((this.currentAnimation | 0) !== 30) && ((this.currentAnimation | 0) !== 31))) {
          this.SetAnimation(36, false);
          this.state[4] = 2;
          this.velocity.Y = 0;
          this.position.Y = +((this.bossArena).get_Bottom());
        }
        break;

      case 2: 
        this.buryStrikeWaitTime = (+$T07().get_RandomFloat() * (+this.buryStrikeMaxWaitTime - +this.buryStrikeMinWaitTime)) + +this.buryStrikeMinWaitTime;
        this.buryStrikeWaitTimer = 0;
        this.state[4] = 3;
        break;

      case 3: 
        this.buryStrikeWaitTimer = +this.buryStrikeWaitTimer + +$T07().get_DeltaTime();
        if (+this.buryStrikeWaitTimer >= +this.buryStrikeWaitTime) {
          this.state[4] = 4;
        }
        break;

      case 4: 
        this.buryStrikeSide = $T07().SideClosest(this.bossArena.MemberwiseClone(), $T07().jamie.get_Collider().MemberwiseClone());
        switch ((this.buryStrikeSide).valueOf()) {
          case 0: 
            this.buryStrikeLocation.Y = +((this.bossArena).get_Top());
            this.buryStrikeLocation.X = +(((((+$T07().get_RandomFloat() * +(this.buryStrikeRadius)) * 2) - +(this.buryStrikeRadius)) | 0) + ($T07().jamie.get_Collider().get_Center().X | 0));
            this.attackCollider = $S04().Construct(((((this.buryStrikeLocation.X) | 0) - (((this.buryStrikeSize.X | 0) / 2) | 0)) | 0), ((this.buryStrikeLocation.Y) | 0), this.buryStrikeSize.X, this.buryStrikeSize.Y);
            break;

          case 1: 
            this.buryStrikeLocation.X = +((this.bossArena).get_Right());
            this.buryStrikeLocation.Y = +(((((+$T07().get_RandomFloat() * +(this.buryStrikeRadius)) * 2) - +(this.buryStrikeRadius)) | 0) + ($T07().jamie.get_Collider().get_Center().Y | 0));
            this.attackCollider = $S04().Construct(((((this.buryStrikeLocation.X) | 0) - (this.buryStrikeSize.Y | 0)) | 0), ((((this.buryStrikeLocation.Y) | 0) - (((this.buryStrikeSize.X | 0) / 2) | 0)) | 0), this.buryStrikeSize.Y, this.buryStrikeSize.X);
            break;

          case 2: 
            this.buryStrikeLocation.Y = +((this.bossArena).get_Bottom());
            this.buryStrikeLocation.X = +(((((+$T07().get_RandomFloat() * +(this.buryStrikeRadius)) * 2) - +(this.buryStrikeRadius)) | 0) + ($T07().jamie.get_Collider().get_Center().X | 0));
            this.attackCollider = $S04().Construct(((((this.buryStrikeLocation.X) | 0) - (((this.buryStrikeSize.X | 0) / 2) | 0)) | 0), ((((this.buryStrikeLocation.Y) | 0) - (this.buryStrikeSize.Y | 0)) | 0), this.buryStrikeSize.X, this.buryStrikeSize.Y);
            break;

          case 3: 
            this.buryStrikeLocation.X = +((this.bossArena).get_Left());
            this.buryStrikeLocation.Y = +(((((+$T07().get_RandomFloat() * +(this.buryStrikeRadius)) * 2) - +(this.buryStrikeRadius)) | 0) + ($T07().jamie.get_Collider().get_Center().Y | 0));
            this.attackCollider = $S04().Construct(((this.buryStrikeLocation.X) | 0), ((((this.buryStrikeLocation.Y) | 0) - (((this.buryStrikeSize.X | 0) / 2) | 0)) | 0), this.buryStrikeSize.Y, this.buryStrikeSize.X);
            break;

        }
        this.state[4] = 5;
        this.buryStrikeWaitTimer = 0;
        break;

      case 5: 
        this.buryStrikeWaitTimer = +this.buryStrikeWaitTimer + +$T07().get_DeltaTime();
        this.buryRumbleFrameTimer = +this.buryRumbleFrameTimer + +$T07().get_DeltaTime();
        if (+this.buryRumbleFrameTimer >= +this.animationSpeed[39]) {
          this.buryRumbleFrame = (((this.buryRumbleFrame | 0) + 1) | 0);
          this.buryRumbleFrameTimer = +this.buryRumbleFrameTimer - +this.animationSpeed[39];
          if ((this.buryRumbleFrame | 0) > (this.animationFrames[39] | 0)) {
            this.buryRumbleFrame = 0;
          }
        }
        if (+this.buryStrikeWaitTimer >= +this.buryStrikeChargeTime) {
          this.buryStrikeFrameTimer = +(this.buryStrikeFrame = 0);
          this.state[4] = 6;
        }
        break;

      case 6: 
        if ((this.attackCollider).Intersects($T07().jamie.get_Collider())) {
          this.OnTouch(this.attackCollider, this.buryKnockback.MemberwiseClone());
          $T07().jamie.Hurt(this.buryStrikeDamage);
          $T07().CameraShake(0.1, 5);
        }
        if ((this.buryStrikeFrame | 0) > (this.animationFrames[38] | 0)) {
          if (+$T07().get_RandomFloat() < +this.buryEmergeChance) {
            this.position.X = +(((($T07().jamie.get_Collider().get_Center().X | 0) - (((this.colliderSize.X | 0) / 2) | 0)) | 0) - (this.colliderOffset.X | 0));
            this.position.Y = +(((((this.bossArena).get_Bottom() | 0) - (this.colliderSize.Y | 0)) | 0) - (this.colliderOffset.Y | 0));
            this.state[4] = 7;
            this.activity = $T18().Emerge;
          } else {
            this.state[4] = 2;
            this.buryEmergeChance = +this.buryEmergeChance * 2;
          }
        }
        break;

      case 7: 
        if (!(((this.currentAnimation | 0) !== 0) && ((this.currentAnimation | 0) !== 1))) {
          this.state[4] = 8;
        }
        break;

      default: 
        this.Wander(1);
        this.activity = $T18().Idle;
        this.state[4] = 0;
        this.cooldown[4] = +this.buryCooldownTime;
        break;

    }
  }; 

  function LizardGuy_CalculateMovement () {
    this.trueCollider.X = ((($S07().CallStatic($T19(), "op_Explicit", null, $S08().CallStatic($T10(), "Round", null, $S09().CallStatic($T19(), "op_Explicit", null, this.position.X))) | 0) + (this.colliderOffset.X | 0)) | 0);
    this.trueCollider.Y = ((($S07().CallStatic($T19(), "op_Explicit", null, $S08().CallStatic($T10(), "Round", null, $S09().CallStatic($T19(), "op_Explicit", null, this.position.Y))) | 0) + (this.colliderOffset.Y | 0)) | 0);
    if ($T0C().op_Inequality(this.collider, $T0C().get_Empty())) {
      this.collider = this.trueCollider.MemberwiseClone();
    }
  }; 

  function LizardGuy_Collision (colliderList) {
    var $temp00;
    this.amountToMove = this.negAmountToMove = $T01().get_Zero().MemberwiseClone();
    this.testCollider.Width = (this.colliderSize.X | 0);
    this.testCollider.Height = (this.colliderSize.Y | 0);

    for (var a$0 = colliderList._items, i$0 = 0, l$0 = (colliderList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      if (!(!$T0C().op_Inequality(
            $IM00().Call(s, null), 
            $T0C().get_Empty()
          ) || 
          !$T0C().op_Inequality($IM00().Call(s, null), this.trueCollider) || (+$S0A().CallStatic($T07(), "DistanceSquared", null, this.trueCollider.MemberwiseClone(), $IM00().Call(s, null).MemberwiseClone()) > 0))) {
        this.collidedContains = (this.collided).Contains(s);
        if ($T07().IsTouching(this.trueCollider, $IM00().Call(s, null), $T1C().Bottom)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T1C().Bottom);
            (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) + 1) | 0));
            if (!((+this.negAmountToMove.Y <= +((($IM00().Call(s, null)).get_Top() | 0) - ((this.trueCollider).get_Bottom() | 0))) || ((+this.velocity.Y * +$T07().get_DeltaTime()) < +(-+((($IM00().Call(s, null)).get_Top() | 0) - ((this.trueCollider).get_Bottom() | 0)))))) {
              this.negAmountToMove.Y = +((($IM00().Call(s, null)).get_Top() | 0) - ((this.trueCollider).get_Bottom() | 0));
            }
          } else if (+this.negAmountToMove.Y > +((($IM00().Call(s, null)).get_Top() | 0) - ((this.trueCollider).get_Bottom() | 0))) {
            this.negAmountToMove.Y = +((($IM00().Call(s, null)).get_Top() | 0) - ((this.trueCollider).get_Bottom() | 0));
          }
        }
        if ($T07().IsTouching(this.trueCollider, $IM00().Call(s, null), $T1C().Right)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T1C().Right);
            (this.walled).set_Right(((((this.walled).get_Right() | 0) + 1) | 0));
            if (!((+this.negAmountToMove.X <= +((($IM00().Call(s, null)).get_Left() | 0) - ((this.trueCollider).get_Right() | 0))) || ((+this.velocity.X * +$T07().get_DeltaTime()) < +(-+((($IM00().Call(s, null)).get_Left() | 0) - ((this.trueCollider).get_Right() | 0)))))) {
              this.negAmountToMove.X = +((($IM00().Call(s, null)).get_Left() | 0) - ((this.trueCollider).get_Right() | 0));
            }
          } else if (+this.negAmountToMove.X > +((($IM00().Call(s, null)).get_Left() | 0) - ((this.trueCollider).get_Right() | 0))) {
            this.negAmountToMove.X = +((($IM00().Call(s, null)).get_Left() | 0) - ((this.trueCollider).get_Right() | 0));
          }
        }
        if ($T07().IsTouching(this.trueCollider, $IM00().Call(s, null), $T1C().Left)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T1C().Left);
            (this.walled).set_Left(((((this.walled).get_Left() | 0) + 1) | 0));
            if (!((+this.amountToMove.X >= +((($IM00().Call(s, null)).get_Right() | 0) - ((this.trueCollider).get_Left() | 0))) || ((+this.velocity.X * +$T07().get_DeltaTime()) > +(-+((($IM00().Call(s, null)).get_Right() | 0) - ((this.trueCollider).get_Left() | 0)))))) {
              this.amountToMove.X = +((($IM00().Call(s, null)).get_Right() | 0) - ((this.trueCollider).get_Left() | 0));
            }
          } else if (+this.amountToMove.X < +((($IM00().Call(s, null)).get_Right() | 0) - ((this.trueCollider).get_Left() | 0))) {
            this.amountToMove.X = +((($IM00().Call(s, null)).get_Right() | 0) - ((this.trueCollider).get_Left() | 0));
          }
        }
        if ($T07().IsTouching(this.trueCollider, $IM00().Call(s, null), $T1C().Top)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T1C().Top);
            (this.walled).set_Top(((((this.walled).get_Top() | 0) + 1) | 0));
            if (!((+this.amountToMove.Y >= +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.trueCollider).get_Top() | 0))) || ((+this.velocity.Y * +$T07().get_DeltaTime()) > +(-+((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.trueCollider).get_Top() | 0)))))) {
              this.amountToMove.Y = +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.trueCollider).get_Top() | 0));
            }
          } else if (+this.amountToMove.Y < +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.trueCollider).get_Top() | 0))) {
            this.amountToMove.Y = +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.trueCollider).get_Top() | 0));
          }
        }
      }
    }
    if (!((((this.walled).get_Left() | 0) !== 1) || ((this.input.X | 0) >= 0))) {
      var climbamount = ((((this.trueCollider).get_Bottom() | 0) - (($IM00().Call((this.collided.leftCollided).get_Item(0), null)).get_Top() | 0)) | 0);
      if (climbamount <= (this.climbablePixels | 0)) {
        this.position.Y = +this.position.Y - +climbamount;
        this.amountToMove = this.negAmountToMove = $T01().get_Zero().MemberwiseClone();
        $T07().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), [this, " on ramp, moved ", $T04().$Box(climbamount), " pixels. Timer:", $T11().$Box($T07().get_Timer())])));
      }
    }
    if (!((((this.walled).get_Right() | 0) !== 1) || ((this.input.X | 0) <= 0))) {
      climbamount = ((((this.trueCollider).get_Bottom() | 0) - (($IM00().Call((this.collided.rightCollided).get_Item(0), null)).get_Top() | 0)) | 0);
      if (climbamount <= (this.climbablePixels | 0)) {
        this.position.Y = +this.position.Y - +climbamount;
        this.amountToMove = this.negAmountToMove = $T01().get_Zero().MemberwiseClone();
        $T07().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), [this, " on ramp, moved ", $T04().$Box(climbamount), " pixels. Timer:", $T11().$Box($T07().get_Timer())])));
      }
    }
    if (+this.amountToMove.X === 0) {
      this.amountToMove.X = +this.negAmountToMove.X;
    } else if (!((+this.negAmountToMove.X === 0) || (-this.negAmountToMove.X >= +this.amountToMove.X))) {
      this.amountToMove.X = +this.negAmountToMove.X;
    }
    if (+this.amountToMove.Y === 0) {
      this.amountToMove.Y = +this.negAmountToMove.Y;
    } else if (!((+this.negAmountToMove.Y === 0) || (-this.negAmountToMove.Y >= +this.amountToMove.Y))) {
      this.amountToMove.Y = +this.negAmountToMove.Y;
    }
    var Y = false;
    var X = false;
    if (!(((Math.abs(this.amountToMove.Y)) > (Math.abs(this.amountToMove.X))) || (+this.amountToMove.Y === 0))) {
      this.testPos.Y = +(((Math.round(this.position.Y)) | 0));
      this.testPos.X = +this.position.X;
      this.testPos.Y = +this.testPos.Y + +this.amountToMove.Y;
      Y = true;
    } else if (+this.amountToMove.X !== 0) {
      this.testPos.X = +(((Math.round(this.position.X)) | 0));
      this.testPos.Y = +this.position.Y;
      this.testPos.X = +this.testPos.X + +this.amountToMove.X;
      X = true;
    }
    this.testCollider.X = ((((this.testPos.X) | 0) + (this.colliderOffset.X | 0)) | 0);
    this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.colliderOffset.Y | 0)) | 0);
    var pass = !(this.collided).Intersects(this.testCollider);
    if (pass) {
      if (Y) {
        this.amountToMove.X = 0;
      } else if (X) {
        this.amountToMove.Y = 0;
      }
    } else if (Y) {
      this.testPos.X = +(((Math.round(this.position.X)) | 0));
      this.testPos.Y = +this.position.Y;
      this.testPos.X = +this.testPos.X + +this.amountToMove.X;
      this.testCollider.X = ((((this.testPos.X) | 0) + (this.colliderOffset.X | 0)) | 0);
      this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.colliderOffset.Y | 0)) | 0);
      pass = !(this.collided).Intersects(this.testCollider);
      if (pass) {
        this.amountToMove.Y = 0;
      }
    } else if (X) {
      this.testPos.Y = +(((Math.round(this.position.Y)) | 0));
      this.testPos.X = +this.position.X;
      this.testPos.Y = +this.testPos.Y + +this.amountToMove.Y;
      this.testCollider.X = ((((this.testPos.X) | 0) + (this.colliderOffset.X | 0)) | 0);
      this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.colliderOffset.Y | 0)) | 0);
      pass = !(this.collided).Intersects(this.testCollider);
      if (pass) {
        this.amountToMove.X = 0;
      }
    }
    this.position = $T01().op_Addition(this.position.MemberwiseClone(), this.amountToMove);
    this.CalculateMovement();

    for (var i = 0; i < ((this.collided.bottomCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T07().IsTouching(this.trueCollider, $IM00().Call((this.collided.bottomCollided).get_Item(i), null), $T1C().Bottom)) {
        (this.collided.bottomCollided).RemoveAt(i);
        (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.collided.rightCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T07().IsTouching(this.trueCollider, $IM00().Call((this.collided.rightCollided).get_Item(i), null), $T1C().Right)) {
        (this.collided.rightCollided).RemoveAt(i);
        (this.walled).set_Right(((((this.walled).get_Right() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.collided.leftCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T07().IsTouching(this.trueCollider, $IM00().Call((this.collided.leftCollided).get_Item(i), null), $T1C().Left)) {
        (this.collided.leftCollided).RemoveAt(i);
        (this.walled).set_Left(((((this.walled).get_Left() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.collided.topCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T07().IsTouching(this.trueCollider, $IM00().Call((this.collided.topCollided).get_Item(i), null), $T1C().Top)) {
        (this.collided.topCollided).RemoveAt(i);
        (this.walled).set_Top(((((this.walled).get_Top() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }
    if (!(!((((this.walled).get_Top() | 0) > 0) && 
          (+this.velocity.Y < 0)) && ((((this.walled).get_Bottom() | 0) <= 0) || 
          (+this.velocity.Y <= 0)))) {
      this.velocity.Y = 0;
      this.position.Y = +(((Math.round(this.position.Y)) | 0));
    }
    if (!(!((((this.walled).get_Left() | 0) > 0) && 
          (+this.velocity.X < 0)) && ((((this.walled).get_Right() | 0) <= 0) || 
          (+this.velocity.X <= 0)))) {
      this.velocity.X = 0;
      this.position.X = +(((Math.round(this.position.X)) | 0));
    }
    if (!((((this.walled).get_Bottom() | 0) > 0) || (+this.jumpTime > 0))) {
      this.velocity.Y = +this.velocity.Y + ((+$T07().gravity * +this.mass) * +$T07().get_DeltaTime());
    }
  }; 

  function LizardGuy_Draw (sb) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch ($T07().debug) {
            case 1: 
              $label0 = 2 /* goto IL_CB */ ;
              continue $labelgroup0;

            case 2: 
              $label0 = 1 /* goto IL_6D */ ;
              continue $labelgroup0;

            case 3: 
              break;

            case 4: 
              break;

            case 5: 
              break;

            default: 
              break $labelgroup0;

          }
          $S0B().CallStatic($T20(), "Draw", null, sb, this.bossArena.MemberwiseClone(), $T08().Color$Red$value.MemberwiseClone(), true);
          if ($T0C().op_Inequality(this.attackCollider, $T0C().get_Empty())) {
            $S0B().CallStatic($T20(), "Draw", null, sb, this.attackCollider.MemberwiseClone(), $T08().Color$Red$value.MemberwiseClone(), true);
          }

          $label0 = 1 /* goto IL_6D */ ;
          continue $labelgroup0;
        case 1: /* IL_6D */ 
          (this.animationFrame).Update((this.currentFrame).toString(), true);
          (this.animationFrame).Draw(sb, ($S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Addition(this.position.MemberwiseClone(), ($T03().op_Subtraction(this.colliderOffset, $S0D().Construct(24)).MemberwiseClone()).ToVector2()).MemberwiseClone(), $T07().screenScale).MemberwiseClone()).ToPoint());

          $label0 = 2 /* goto IL_CB */ ;
          continue $labelgroup0;
        case 2: /* IL_CB */ 
          $S0B().CallStatic($T20(), "Draw", null, sb, this.collider.MemberwiseClone(), $T08().Color$Magenta$value.MemberwiseClone(), true);
          break $labelgroup0;

      }
    }
    /* Original label IL_E0 */ 
    if ((this.state[4] | 0) === 5) {
      switch ((this.buryStrikeSide).valueOf()) {
        case 0: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Addition(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(64, 128)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryRumbleFrame, 128), 4992), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            3.14159274, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

        case 1: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Addition(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(-128, 64)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryRumbleFrame, 128), 4992), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            4.712389, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

        case 2: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Subtraction(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(64, 128)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryRumbleFrame, 128), 4992), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

        case 3: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Subtraction(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(-128, 64)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryRumbleFrame, 128), 4992), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            1.57079637, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

      }
    } else if ((this.buryStrikeFrame | 0) <= (this.animationFrames[38] | 0)) {
      this.buryStrikeFrameTimer = +this.buryStrikeFrameTimer + +$T07().get_DeltaTime();
      if (+this.buryStrikeFrameTimer >= +this.animationSpeed[38]) {
        this.buryStrikeFrame = (((this.buryStrikeFrame | 0) + 1) | 0);
        this.buryStrikeFrameTimer = +this.buryStrikeFrameTimer - +this.animationSpeed[38];
      }
      switch ((this.buryStrikeSide).valueOf()) {
        case 0: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Addition(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(64, 128)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryStrikeFrame, 128), 4864), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            3.14159274, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

        case 1: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Addition(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(-128, 64)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryStrikeFrame, 128), 4864), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            4.712389, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

        case 2: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Subtraction(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(64, 128)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryStrikeFrame, 128), 4864), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

        case 3: 
          $S0E().CallVirtual("Draw", null, sb, 
            this.tex, 
            $S0C().CallStatic($T01(), "op_Multiply", null, $T01().op_Subtraction(this.buryStrikeLocation.MemberwiseClone(), $S00().Construct(-128, 64)).MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
            $S0F().Construct($S01().Construct(Math.imul(this.buryStrikeFrame, 128), 4864), $S0D().Construct(128)), 
            $T08().Color$White$value.MemberwiseClone(), 
            1.57079637, 
            $T01().get_Zero().MemberwiseClone(), 
            $T07().screenScale, 
            $T21().None, 
            this.depth
          );
          break;

      }
    }
    $S0E().CallVirtual("Draw", null, sb, 
      this.tex, 
      $S0C().CallStatic($T01(), "op_Multiply", null, this.position.MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
      this.animationSourceRect.MemberwiseClone(), 
      $T08().Color$White$value.MemberwiseClone(), 
      0, 
      $T01().get_Zero().MemberwiseClone(), 
      $T07().screenScale, 
      $T21().None, 
      this.depth
    );
  }; 

  function LizardGuy_Dying () {
    this.activity = $T18().Dying;
    this.previousActivity = this.activity;
    (this.trueCollider.Size = (this.collider.Size = $S01().Construct(60, 32)).MemberwiseClone());
    this.colliderOffset = $S01().Construct(44, 93);
    this.SetAnimation(14, true);
  }; 

  function LizardGuy_Enemy_OnPlayerAttack (AttackCollider, Attack) {
    $T07().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), [this.$name, " response:\nattackCollider:", AttackCollider, " this.collider:", this.trueCollider])));
    if (AttackCollider.Intersects(this.trueCollider)) {
      this.PlayerAttackCollision();
      $T07().WriteLine(JSIL.ConcatString("hit. health remaining:", $T02().$Box(this.health)));
    } else {
      $T07().WriteLine(JSIL.ConcatString("miss. health remaining:", $T02().$Box(this.health)));
    }
    $T07().WriteLine(JSIL.ConcatString(this.$name, " done.\n"));
    return true;
  }; 

  function LizardGuy_Enemy_OnPlayerShockwave (Origin, RangeSquared, Range, Power) {
    $T07().WriteLine(JSIL.ConcatString(this.$name, " Enemy_OnPlayerShockwave triggered"));
    var DistanceSQR = +$S10().CallStatic($T07(), "DistanceSquared", null, this.trueCollider.MemberwiseClone(), Origin.MemberwiseClone());
    if (DistanceSQR <= +RangeSquared) {
      var Distance = Math.fround(Math.sqrt(DistanceSQR));
      if (+Power > 1.5) {
        if ((this.state[1] | 0) >= 7) {
          this.state[1] = 100;
          this.stunned = (+(((+Range - Distance) / +Range)) * +this.shockwaveStunTime) * +Power;
          $T07().WriteLine(JSIL.ConcatString("roll interrupted! stunned for:", $T02().$Box(this.stunned)));
          this.activity = $T18().Dying;
        } else if (this.get_ActivelyAttacking()) {
          if (!(((this.state[2] | 0) <= 0) && ((this.state[3] | 0) <= 0))) {
            if ($S11().CallStatic($T07(), "Directions", null, Origin, (this.collider).get_Center()) === $T09().Left) {
              this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S00().Construct(-this.shockwaveKnockback.X, this.shockwaveKnockback.Y), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
            } else {
              this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, this.shockwaveKnockback.MemberwiseClone(), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
            }
          }
          this.stunned = 1.5;
          $T07().WriteLine(JSIL.ConcatString("attack slowed! stunned for:", $T02().$Box(this.stunned)));
        } else {
          if ($S11().CallStatic($T07(), "Directions", null, Origin, (this.collider).get_Center()) === $T09().Left) {
            this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S00().Construct(-this.shockwaveKnockback.X, this.shockwaveKnockback.Y), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
          } else {
            this.velocity = $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, this.shockwaveKnockback.MemberwiseClone(), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass)));
          }
          this.stunned = (+(((+Range - Distance) / +Range)) * +this.shockwaveStunTime) * +Power;
          this.activity = $T18().Dying;
          $T07().WriteLine(JSIL.ConcatString("attack slowed! stunned for:", $T02().$Box(this.stunned)));
        }
      } else if ((this.state[1] | 0) >= 7) {
        this.state[1] = (((this.state[1] | 0) + 2) | 0);
        if ($S11().CallStatic($T07(), "Directions", null, Origin, (this.collider).get_Center()) === $T09().Left) {
          this.velocity.X = +this.velocity.X + (((-this.shockwaveKnockback.X * (+Range - Distance)) * +Power) * +((1 / +this.mass)));
        } else {
          this.velocity.X = +this.velocity.X + (((+this.shockwaveKnockback.X * (+Range - Distance)) * +Power) * +((1 / +this.mass)));
        }
        $T07().WriteLine(JSIL.ConcatString("roll slowed! stunned for:", $T02().$Box(this.stunned)));
      } else if (this.get_ActivelyAttacking()) {
        if (!(((this.state[2] | 0) <= 0) && ((this.state[3] | 0) <= 0))) {
          if ($S11().CallStatic($T07(), "Directions", null, Origin, (this.collider).get_Center()) === $T09().Left) {
            this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S00().Construct(-this.shockwaveKnockback.X, this.shockwaveKnockback.Y), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
          } else {
            this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, this.shockwaveKnockback.MemberwiseClone(), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
          }
        }
        this.stunned = 0.5;
        $T07().WriteLine(JSIL.ConcatString("attack slowed! stunned for:", $T02().$Box(this.stunned)));
      } else {
        if ($S11().CallStatic($T07(), "Directions", null, Origin, (this.collider).get_Center()) === $T09().Left) {
          this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S00().Construct(-this.shockwaveKnockback.X, this.shockwaveKnockback.Y), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
        } else {
          this.velocity = $T01().op_Addition(this.velocity.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, $S0C().CallStatic($T01(), "op_Multiply", null, this.shockwaveKnockback.MemberwiseClone(), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass))));
        }
        this.stunned = (+(((+Range - Distance) / +Range)) * +this.shockwaveStunTime) * +Power;
        this.activity = $T18().Dying;
        $T07().WriteLine(JSIL.ConcatString("attack slowed! stunned for:", $T02().$Box(this.stunned)));
      }
    }
    $T07().WriteLine(JSIL.ConcatString(this.$name, " done.\n"));
    return true;
  }; 

  function LizardGuy_get_ActiveAttacks () {
    var returnString = $T12().Empty;
    if ((this.state[1] | 0) > 0) {
      returnString = (JSIL.ConcatString(returnString, " roll:", $T04().$Box(this.state[1])));
    }
    if ((this.state[2] | 0) > 0) {
      returnString = (JSIL.ConcatString(returnString, " swipe:", $T04().$Box(this.state[2])));
    }
    if ((this.state[3] | 0) > 0) {
      returnString = (JSIL.ConcatString(returnString, " tailwhip:", $T04().$Box(this.state[3])));
    }
    if ((this.state[4] | 0) > 0) {
      returnString = (JSIL.ConcatString(returnString, " bury:", $T04().$Box(this.state[4])));
    }
    if (+this.cooldown[0] > 0) {
      returnString = (JSIL.ConcatString(returnString, " wander:", $T04().$Box(this.state[0])));
    }
    returnString.TrimStart(JSIL.Array.New($T23(), 0));
    return returnString;
  }; 

  function LizardGuy_get_ActiveEffects () {
    return this.activeEffects;
  }; 

  function LizardGuy_get_ActivelyAttacking () {
    return (((this.state[1] | 0) > 0) || 
      ((this.state[2] | 0) > 0) || 
      ((this.state[3] | 0) > 0) || ((this.state[4] | 0) > 0));
  }; 

  function LizardGuy_get_AIenabled () {
    return this.aiEnabled;
  }; 

  function LizardGuy_get_Collider () {
    return this.collider;
  }; 

  function LizardGuy_get_Health () {
    return this.health;
  }; 

  function LizardGuy_get_Mass () {
    return this.mass;
  }; 

  function LizardGuy_get_MaxHealth () {
    return this.maxHealth;
  }; 

  function LizardGuy_get_Name () {
    return this.$name;
  }; 

  function LizardGuy_get_Position () {
    return this.position;
  }; 

  function LizardGuy_get_ShockwaveMaxEffectDistanceSquared () {
    return this.shockwaveMaxEffectDistanceSquared;
  }; 

  function LizardGuy_get_SpeedModifier () {
    return this.speedModifier;
  }; 

  function LizardGuy_get_StunTime () {
    return this.stunned;
  }; 

  function LizardGuy_get_TrueCollider () {
    return this.trueCollider;
  }; 

  function LizardGuy_get_Velocity () {
    return this.velocity;
  }; 

  function LizardGuy_get_Walled () {
    return this.walled;
  }; 

  function LizardGuy_GetUp () {
    this.activity = $T18().GettingUp;
    this.previousActivity = this.activity;
    this.SetAnimation(26, true);
    this.colliderOffset = $S01().Construct(44, 26);
    (this.trueCollider.Size = (this.collider.Size = $S01().Construct(60, 100)).MemberwiseClone());
  }; 

  function LizardGuy_Hurt (damage) {
    this.health = +this.health - +damage;
    $T07().CameraShake(0.075, 0.05 * +damage);
  }; 

  function LizardGuy_Movement () {
    if (+this.stunned > 0) {
      this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, 0, +this.stunLerp * +$T07().get_DeltaTime());
      this.stunned = +this.stunned - +$T07().get_DeltaTime();
      if (+this.stunned <= 0) {
        this.stunned = 0;
        if (!this.get_ActivelyAttacking()) {
          this.GetUp();
        }
      }
    } else if (this.get_ActivelyAttacking()) {
      if ((this.state[1] | 0) > 0) {
        this.RollAttack();
      }
      if ((this.state[2] | 0) > 0) {
        this.SwipeAttack();
      }
      if ((this.state[3] | 0) > 0) {
        this.TailwhipAttack();
      }
      if ((this.state[4] | 0) > 0) {
        this.BuryAttack();
      }
    } else if (!((+this.cooldown[0] <= 0) || 
        (((this.walled).get_Bottom() | 0) <= 0) || 
        (this.activity === $T18().TurningAround) || (this.activity === $T18().GettingUp))) {
      var playerDirection = $S13().CallStatic($T07(), "Directions", null, this.trueCollider, $T07().jamie.get_Collider());
      if (!((playerDirection === this.direction) || 
          ((playerDirection.valueOf() | 0) === 0) || 
          (this.activity === $T18().WalkLeft) || (this.activity === $T18().WalkRight))) {
        $T07().WriteLine(JSIL.ConcatString(this.$name, " not facing player. turning around..."));
        this.direction = playerDirection;
        this.activity = $T18().TurningAround;
        this.meleeActivitiesInARow = (((this.meleeActivitiesInARow | 0) + 1) | 0);
      } else if (this.activity !== $T18().TurningAround) {
        this.Wander();
        this.cooldown[0] -= +$T07().get_DeltaTime();
        if (+this.velocity.X > 0.1) {
          this.activity = $T18().WalkRight;
        } else if (+this.velocity.X < -0.1) {
          this.activity = $T18().WalkLeft;
        } else {
          this.activity = $T18().Idle;
        }
      }
    }
    if (+this.cooldown[1] > 0) {
      this.cooldown[1] -= +$T07().get_DeltaTime();
    }
    if (+this.cooldown[2] > 0) {
      this.cooldown[2] -= +$T07().get_DeltaTime();
    }
    if (+this.cooldown[3] > 0) {
      this.cooldown[3] -= +$T07().get_DeltaTime();
    }
    if (+this.cooldown[4] > 0) {
      this.cooldown[4] -= +$T07().get_DeltaTime();
    }
    if (!((((this.walled).get_Top() | 0) <= 0) || (+this.velocity.Y >= 0))) {
      this.velocity.Y = 0;
      this.jumpTime = 0;
    }
    this.position = $T01().op_Addition(this.position.MemberwiseClone(), $S0C().CallStatic($T01(), "op_Multiply", null, this.velocity.MemberwiseClone(), $T07().get_DeltaTime()));
  }; 

  function LizardGuy_OnTouch (TouchedCollider, Knockback) {
    var playerDirection = $S13().CallStatic($T07(), "Directions", null, TouchedCollider, $T07().jamie.get_Collider());
    if (playerDirection === $T09().Left) {
      $T07().jamie.velocity = $S00().Construct(-Knockback.X, Knockback.Y);
      $T07().jamie.direction = $T09().Right;
    } else if (playerDirection === $T09().Right) {
      $T07().jamie.velocity = Knockback.MemberwiseClone();
      $T07().jamie.direction = $T09().Left;
    } else {
      $T07().jamie.velocity = $S00().Construct(0, Knockback.Y);
    }
    return true;
  }; 

  function LizardGuy_PlayerAttackCollision () {
    var $temp00;
    this.Hurt($T07().jamie.attackDamage);

    for (var a$0 = $T07().jamie.enchantList._items, i$0 = 0, l$0 = ($T07().jamie.enchantList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var enchant = a$0[i$0];
      enchant.AddEffect(this);
    }
  }; 

  function LizardGuy_RollAttack () {
    switch (this.state[1]) {
      case 1: 
        this.velocity = $S00().Construct(+((+($S14().CallStatic($T07(), "UnidirectionalDistance", null, 
                (this.trueCollider).get_Right(), 
                (this.bossArena).get_Right()
              )) / (+this.rollLeapTime * 2))), this.rollLeapInitialYvelocity);
        $T07().WriteLine(JSIL.ConcatString("leap right velocity:", this.velocity));
        this.position.Y = +this.position.Y - 1;
        this.state[1] = 3;
        $T07().CameraShake(0.1, 3);
        this.direction = $T09().Left;
        return;

      case 2: 
        this.velocity = $S00().Construct(-+((+($S14().CallStatic($T07(), "UnidirectionalDistance", null, 
                (this.trueCollider).get_Left(), 
                (this.bossArena).get_Left()
              )) / (+this.rollLeapTime * 2))), this.rollLeapInitialYvelocity);
        $T07().WriteLine(JSIL.ConcatString("leap left velocity:", this.velocity));
        this.position.Y = +this.position.Y - 1;
        this.state[1] = 4;
        $T07().CameraShake(0.1, 3);
        this.activity = $T18().Roll;
        return;

      case 3: 
        this.activity = $T18().Roll;
        if (((this.walled).get_Bottom() | 0) > 0) {
          this.state[1] = 5;
          this.rollPauseTimer = 0;
          $T07().WriteLine(JSIL.ConcatString(this.$name, " has hit the ground, now pausing before rolling"));
          $T07().CameraShake(1, 1.5);
        }
        return;

      case 4: 
        this.direction = $T09().Right;
        if (((this.walled).get_Bottom() | 0) > 0) {
          this.state[1] = 6;
          this.rollPauseTimer = 0;
          $T07().WriteLine(JSIL.ConcatString(this.$name, " has hit the ground, now pausing before rolling"));
          $T07().CameraShake(1, 1.5);
        }
        return;

      case 5: 
        this.rollPauseTimer = +this.rollPauseTimer + +$T07().get_DeltaTime();
        if (+this.rollPauseTimer >= +this.rollPauseTime) {
          this.state[1] = 7;
          $T07().WriteLine(JSIL.ConcatString(this.$name, " done pausing, now rolling left"));
        }
        return;

      case 6: 
        this.rollPauseTimer = +this.rollPauseTimer + +$T07().get_DeltaTime();
        if (+this.rollPauseTimer >= +this.rollPauseTime) {
          this.state[1] = 8;
          $T07().WriteLine(JSIL.ConcatString(this.$name, " done pausing, now rolling right"));
        }
        return;

      case 7: 
        if (((this.walled).get_Left() | 0) <= 0) {
          this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, -this.rollSpeed, +this.rollLerp * +$T07().get_DeltaTime());
          return;
        }
        break;

      case 8: 
        if (((this.walled).get_Right() | 0) <= 0) {
          this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, this.rollSpeed, +this.rollLerp * +$T07().get_DeltaTime());
          return;
        }
        break;

      case 9: 
        if (((this.walled).get_Left() | 0) <= 0) {
          this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, -this.rollSpeed, +this.rollLerp * +$T07().get_DeltaTime());
          return;
        }
        break;

      case 10: 
        if (((this.walled).get_Right() | 0) <= 0) {
          this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, this.rollSpeed, +this.rollLerp * +$T07().get_DeltaTime());
          return;
        }
        break;

      case 11: 
        break;

      default: 
        if (+this.stunned <= 0) {
          $T07().WriteLine(JSIL.ConcatString(this.$name, " recovered"));
          this.cooldown[1] = +this.rollCooldownTime;
          this.Wander(2);
          this.state[1] = 0;
          this.GetUp();
        }
        return;

    }
    $T07().WriteLine(JSIL.ConcatString(this.$name, " hit wall, stunned"));
    $T07().CameraShake(0.15, 15);
    this.Stun(this.rollStunTime);
    this.activity = $T18().Dying;
    this.state[1] = 100;
  }; 

  function LizardGuy_set_AIenabled (value) {
    this.aiEnabled = value;
  }; 

  function LizardGuy_set_Collider (value) {
    this.collider = value.MemberwiseClone();
  }; 

  function LizardGuy_set_Health (value) {
    this.health = +value;
  }; 

  function LizardGuy_set_MaxHealth (value) {
    this.maxHealth = +value;
  }; 

  function LizardGuy_set_Position (value) {
    this.position = value.MemberwiseClone();
  }; 

  function LizardGuy_set_SpeedModifier (value) {
    this.speedModifier = +value;
  }; 

  function LizardGuy_set_Velocity (value) {
    this.velocity = value.MemberwiseClone();
  }; 

  function LizardGuy_SetAnimation$00 () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch ((this.activity).valueOf()) {
            case 0: 
              this.SetAnimation(0, false);
              break $labelgroup0;

            case 1: 
              this.SetAnimation(2, false);
              break $labelgroup0;

            case 2: 
              this.SetAnimation(4, false);
              break $labelgroup0;

            case 3: 
              this.SetAnimation(12, true);
              break $labelgroup0;

            case 5: 
              this.SetAnimation(28, true);
              break $labelgroup0;

            case 6: 
              this.SetAnimation(30, true);
              break $labelgroup0;

            case 7: 
              this.SetAnimation(18, false);
              break $labelgroup0;

            case 8: 
              this.SetAnimation(22, false);
              break $labelgroup0;

            case 9: 
              this.SetAnimation(20, true);
              break $labelgroup0;

            case 10: 
              this.SetAnimation(24, true);
              break $labelgroup0;

            case 11: 
              this.SetAnimation(16, true);
              break $labelgroup0;

            case 12: 
              this.Dying();
              break $labelgroup0;

            case 13: 
              this.GetUp();
              break $labelgroup0;

          }
          this.SetAnimation(0, false);
          break $labelgroup0;

      }
    }
    /* Original label IL_EF */ 
    if ((this.nextAnimation | 0) >= 0) {
      this.SetAnimation(this.nextAnimation, false);
    }
    $T07().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), [this.$name, " animation set. animation:", $T04().$Box(this.currentAnimation), " direction:", this.direction])));
  }; 

  function LizardGuy_SetAnimation$01 (animation, noLoop) {
    this.currentAnimation = (animation | 0);
    this.currentFrame = 0;
    this.timeSinceLastFrame = 0;
    this.nextAnimation = -1;
    this.animationNoLoop = noLoop;
    if (this.direction === $T09().Right) {
      this.currentAnimation = (((this.currentAnimation | 0) + 1) | 0);
    }
  }; 

  function LizardGuy_Stun (duration) {
    this.stunned = +this.stunned + +duration;
  }; 

  function LizardGuy_SwipeAttack () {
    switch (this.state[2]) {
      case 1: 
        this.swipeChargeTimer = +this.swipeChargeTimer + +$T07().get_DeltaTime();
        if (+this.swipeChargeTimer >= +this.swipeChargeTime) {
          this.state[2] = 3;
        }
        break;

      case 2: 
        this.swipeChargeTimer = +this.swipeChargeTimer + +$T07().get_DeltaTime();
        if (+this.swipeChargeTimer >= +this.swipeChargeTime) {
          this.state[2] = 4;
        }
        break;

      case 3: 
        $T07().WriteLine("swipe left");
        this.swipeChargeTimer = 0;
        this.activity = $T18().SwipeSwing;
        if ($T07().jamie.get_Collider().Intersects($S04().Construct(((((this.collider).get_Center().X | 0) - (this.attackColliderWidth | 0)) | 0), ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0), this.attackColliderWidth, this.attackColliderHeight))) {
          $T07().jamie.velocity = $S00().Construct(-this.swipeKnockback.X, this.swipeKnockback.Y);
          $T07().jamie.Hurt(this.swipeDamage);
          $T07().CameraShake(0.1, 5);
          this.swipeHit = true;
          $T07().WriteLine(JSIL.ConcatString("pausing for ", $T02().$Box(this.swipePauseTime), " seconds"));
        } else {
          this.swipeHit = false;
        }
        this.state[2] = 5;
        break;

      case 4: 
        $T07().WriteLine("swipe right");
        this.swipeChargeTimer = 0;
        this.activity = $T18().SwipeSwing;
        if ($T07().jamie.get_Collider().Intersects($S04().Construct((this.collider).get_Center().X, ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0), this.attackColliderWidth, this.attackColliderHeight))) {
          $T07().jamie.velocity = this.swipeKnockback.MemberwiseClone();
          $T07().jamie.Hurt(this.swipeDamage);
          $T07().CameraShake(0.1, 5);
          this.swipeHit = true;
          $T07().WriteLine(JSIL.ConcatString("pausing for ", $T02().$Box(this.swipePauseTime), " seconds"));
        } else {
          this.swipeHit = false;
        }
        this.state[2] = 6;
        break;

      case 5: 
        if (!(((this.currentAnimation | 0) !== 0) && ((this.currentAnimation | 0) !== 1))) {
          if (this.swipeHit) {
            this.state[2] = 7;
            this.activity = $T18().Swipe;
          } else {
            this.state[2] = 0;
            this.activity = $T18().Idle;
          }
          this.SetAnimation();
        }
        break;

      case 6: 
        if (!(((this.currentAnimation | 0) !== 0) && ((this.currentAnimation | 0) !== 1))) {
          if (this.swipeHit) {
            this.state[2] = 7;
            this.activity = $T18().Swipe;
          } else {
            this.state[2] = 0;
            this.activity = $T18().Idle;
          }
          this.SetAnimation();
        }
        break;

      case 7: 
        this.swipePauseTimer = +this.swipePauseTimer + +$T07().get_DeltaTime();
        if (+this.swipePauseTimer >= +this.swipePauseTime) {
          this.state[2] = 9;
          this.swipePauseTimer = 0;
        }
        break;

      case 8: 
        this.swipePauseTimer = +this.swipePauseTimer + +$T07().get_DeltaTime();
        if (+this.swipePauseTimer >= +this.swipePauseTime) {
          this.state[2] = 10;
          this.swipePauseTimer = 0;
        }
        break;

      case 9: 
        $T07().WriteLine("swipe left again");
        this.activity = $T18().SwipeSwing;
        if ($T07().jamie.get_Collider().Intersects($S04().Construct(((((this.collider).get_Center().X | 0) - (this.attackColliderWidth | 0)) | 0), ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0), this.attackColliderWidth, this.attackColliderHeight))) {
          $T07().jamie.velocity = $S00().Construct(-this.swipeKnockback.X, this.swipeKnockback.Y);
          $T07().jamie.Hurt(this.swipeDamage);
          $T07().CameraShake(0.1, 5);
        }
        this.state[2] = 11;
        break;

      case 10: 
        $T07().WriteLine("swipe right again");
        this.activity = $T18().SwipeSwing;
        if ($T07().jamie.get_Collider().Intersects($S04().Construct((this.collider).get_Center().X, ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0), this.attackColliderWidth, this.attackColliderHeight))) {
          $T07().jamie.velocity = this.swipeKnockback.MemberwiseClone();
          $T07().jamie.Hurt(this.swipeDamage);
          $T07().CameraShake(0.1, 5);
        }
        this.state[2] = 11;
        break;

      case 11: 
        if (!(((this.currentAnimation | 0) !== 0) && ((this.currentAnimation | 0) !== 1))) {
          this.state[2] = 12;
          this.activity = $T18().Idle;
          this.SetAnimation();
        }
        break;

      case 12: 
        this.cooldown[2] = +this.swipeCooldownTime;
        this.Wander(1);
        this.state[2] = 0;
        break;

    }
  }; 

  function LizardGuy_TailwhipAttack () {
    switch (this.state[3]) {
      case 1: 
        this.tailwhipChargeTimer = +this.tailwhipChargeTimer + +$T07().get_DeltaTime();
        if (+this.tailwhipChargeTimer >= +this.tailwhipChargeTime) {
          this.activity = $T18().TailwhipSwing;
          this.state[3] = 3;
        }
        break;

      case 2: 
        this.tailwhipChargeTimer = +this.tailwhipChargeTimer + +$T07().get_DeltaTime();
        if (+this.tailwhipChargeTimer >= +this.tailwhipChargeTime) {
          this.activity = $T18().TailwhipSwing;
          this.state[3] = 4;
        }
        break;

      case 3: 
        $T07().WriteLine("tailwhip left");
        this.tailwhipChargeTimer = 0;
        if ($T07().jamie.get_Collider().Intersects($S04().Construct(((((this.collider).get_Center().X | 0) - (this.attackColliderWidth | 0)) | 0), ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0), this.attackColliderWidth, this.attackColliderHeight))) {
          $T07().jamie.velocity = $S00().Construct(-this.tailwhipKnockback.X, this.tailwhipKnockback.Y);
          $T07().jamie.Hurt(this.tailwhipDamage);
          $T07().CameraShake(0.1, 10);
        }
        this.state[3] = 5;
        break;

      case 4: 
        $T07().WriteLine("tailwhip right");
        this.tailwhipChargeTimer = 0;
        if ($T07().jamie.get_Collider().Intersects($S04().Construct((this.collider).get_Center().X, ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0), this.attackColliderWidth, this.attackColliderHeight))) {
          $T07().jamie.velocity = this.tailwhipKnockback.MemberwiseClone();
          $T07().jamie.Hurt(this.tailwhipDamage);
          $T07().CameraShake(0.1, 10);
        }
        this.state[3] = 5;
        break;

      case 5: 
        if (!(((this.currentAnimation | 0) !== 0) && ((this.currentAnimation | 0) !== 1))) {
          this.state[3] = 6;
          this.activity = $T18().Idle;
          this.SetAnimation();
        }
        break;

      case 6: 
        this.cooldown[2] = +this.tailwhipCooldownTime;
        this.Wander(1);
        this.state[3] = 0;
        break;

    }
  }; 

  function LizardGuy_ThreadPoolCallback (threadContext) {
    try {
      this.Update();
      if (!((+this.health > 0) && (+this.position.Y <= 5000))) {
        $T07().KillEnemy(this);
      }
    } finally {
      if (($S15().CallStatic($T24(), "Decrement", null, /* ref */ new JSIL.MemberReference($T07(), "pendingThreads")) | 0) <= 0) {
        $T07().doneEvent.Set();
      }
    }
  }; 

  function LizardGuy_toString () {
    return this.$name;
  }; 

  function LizardGuy_TriggerBuryAttack () {
    $T07().WriteLine(JSIL.ConcatString(this.$name, " bury"));
    this.collided = new ($T05())();
    this.walled = $T1D().get_Zero().MemberwiseClone();
    this.buryEmergeChance = +this.buryInitialEmergeChance;
    this.state[4] = 1;
    this.activity = $T18().Bury;
  }; 

  function LizardGuy_Update () {
    this.prevInput = this.input.MemberwiseClone();
    this.input = $T03().get_Zero().MemberwiseClone();
    this.frameInput = false;
    if ($T07().jamie !== null) {
      if (!(!this.aiEnabled || 
          this.get_ActivelyAttacking() || 
          (+this.cooldown[0] > 0) || 
          (+this.stunned > 0) || (((this.walled).get_Bottom() | 0) <= 0))) {
        var playerDirection = $S13().CallStatic($T07(), "Directions", null, this.trueCollider, $T07().jamie.get_Collider());
        if ((this.meleeActivitiesInARow | 0) >= (this.meleeActivityLimit | 0)) {
          $T07().WriteLine(JSIL.ConcatString(this.$name, " melee activity limit reached."));
          if ($T07().get_RandomBool()) {
            this.TriggerBuryAttack();
          } else if ($S13().CallStatic($T07(), "Directions", null, this.bossArena, this.trueCollider) === $T09().Right) {
            this.state[1] = 2;
          } else {
            this.state[1] = 1;
          }
          this.meleeActivitiesInARow = 0;
        } else if (!((playerDirection === this.direction) || (playerDirection === $T09().Forward))) {
          $T07().WriteLine(JSIL.ConcatString(this.$name, " not facing player. turning around..."));
          this.direction = playerDirection;
          this.activity = $T18().TurningAround;
          this.meleeActivitiesInARow = (((this.meleeActivitiesInARow | 0) + 1) | 0);
        } else if (!((($T07().jamie.get_Collider().get_Center().X | 0) >= ((this.bossArena).get_Center().X | 0)) || 
            (((this.trueCollider).get_Center().X | 0) >= ((this.bossArena).get_Center().X | 0)) || 
            (+$T07().jamie.stunTime > 0.5) || (+this.cooldown[1] > 0))) {
          $T07().WriteLine(JSIL.ConcatString(this.$name, " roll attack: roll left"));
          this.state[1] = 1;
          this.meleeActivitiesInARow = 0;
        } else if (!((($T07().jamie.get_Collider().get_Center().X | 0) <= ((this.bossArena).get_Center().X | 0)) || 
            (((this.trueCollider).get_Center().X | 0) <= ((this.bossArena).get_Center().X | 0)) || 
            (+$T07().jamie.stunTime > 0.5) || (+this.cooldown[1] > 0))) {
          $T07().WriteLine(JSIL.ConcatString(this.$name, " roll attack: roll right"));
          this.state[1] = 2;
          this.meleeActivitiesInARow = 0;
        } else if (!((+this.cooldown[4] > 0) || (($T07().XDistance(this.trueCollider.MemberwiseClone(), $T07().jamie.get_Collider().MemberwiseClone()) | 0) <= (this.swipeRange | 0)))) {
          this.TriggerBuryAttack();
          this.meleeActivitiesInARow = 0;
        } else if (!((+this.cooldown[2] > 0) || (($T07().XDistance(this.trueCollider.MemberwiseClone(), $T07().jamie.get_Collider().MemberwiseClone()) | 0) > (this.swipeRange | 0)))) {
          this.meleeActivitiesInARow = (((this.meleeActivitiesInARow | 0) + 1) | 0);
          if (this.direction === playerDirection) {
            if (($T07().RandomInt(3) | 0) > 0) {
              $T07().WriteLine(JSIL.ConcatString(this.$name, " swipe"));
              if (this.direction === $T09().Left) {
                this.state[2] = 1;
              } else {
                this.state[2] = 2;
              }
              this.activity = $T18().Swipe;
            } else {
              $T07().WriteLine(JSIL.ConcatString(this.$name, " tailwhip"));
              if (this.direction === $T09().Left) {
                this.state[3] = 1;
              } else {
                this.state[3] = 2;
              }
              this.activity = $T18().Tailwhip;
            }
          } else {
            $T07().WriteLine(JSIL.ConcatString(this.$name, " swipe/tailwhip failed, facing wrong direction. turning around... (ERROR)"));
            this.cooldown[2] = 0.5;
            if (this.direction === $T09().Left) {
              this.direction = $T09().Right;
            } else {
              this.direction = $T09().Left;
            }
            this.Stun(0.5);
            this.activity = $T18().TurningAround;
          }
        } else {
          this.Wander(+(($T07().RandomInt(3) | 0) + 1));
        }
      }
    }
    if ($T07().IsTouching(this.trueCollider, $T07().jamie.get_Collider())) {
      if (+this.stunned <= 0) {
        this.collider = $T0C().get_Empty().MemberwiseClone();
        if (!(((this.state[1] | 0) < 9) || !$T07().jamie.HurtOnTouch(+((+this.rollDamage / 2))))) {
          this.OnTouch(this.trueCollider, this.rollKnockback.MemberwiseClone());
        } else if (!(((this.state[1] | 0) <= 0) || !$T07().jamie.HurtOnTouch(this.rollDamage))) {
          this.OnTouch(this.trueCollider, this.rollKnockback.MemberwiseClone());
        } else if ($T07().jamie.HurtOnTouch(10)) {
          this.OnTouch(this.trueCollider, this.swipeKnockback.MemberwiseClone());
        }
      } else if (!(!$T07().jamie.collided.get_Horizontal() && !$T07().jamie.collided.get_Vertical())) {
        this.collider = $T0C().get_Empty().MemberwiseClone();
        this.OnTouch(this.trueCollider, this.swipeKnockback.MemberwiseClone());
      }
    } else if (!(!$T0C().op_Equality(this.collider, $T0C().get_Empty()) || (+$T07().jamie.invulnerableOnTouch > 0))) {
      this.collider = this.trueCollider.MemberwiseClone();
    }
    this.Movement();
    this.CalculateMovement();
    this.Animate();
    if ((this.state[4] | 0) <= 0) {
      this.Collision($T07().collisionObjects);
    }
    return true;
  }; 

  function LizardGuy_UpgradeEffect (index, duration) {
    if (((this.activeEffects).get_Count() | 0) > (index | 0)) {
      (this.activeEffects).get_Item(index).strength = ((((this.activeEffects).get_Item(index).strength | 0) + 1) | 0);
      (this.activeEffects).get_Item(index).effectDuration = +duration;
    }
  }; 

  function LizardGuy_Wander$02 () {
    if (+this.cooldown[0] > +((+this.initialWanderTime / 1.5))) {
      this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, this.speed, +this.wanderLerp * +$T07().get_DeltaTime());
    } else {
      this.velocity.X = +$S12().CallStatic($T07(), "Lerp", null, this.velocity.X, 0, +this.wanderLerp * +$T07().get_DeltaTime());
    }
  }; 

  function LizardGuy_Wander$03 (WanderTime) {
    if (((this.walled).get_Left() | 0) > 0) {
      this.speed = +this.wanderSpeed;
    } else if (((this.walled).get_Right() | 0) > 0) {
      this.speed = -this.wanderSpeed;
    } else if ($T07().get_RandomBool()) {
      this.speed = +this.wanderSpeed;
    } else {
      this.speed = -this.wanderSpeed;
    }
    this.cooldown[0] = +WanderTime;
    this.initialWanderTime = +WanderTime;
    return true;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "LizardGuy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $.Single, 
          $.Single, $asm02.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
          $.Single
        ]), 
      LizardGuy__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "AddEffect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Enchant")), 
      LizardGuy_AddEffect
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Void, 
      LizardGuy_Animate
    );

    $.Method({Static:false, Public:true }, "BuryAttack", 
      JSIL.MethodSignature.Void, 
      LizardGuy_BuryAttack
    );

    $.Method({Static:false, Public:true }, "CalculateMovement", 
      JSIL.MethodSignature.Void, 
      LizardGuy_CalculateMovement
    );

    $.Method({Static:false, Public:true }, "Collision", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")])), 
      LizardGuy_Collision
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      LizardGuy_Draw
    );

    $.Method({Static:false, Public:true }, "Dying", 
      JSIL.MethodSignature.Void, 
      LizardGuy_Dying
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Enemy_OnPlayerAttack", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Attacking")]), 
      LizardGuy_Enemy_OnPlayerAttack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Enemy_OnPlayerShockwave", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Int32, 
          $.Int32, $.Single
        ]), 
      LizardGuy_Enemy_OnPlayerShockwave
    );

    $.Method({Static:false, Public:true }, "get_ActiveAttacks", 
      JSIL.MethodSignature.Return($.String), 
      LizardGuy_get_ActiveAttacks
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ActiveEffects", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")])), 
      LizardGuy_get_ActiveEffects
    );

    $.Method({Static:false, Public:true }, "get_ActivelyAttacking", 
      JSIL.MethodSignature.Return($.Boolean), 
      LizardGuy_get_ActivelyAttacking
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AIenabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      LizardGuy_get_AIenabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Collider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      LizardGuy_get_Collider
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Health", 
      JSIL.MethodSignature.Return($.Single), 
      LizardGuy_get_Health
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Mass", 
      JSIL.MethodSignature.Return($.Single), 
      LizardGuy_get_Mass
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_MaxHealth", 
      JSIL.MethodSignature.Return($.Single), 
      LizardGuy_get_MaxHealth
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      LizardGuy_get_Name
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      LizardGuy_get_Position
    );

    $.Method({Static:false, Public:true }, "get_ShockwaveMaxEffectDistanceSquared", 
      JSIL.MethodSignature.Return($.Single), 
      LizardGuy_get_ShockwaveMaxEffectDistanceSquared
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_SpeedModifier", 
      JSIL.MethodSignature.Return($.Single), 
      LizardGuy_get_SpeedModifier
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_StunTime", 
      JSIL.MethodSignature.Return($.Single), 
      LizardGuy_get_StunTime
    );

    $.Method({Static:false, Public:true }, "get_TrueCollider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      LizardGuy_get_TrueCollider
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      LizardGuy_get_Velocity
    );

    $.Method({Static:false, Public:true }, "get_Walled", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Wall")), 
      LizardGuy_get_Walled
    );

    $.Method({Static:false, Public:true }, "GetUp", 
      JSIL.MethodSignature.Void, 
      LizardGuy_GetUp
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Hurt", 
      JSIL.MethodSignature.Action($.Single), 
      LizardGuy_Hurt
    );

    $.Method({Static:false, Public:true }, "Movement", 
      JSIL.MethodSignature.Void, 
      LizardGuy_Movement
    );

    $.Method({Static:false, Public:true }, "OnTouch", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      LizardGuy_OnTouch
    );

    $.Method({Static:false, Public:true }, "PlayerAttackCollision", 
      JSIL.MethodSignature.Void, 
      LizardGuy_PlayerAttackCollision
    );

    $.Method({Static:false, Public:true }, "RollAttack", 
      JSIL.MethodSignature.Void, 
      LizardGuy_RollAttack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_AIenabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      LizardGuy_set_AIenabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Collider", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      LizardGuy_set_Collider
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Health", 
      JSIL.MethodSignature.Action($.Single), 
      LizardGuy_set_Health
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_MaxHealth", 
      JSIL.MethodSignature.Action($.Single), 
      LizardGuy_set_MaxHealth
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      LizardGuy_set_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_SpeedModifier", 
      JSIL.MethodSignature.Action($.Single), 
      LizardGuy_set_SpeedModifier
    );

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      LizardGuy_set_Velocity
    );

    $.Method({Static:false, Public:true }, "SetAnimation", 
      JSIL.MethodSignature.Void, 
      LizardGuy_SetAnimation$00
    );

    $.Method({Static:false, Public:true }, "SetAnimation", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      LizardGuy_SetAnimation$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Stun", 
      JSIL.MethodSignature.Action($.Single), 
      LizardGuy_Stun
    );

    $.Method({Static:false, Public:true }, "SwipeAttack", 
      JSIL.MethodSignature.Void, 
      LizardGuy_SwipeAttack
    );

    $.Method({Static:false, Public:true }, "TailwhipAttack", 
      JSIL.MethodSignature.Void, 
      LizardGuy_TailwhipAttack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ThreadPoolCallback", 
      JSIL.MethodSignature.Action($.Object), 
      LizardGuy_ThreadPoolCallback
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LizardGuy_toString
    );

    $.Method({Static:false, Public:true }, "TriggerBuryAttack", 
      JSIL.MethodSignature.Void, 
      LizardGuy_TriggerBuryAttack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      LizardGuy_Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UpgradeEffect", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      LizardGuy_UpgradeEffect
    );

    $.Method({Static:false, Public:true }, "Wander", 
      JSIL.MethodSignature.Void, 
      LizardGuy_Wander$02
    );

    $.Method({Static:false, Public:true }, "Wander", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      LizardGuy_Wander$03
    );

    $.Field({Static:false, Public:false}, "collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "trueCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "walled", $asm00.TypeRef("Wall"));

    $.Field({Static:false, Public:false}, "health", $.Single);

    $.Field({Static:false, Public:false}, "maxHealth", $.Single);

    $.Field({Static:false, Public:false}, "speedModifier", $.Single);

    $.Field({Static:false, Public:false}, "activeEffects", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")]));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:true }, "aiEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "mass", $.Single);

    $.Field({Static:false, Public:false}, "shockwaveMaxEffectDistanceSquared", $.Single);

    $.Field({Static:false, Public:false}, "collidedContains", $.Boolean);

    $.Field({Static:false, Public:true }, "speed", $.Single);

    $.Field({Static:false, Public:true }, "defaultSpeed", $.Single);

    $.Field({Static:false, Public:false}, "climbablePixels", $.Int32);

    $.Field({Static:false, Public:true }, "previousActivity", $asm00.TypeRef("LizardGuy+LizardActivity"));

    $.Field({Static:false, Public:true }, "prevInput", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "nextAnimation", $.Int32);

    $.Field({Static:false, Public:true }, "interruptAttack", $.Boolean);

    $.Field({Static:false, Public:true }, "idleTime", $.Single);

    $.Field({Static:false, Public:true }, "attackMovementSpeed", $.Single);

    $.Field({Static:false, Public:true }, "attackImmediately", $.Boolean);

    $.Field({Static:false, Public:true }, "animationFrame", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:true }, "airSpeed", $.Single);

    $.Field({Static:false, Public:false}, "tex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "displayRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "animationSourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "testCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "colliderOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "colliderSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "terminalVelocity", $.Single);

    $.Field({Static:false, Public:false}, "depth", $.Single);

    $.Field({Static:false, Public:true }, "rollCooldownTime", $.Single);

    $.Field({Static:false, Public:true }, "rollStunTime", $.Single);

    $.Field({Static:false, Public:true }, "rollPauseTimer", $.Single);

    $.Field({Static:false, Public:true }, "rollPauseTime", $.Single);

    $.Field({Static:false, Public:true }, "rollTimeMax", $.Single);

    $.Field({Static:false, Public:true }, "rollTime", $.Single);

    $.Field({Static:false, Public:true }, "rollSpeed", $.Single);

    $.Field({Static:false, Public:true }, "rollLeapTime", $.Single);

    $.Field({Static:false, Public:true }, "rollLeapInitialYvelocity", $.Single);

    $.Field({Static:false, Public:true }, "rollLerp", $.Single);

    $.Field({Static:false, Public:true }, "rollDamage", $.Single);

    $.Field({Static:false, Public:true }, "rollKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "swipeChargeTime", $.Single);

    $.Field({Static:false, Public:true }, "swipeChargeTimer", $.Single);

    $.Field({Static:false, Public:true }, "swipeCooldownTime", $.Single);

    $.Field({Static:false, Public:true }, "swipePauseTime", $.Single);

    $.Field({Static:false, Public:true }, "swipePauseTimer", $.Single);

    $.Field({Static:false, Public:true }, "swipeKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "swipeDamage", $.Single);

    $.Field({Static:false, Public:true }, "swipeRange", $.Int32);

    $.Field({Static:false, Public:true }, "swipeHit", $.Boolean);

    $.Field({Static:false, Public:true }, "tailwhipChargeTime", $.Single);

    $.Field({Static:false, Public:true }, "tailwhipChargeTimer", $.Single);

    $.Field({Static:false, Public:true }, "tailwhipCooldownTime", $.Single);

    $.Field({Static:false, Public:true }, "tailwhipPauseTime", $.Single);

    $.Field({Static:false, Public:true }, "tailwhipKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "tailwhipDamage", $.Single);

    $.Field({Static:false, Public:true }, "meleeActivitiesInARow", $.Int32);

    $.Field({Static:false, Public:true }, "meleeActivityLimit", $.Int32);

    $.Field({Static:false, Public:true }, "buryDigSpeed", $.Single);

    $.Field({Static:false, Public:true }, "buryDigLerp", $.Single);

    $.Field({Static:false, Public:true }, "buryChargeTime", $.Single);

    $.Field({Static:false, Public:true }, "buryCooldownTime", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeWaitTime", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeMaxWaitTime", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeMinWaitTime", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeWaitTimer", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeRadius", $.Int32);

    $.Field({Static:false, Public:true }, "buryStrikeSide", $asm00.TypeRef("Irbis.Side"));

    $.Field({Static:false, Public:true }, "buryStrikeChargeTime", $.Single);

    $.Field({Static:false, Public:true }, "buryInitialEmergeChance", $.Single);

    $.Field({Static:false, Public:true }, "buryEmergeChance", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeDamage", $.Single);

    $.Field({Static:false, Public:true }, "buryKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "buryStrikeLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "buryStrikeSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "buryRumbleFrameTimer", $.Single);

    $.Field({Static:false, Public:true }, "buryRumbleFrame", $.Int32);

    $.Field({Static:false, Public:true }, "buryStrikeFrameTimer", $.Single);

    $.Field({Static:false, Public:true }, "buryStrikeFrame", $.Int32);

    $.Field({Static:false, Public:false}, "wanderSpeed", $.Single);

    $.Field({Static:false, Public:false}, "wanderLerp", $.Single);

    $.Field({Static:false, Public:false}, "stunLerp", $.Single);

    $.Field({Static:false, Public:true }, "stunned", $.Single);

    $.Field({Static:false, Public:true }, "wanderTime", $.Single);

    $.Field({Static:false, Public:true }, "initialWanderTime", $.Single);

    $.Field({Static:false, Public:true }, "jumpTime", $.Single);

    $.Field({Static:false, Public:true }, "timeSinceLastFrame", $.Single);

    $.Field({Static:false, Public:false}, "currentFrame", $.Int32);

    $.Field({Static:false, Public:true }, "currentAnimation", $.Int32);

    $.Field({Static:false, Public:false}, "previousAnimation", $.Int32);

    $.Field({Static:false, Public:true }, "animationSpeed", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Field({Static:false, Public:true }, "animationFrames", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "animationNoLoop", $.Boolean);

    $.Field({Static:false, Public:true }, "input", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "frameInput", $.Boolean);

    $.Field({Static:false, Public:true }, "shockwaveMaxEffectDistance", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveEffectiveDistance", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveStunTime", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:true }, "location", $asm00.TypeRef("Irbis.Location"));

    $.Field({Static:false, Public:true }, "activity", $asm00.TypeRef("LizardGuy+LizardActivity"));

    $.Field({Static:false, Public:false}, "amountToMove", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "negAmountToMove", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "testPos", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "lastHitByAttackID", $.Int32);

    $.Field({Static:false, Public:true }, "combatCheckDistanceSqr", $.Int32);

    $.Field({Static:false, Public:true }, "persueCheckDistanceSqr", $.Int32);

    $.Field({Static:false, Public:true }, "combat", $.Boolean);

    $.Field({Static:true , Public:true }, "movementLerpBuildup", $.Single, 10);

    $.Field({Static:true , Public:true }, "movementLerpSlowdown", $.Single, 50);

    $.Field({Static:true , Public:true }, "movementLerpAir", $.Single, 5);

    $.Field({Static:false, Public:true }, "attackCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "attackColliderWidth", $.Int32);

    $.Field({Static:false, Public:true }, "attackColliderHeight", $.Int32);

    $.Field({Static:false, Public:true }, "attackDamage", $.Single);

    $.Field({Static:false, Public:true }, "attack1Damage", $.Single);

    $.Field({Static:false, Public:true }, "attackCooldown", $.Single);

    $.Field({Static:false, Public:true }, "attackCooldownTimer", $.Single);

    $.Field({Static:false, Public:false}, "attackPlayerLock", $.Object);

    $.Field({Static:false, Public:false}, "collidedLock", $.Object);

    $.Field({Static:false, Public:true }, "bossArena", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "collided", $asm00.TypeRef("Collided"));

    $.Field({Static:false, Public:true }, "state", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "cooldown", $jsilcore.TypeRef("System.Array", [$.Single]));


    function LizardGuy__cctor () {
      $thisType.movementLerpBuildup = 10;
      $thisType.movementLerpSlowdown = 50;
      $thisType.movementLerpAir = 5;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LizardGuy__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "TrueCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true , Virtual:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Walled", $asm00.TypeRef("Wall"));

    $.Property({Static:false, Public:true , Virtual:true }, "Health", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "MaxHealth", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "SpeedModifier", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "ActiveEffects", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AIenabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Mass", $.Single);

    $.Property({Static:false, Public:true }, "ShockwaveMaxEffectDistanceSquared", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "StunTime", $.Single);

    $.Property({Static:false, Public:true }, "ActivelyAttacking", $.Boolean);

    $.Property({Static:false, Public:true }, "ActiveAttacks", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Irbis.IEnemy"), 
      /* 1 */ $asm00.TypeRef("Irbis.ICollisionObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum LizardGuy+LizardActivity */ 

JSIL.MakeEnum(
  {
    FullName: "LizardGuy+LizardActivity", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Idle: 0, 
    WalkLeft: 1, 
    WalkRight: 2, 
    Roll: 3, 
    Jump: 4, 
    Bury: 5, 
    Emerge: 6, 
    Swipe: 7, 
    Tailwhip: 8, 
    SwipeSwing: 9, 
    TailwhipSwing: 10, 
    TurningAround: 11, 
    Dying: 12, 
    GettingUp: 13, 
    Misc: 20, 
  }
);

/* class Node`1 */ 

(function Node$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };


  function Node$b1__ctor$00 (value, parentNode) {
    this.parent = parentNode;
    this.data = JSIL.CloneParameter($thisType.T.get(this), value);
    this.left = null;
    this.right = null;
  }; 

  function Node$b1__ctor$01 (value) {
    this.parent = null;
    this.data = JSIL.CloneParameter($thisType.T.get(this), value);
    this.left = null;
    this.right = null;
  }; 

  function Node$b1__ctor$02 () {
    this.parent = null;
    this.data = (
      $thisType.T.get(this).IsValueType
         ? JSIL.CreateInstanceOfType($thisType.T.get(this))
         : null)
    ;
    this.left = null;
    this.right = null;
  }; 

  function Node$b1_get_Data () {
    return this.data;
  }; 

  function Node$b1_get_Left () {
    return this.left;
  }; 

  function Node$b1_get_Parent () {
    return this.parent;
  }; 

  function Node$b1_get_Right () {
    return this.right;
  }; 

  function Node$b1_Print () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), ["{parent:", this.parent, " data:", this.data, " left:", this.left, " right:", this.right, "}"]));
  }; 

  function Node$b1_set_Data (value) {
    this.data = JSIL.CloneParameter($thisType.T.get(this), value);
  }; 

  function Node$b1_set_Left (value) {
    this.left = value;
  }; 

  function Node$b1_set_Right (value) {
    this.right = value;
  }; 

  function Node$b1_toString () {
    var returnstring = "{parent:";
    if (this.parent !== null) {
      var obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), [obj, this.parent.data, " data:", this.data])));
    } else {
      returnstring = (JSIL.ConcatString(returnstring, "null data:", this.data));
    }
    returnstring = (JSIL.ConcatString(returnstring, " left:"));
    if (this.left !== null) {
      returnstring = (JSIL.ConcatString(returnstring, this.left.data));
    } else {
      returnstring = (JSIL.ConcatString(returnstring, "null"));
    }
    returnstring = (JSIL.ConcatString(returnstring, " right:"));
    if (this.right !== null) {
      returnstring = (JSIL.ConcatString(returnstring, this.right.data));
    } else {
      returnstring = (JSIL.ConcatString(returnstring, "null"));
    }
    return JSIL.ConcatString(returnstring, "}");
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Node`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $asm00.TypeRef("Node`1", [$.GenericParameter("T")])]), 
      Node$b1__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Node$b1__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Node$b1__ctor$02
    );

    $.Method({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Node$b1_get_Data
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm00.TypeRef("Node`1", [$.GenericParameter("T")]), null), 
      Node$b1_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Parent", 
      new JSIL.MethodSignature($asm00.TypeRef("Node`1", [$.GenericParameter("T")]), null), 
      Node$b1_get_Parent
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm00.TypeRef("Node`1", [$.GenericParameter("T")]), null), 
      Node$b1_get_Right
    );

    $.Method({Static:false, Public:true }, "Print", 
      JSIL.MethodSignature.Return($.String), 
      Node$b1_Print
    );

    $.Method({Static:false, Public:true }, "set_Data", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Node$b1_set_Data
    );

    $.Method({Static:false, Public:true }, "set_Left", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Node`1", [$.GenericParameter("T")])]), 
      Node$b1_set_Left
    );

    $.Method({Static:false, Public:true }, "set_Right", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Node`1", [$.GenericParameter("T")])]), 
      Node$b1_set_Right
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Node$b1_toString
    );

    $.Field({Static:false, Public:false}, "parent", $asm00.TypeRef("Node`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "data", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "left", $asm00.TypeRef("Node`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "right", $asm00.TypeRef("Node`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Parent", $asm00.TypeRef("Node`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Data", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Left", $asm00.TypeRef("Node`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Right", $asm00.TypeRef("Node`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct OldLevel */ 

(function OldLevel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Single))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm02.System.Single))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.Console)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Level)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.System.Exception)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.System.IO.FileStream)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.System.IO.FileMode)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.System.Runtime.Serialization.SerializationException)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm02.System.IO.Stream)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Single), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.IO.FileStream, [$asm02.System.String, $asm02.System.IO.FileMode]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Runtime.Serialization.Formatters.Binary.BinaryFormatter, null))) ();
  };


  function OldLevel__ctor (construct) {
    this.squareSpawnPointsX = $S00().Construct();
    this.squareSpawnPointsY = $S00().Construct();
    this.squareTextures = JSIL.Array.New($T02(), 0);
    this.backgroundSquaresX = $S00().Construct();
    this.backgroundSquaresY = $S00().Construct();
    this.backgroundTextures = JSIL.Array.New($T02(), 0);
    this.backgroundSquareDepths = JSIL.Array.New($T03(), 0);
    this.squareDepth = 0;
    this.levelName = $T02().Empty;
    this.enemySpawnPointsX = $S01().Construct();
    this.enemySpawnPointsY = $S01().Construct();
    this.isOnslaught = false;
    this.playerSpawnX = 0;
    this.playerSpawnY = 0;
    this.bossSpawnX = 0;
    this.bossSpawnY = 0;
  }; 

  function OldLevel_AssignLocalVariables (OldLevel) {
    this.squareSpawnPointsX = OldLevel.squareSpawnPointsX;
    this.squareSpawnPointsY = OldLevel.squareSpawnPointsY;
    this.squareTextures = OldLevel.squareTextures;
    this.squareDepth = +OldLevel.squareDepth;
    $T05().WriteLine(JSIL.ConcatString("           squares: ", $T07().$Box(this.squareTextures.length)));
    this.backgroundSquaresX = OldLevel.backgroundSquaresX;
    this.backgroundSquaresY = OldLevel.backgroundSquaresY;
    this.backgroundTextures = OldLevel.backgroundTextures;
    this.backgroundSquareDepths = OldLevel.backgroundSquareDepths;
    $T05().WriteLine(JSIL.ConcatString("background squares: ", $T07().$Box(this.backgroundSquareDepths.length)));
    this.levelName = OldLevel.levelName;
    $T05().WriteLine(JSIL.ConcatString("        OldLevel name: ", this.levelName));
    this.enemySpawnPointsX = OldLevel.enemySpawnPointsX;
    this.enemySpawnPointsY = OldLevel.enemySpawnPointsY;
    $T05().WriteLine(JSIL.ConcatString("enemy spawn points: ", $T07().$Box((this.get_EnemySpawnPoints()).get_Count())));
    this.isOnslaught = OldLevel.isOnslaught;
    $T05().WriteLine(JSIL.ConcatString("       isOnslaught: ", $T00().$Box(this.isOnslaught)));
    this.playerSpawnX = +OldLevel.playerSpawnX;
    this.playerSpawnY = +OldLevel.playerSpawnY;
    $T05().WriteLine(JSIL.ConcatString("      player spawn: ", this.get_PlayerSpawn()));
    this.bossSpawnX = +OldLevel.bossSpawnX;
    this.bossSpawnY = +OldLevel.bossSpawnY;
    $T05().WriteLine(JSIL.ConcatString("        boss spawn: ", this.get_BossSpawn()));
  }; 

  function OldLevel_Debug$00 () {
    $T05().WriteLine(JSIL.ConcatString("           squares: ", $T07().$Box(this.squareTextures.length)));

    for (var i = 0; i < (this.squareTextures.length | 0); i = ((i + 1) | 0)) {
      $T05().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["square[", $T07().$Box(i), "] tex: ", this.squareTextures[i]])));
      $T05().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["square[", $T07().$Box(i), "] pos: {X:", $T07().$Box((this.squareSpawnPointsX).get_Item(i)), " Y:", $T07().$Box((this.squareSpawnPointsY).get_Item(i)), "}"])));
    }

    for (i = 0; i < ((this.get_EnemySpawnPoints()).get_Count() | 0); i = ((i + 1) | 0)) {
      $T05().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["enemy[", $T07().$Box(i), "] pos: ", (this.get_EnemySpawnPoints()).get_Item(i)])));
    }
  }; 

  function OldLevel_Debug$01 (mow) {
    $T0C().WriteLine(JSIL.ConcatString("           squares: ", $T07().$Box(this.squareTextures.length)));

    for (var i = 0; i < (this.squareTextures.length | 0); i = ((i + 1) | 0)) {
      $T0C().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["square[", $T07().$Box(i), "] tex: ", this.squareTextures[i]])));
      $T0C().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["square[", $T07().$Box(i), "] pos: {X:", $T07().$Box((this.squareSpawnPointsX).get_Item(i)), " Y:", $T07().$Box((this.squareSpawnPointsY).get_Item(i)), "}"])));
    }

    for (i = 0; i < ((this.get_EnemySpawnPoints()).get_Count() | 0); i = ((i + 1) | 0)) {
      $T0C().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["enemy[", $T07().$Box(i), "] pos: ", (this.get_EnemySpawnPoints()).get_Item(i)])));
    }
  }; 

  function OldLevel_get_BackgroundSquares () {
    var bgSquares = JSIL.Array.New($T0E(), (this.backgroundSquaresX).get_Count());

    for (var i = 0; i < ((this.backgroundSquaresX).get_Count() | 0); i = ((i + 1) | 0)) {
      bgSquares[i] = $S02().Construct((this.backgroundSquaresX).get_Item(i), (this.backgroundSquaresY).get_Item(i));
    }
    return bgSquares;
  }; 

  function OldLevel_get_BossSpawn () {
    return $S03().Construct(this.bossSpawnX, this.bossSpawnY);
  }; 

  function OldLevel_get_EnemySpawnPoints () {
    var enemySpawns = $S04().Construct();

    for (var i = 0; i < ((this.enemySpawnPointsX).get_Count() | 0); i = ((i + 1) | 0)) {
      enemySpawns.Add($S03().Construct((this.enemySpawnPointsX).get_Item(i), (this.enemySpawnPointsY).get_Item(i)));
    }
    return enemySpawns;
  }; 

  function OldLevel_get_PlayerSpawn () {
    return $S03().Construct(this.playerSpawnX, this.playerSpawnY);
  }; 

  function OldLevel_get_SquareSpawnPoints () {
    var squareSpawns = JSIL.Array.New($T0E(), (this.squareSpawnPointsX).get_Count());

    for (var i = 0; i < (squareSpawns.length | 0); i = ((i + 1) | 0)) {
      squareSpawns[i] = $S02().Construct((this.squareSpawnPointsX).get_Item(i), (this.squareSpawnPointsY).get_Item(i));
    }
    return squareSpawns;
  }; 

  function OldLevel_LevelConverter (level) {
    var thislevel = new $thisType(true);
    thislevel.set_SquareSpawnPoints($T11().prototype.ToArray.call(level.get_SquareSpawnPoints()));
    thislevel.squareTextures = $T12().prototype.ToArray.call(level.squareTextures);

    for (var i = 0; i < (thislevel.squareTextures.length | 0); i = ((i + 1) | 0)) {
      thislevel.squareDepth = 0.3;
    }
    thislevel.set_BackgroundSquares($T11().prototype.ToArray.call(level.get_BackgroundSquares()));
    thislevel.backgroundTextures = $T12().prototype.ToArray.call(level.backgroundTextures);
    thislevel.backgroundSquareDepths = $T04().prototype.ToArray.call(level.backgroundSquareDepths);
    thislevel.levelName = level.levelName;
    thislevel.set_EnemySpawnPoints(level.get_EnemySpawnPoints());
    thislevel.isOnslaught = level.isOnslaught;
    (thislevel.PlayerSpawn = level.get_PlayerSpawn().MemberwiseClone());
    (thislevel.BossSpawn = level.get_BossSpawn().MemberwiseClone());
    return thislevel;
  }; 

  function OldLevel_Load (filename, $exception) {
    var thisLevel = new $thisType(true);
    $T05().WriteLine(("loading " + filename + "..."));
    var stream = $S05().Construct(filename, $T15().Open);
    try {
      try {
        var formatter = $S06().Construct();
        thisLevel = $thisType.$Cast(formatter.Deserialize(stream)).MemberwiseClone();
        this.AssignLocalVariables(thisLevel);
        $T05().WriteLine("load successful.");
      } catch ($exception) {
        if ($T17().$Is($exception)) {
          var e = $exception;
          $T0C().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T05().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T05().WriteLine();
      stream.Close();
    }
  }; 

  function OldLevel_Save$02 (filename, $exception) {
    $T05().WriteLine(("saving " + filename + "..."));
    var formatter = $S06().Construct();
    var stream = $S05().Construct(filename, $T15().Create);
    try {
      try {
        formatter.Serialize(stream, this);
        $T05().WriteLine("save successful.");
      } catch ($exception) {
        if ($T17().$Is($exception)) {
          var e = $exception;
          $T0C().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T05().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T05().WriteLine();
      stream.Close();
    }
  }; 

  function OldLevel_Save$03 (level, filename, $exception) {
    var formatter = $S06().Construct();
    var stream = $S05().Construct(filename, $T15().Create);
    try {
      try {
        formatter.Serialize(stream, level.MemberwiseClone());
      } catch ($exception) {
        if ($T17().$Is($exception)) {
          var e = $exception;
          $T0C().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      stream.Close();
    }
  }; 

  function OldLevel_set_BackgroundSquares (value) {
    (this.backgroundSquaresX).Clear();
    (this.backgroundSquaresY).Clear();

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      var P = value[i].MemberwiseClone();
      (this.backgroundSquaresX).Add(P.X);
      (this.backgroundSquaresY).Add(P.Y);
    }
  }; 

  function OldLevel_set_BossSpawn (value) {
    this.bossSpawnX = +value.X;
    this.bossSpawnY = +value.Y;
  }; 

  function OldLevel_set_EnemySpawnPoints (value) {
    var $temp00;
    (this.enemySpawnPointsX).Clear();
    (this.enemySpawnPointsY).Clear();

    for (var a$0 = value._items, i$0 = 0, l$0 = (value._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var v2 = a$0[i$0].MemberwiseClone();
      (this.enemySpawnPointsX).Add(v2.X);
      (this.enemySpawnPointsY).Add(v2.Y);
    }
  }; 

  function OldLevel_set_PlayerSpawn (value) {
    this.playerSpawnX = +value.X;
    this.playerSpawnY = +value.Y;
  }; 

  function OldLevel_set_SquareSpawnPoints (value) {
    (this.squareSpawnPointsX).Clear();
    (this.squareSpawnPointsY).Clear();

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      var P = value[i].MemberwiseClone();
      (this.squareSpawnPointsX).Add(P.X);
      (this.squareSpawnPointsY).Add(P.Y);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "OldLevel", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      OldLevel__ctor
    );

    $.Method({Static:false, Public:false}, "AssignLocalVariables", 
      JSIL.MethodSignature.Action($.Type), 
      OldLevel_AssignLocalVariables
    );

    $.Method({Static:false, Public:true }, "Debug", 
      JSIL.MethodSignature.Void, 
      OldLevel_Debug$00
    );

    $.Method({Static:false, Public:true }, "Debug", 
      JSIL.MethodSignature.Action($.Boolean), 
      OldLevel_Debug$01
    );

    $.Method({Static:false, Public:true }, "get_BackgroundSquares", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      OldLevel_get_BackgroundSquares
    );

    $.Method({Static:false, Public:true }, "get_BossSpawn", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      OldLevel_get_BossSpawn
    );

    $.Method({Static:false, Public:true }, "get_EnemySpawnPoints", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      OldLevel_get_EnemySpawnPoints
    );

    $.Method({Static:false, Public:true }, "get_PlayerSpawn", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      OldLevel_get_PlayerSpawn
    );

    $.Method({Static:false, Public:true }, "get_SquareSpawnPoints", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      OldLevel_get_SquareSpawnPoints
    );

    $.Method({Static:true , Public:true }, "LevelConverter", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Level")]), 
      OldLevel_LevelConverter
    );

    $.Method({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.String), 
      OldLevel_Load
    );

    $.Method({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($.String), 
      OldLevel_Save$02
    );

    $.Method({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$.Type, $.String]), 
      OldLevel_Save$03
    );

    $.Method({Static:false, Public:true }, "set_BackgroundSquares", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      OldLevel_set_BackgroundSquares
    );

    $.Method({Static:false, Public:true }, "set_BossSpawn", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      OldLevel_set_BossSpawn
    );

    $.Method({Static:false, Public:true }, "set_EnemySpawnPoints", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      OldLevel_set_EnemySpawnPoints
    );

    $.Method({Static:false, Public:true }, "set_PlayerSpawn", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      OldLevel_set_PlayerSpawn
    );

    $.Method({Static:false, Public:true }, "set_SquareSpawnPoints", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      OldLevel_set_SquareSpawnPoints
    );

    $.Field({Static:false, Public:false}, "squareSpawnPointsX", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "squareSpawnPointsY", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "enemySpawnPointsX", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:false}, "enemySpawnPointsY", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:false}, "backgroundSquaresX", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "backgroundSquaresY", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "squareTextures", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "squareDepth", $.Single);

    $.Field({Static:false, Public:true }, "backgroundTextures", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "backgroundSquareDepths", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Field({Static:false, Public:true }, "levelName", $.String);

    $.Field({Static:false, Public:true }, "isOnslaught", $.Boolean);

    $.Field({Static:false, Public:false}, "playerSpawnX", $.Single);

    $.Field({Static:false, Public:false}, "playerSpawnY", $.Single);

    $.Field({Static:false, Public:false}, "bossSpawnX", $.Single);

    $.Field({Static:false, Public:false}, "bossSpawnY", $.Single);

    $.Property({Static:false, Public:true }, "SquareSpawnPoints", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Property({Static:false, Public:true }, "BackgroundSquares", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Property({Static:false, Public:true }, "PlayerSpawn", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "BossSpawn", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "EnemySpawnPoints", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class OnslaughtSpawner */ 

(function OnslaughtSpawner$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.UInt64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.VendingMachine))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.UInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.VendingMachine)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.VendingMachine), null))) ();
  };


  function OnslaughtSpawner__ctor () {
    this.wave = 1;
    this.enemyHealth = 100;
    this.enemyDamage = 10;
    this.enemySpeed = 150;
    this.enemiesKilled = 0;
    this.pointsPerKill = 10;
    this.pointsPerWave = 100;
    this.maxEnemies = 5;
    this.enemiesLeftThisWave = this.enemiesThisWave = ((4 + (this.wave | 0)) | 0);
    this.timer = 1;
    this.timeUntilNextSpawn = 30;
    this.points = $T00().Create(0, 0, 0);
    this.waveStarted = false;
    this.vendingMachineList = $S00().Construct();
  }; 

  function OnslaughtSpawner_EnemyKilled () {
    this.points = $T00().op_Addition(this.points, $T00().FromNumber(this.pointsPerKill));
    this.enemiesKilled = (((this.enemiesKilled | 0) + 1) | 0);
  }; 

  function OnslaughtSpawner_EnemySpawnTimer () {
    this.timeUntilNextSpawn = +this.timeUntilNextSpawn - +$T02().get_DeltaTime();
    if (+this.timeUntilNextSpawn <= 0) {
      this.waveStarted = true;
      this.timeUntilNextSpawn = +this.timer;
      this.enemiesLeftThisWave = (((this.enemiesLeftThisWave | 0) - 1) | 0);
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function OnslaughtSpawner_get_Points () {
    return this.points;
  }; 

  function OnslaughtSpawner_NextWave () {
    this.waveStarted = false;
    this.wave = (((this.wave | 0) + 1) | 0);
    this.points = $T00().op_Addition(this.points, $T00().FromNumber(this.pointsPerWave));
    this.pointsPerKill = (((this.pointsPerKill >>> 0) + 10) >>> 0);
    this.pointsPerWave = (((this.pointsPerWave >>> 0) + 100) >>> 0);
    this.enemiesKilled = 0;
    this.timeUntilNextSpawn = 30;
    this.maxEnemies = ((5 + (((this.wave | 0) / 3) | 0)) | 0);
    this.enemiesLeftThisWave = this.enemiesThisWave = ((4 + (this.wave | 0)) | 0);
    this.enemyHealth = 100 + +((this.wave | 0) * 5);
    this.enemyDamage = 10 + +(this.wave);
    this.enemySpeed = 150 + +((+(this.wave) / 2));
  }; 

  function OnslaughtSpawner_set_Points (value) {
    this.points = value;
  }; 

  function OnslaughtSpawner_SkipToWave (waveNumber) {
    this.wave = (((waveNumber | 0) - 1) | 0);
    this.NextWave();
  }; 

  function OnslaughtSpawner_toString () {
    var $temp00;
    var debugstring = $T05().Empty;
    var obj = debugstring;
    debugstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), [obj, "\npoints: ", this.points, "\ntimer: ", $T07().$Box(this.timer), "\ntimeUntilNextSpawn: ", $T07().$Box(this.timeUntilNextSpawn), "\nmaxEnemies: ", $T04().$Box(this.maxEnemies), "\nwave: ", $T04().$Box(this.wave), "\nenemiesLeftThisWave: ", $T04().$Box(this.enemiesLeftThisWave), "\nenemiesThisWave: ", $T04().$Box(this.enemiesThisWave), "\nenemyHealth: ", $T07().$Box(this.enemyHealth), "\nenemyDamage: ", $T07().$Box(this.enemyDamage), "\nenemySpeed: ", $T07().$Box(this.enemySpeed), "\nwaveStarted: ", $T03().$Box(this.waveStarted), "\nenemiesKilled: ", $T04().$Box(this.enemiesKilled), "\npointsPerKill: ", $T08().$Box(this.pointsPerKill), "\npointsPerWave: ", $T08().$Box(this.pointsPerWave), "\nvendingMachines: ", $T04().$Box((this.vendingMachineList).get_Count())])));

    for (var a$0 = this.vendingMachineList._items, i$0 = 0, l$0 = (this.vendingMachineList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var v = a$0[i$0];
      debugstring = ((debugstring + "\nvendingMachine: " + v.toString()));
    }
    return debugstring;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "OnslaughtSpawner", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OnslaughtSpawner__ctor
    );

    $.Method({Static:false, Public:true }, "EnemyKilled", 
      JSIL.MethodSignature.Void, 
      OnslaughtSpawner_EnemyKilled
    );

    $.Method({Static:false, Public:true }, "EnemySpawnTimer", 
      JSIL.MethodSignature.Return($.Boolean), 
      OnslaughtSpawner_EnemySpawnTimer
    );

    $.Method({Static:false, Public:true }, "get_Points", 
      JSIL.MethodSignature.Return($.UInt64), 
      OnslaughtSpawner_get_Points
    );

    $.Method({Static:false, Public:true }, "NextWave", 
      JSIL.MethodSignature.Void, 
      OnslaughtSpawner_NextWave
    );

    $.Method({Static:false, Public:true }, "set_Points", 
      JSIL.MethodSignature.Action($.UInt64), 
      OnslaughtSpawner_set_Points
    );

    $.Method({Static:false, Public:true }, "SkipToWave", 
      JSIL.MethodSignature.Action($.Int32), 
      OnslaughtSpawner_SkipToWave
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      OnslaughtSpawner_toString
    );

    $.Field({Static:false, Public:false}, "points", $.UInt64);

    $.Field({Static:false, Public:false}, "timer", $.Single);

    $.Field({Static:false, Public:true }, "timeUntilNextSpawn", $.Single);

    $.Field({Static:false, Public:true }, "maxEnemies", $.Int32);

    $.Field({Static:false, Public:true }, "wave", $.Int32);

    $.Field({Static:false, Public:true }, "enemiesLeftThisWave", $.Int32);

    $.Field({Static:false, Public:true }, "enemiesThisWave", $.Int32);

    $.Field({Static:false, Public:true }, "enemyHealth", $.Single);

    $.Field({Static:false, Public:true }, "enemyDamage", $.Single);

    $.Field({Static:false, Public:true }, "enemySpeed", $.Single);

    $.Field({Static:false, Public:true }, "waveStarted", $.Boolean);

    $.Field({Static:false, Public:true }, "enemiesKilled", $.Int32);

    $.Field({Static:false, Public:true }, "pointsPerKill", $.UInt32);

    $.Field({Static:false, Public:true }, "pointsPerWave", $.UInt32);

    $.Field({Static:false, Public:true }, "vendingMachineList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("VendingMachine")]));

    $.Property({Static:false, Public:true }, "Points", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Enemy */ 

(function Enemy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Irbis.Location)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Irbis.Activity)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Irbis.AI)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.Side))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Player)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Irbis.Irbis_AttackEventDelegate)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Irbis.Irbis_ShockwaveEventDelegate)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Enchant)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Irbis.Attacking)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Wall)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Irbis.ICollisionObject)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.System.Math)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.System.Decimal)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm02.System.Threading.Monitor)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm02.System.Threading.Interlocked)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm02.System.Threading.EventWaitHandle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.Side), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm00.Irbis.Attacking]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [
        $asm01.Microsoft.Xna.Framework.Point, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Single
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [$asm02.System.Decimal]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Decimal, [$asm02.System.Decimal]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Decimal, [$asm02.System.Single]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [
        $asm02.System.Single, $asm02.System.Single, 
        $asm02.System.Single
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Single
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm00.Irbis.Direction, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [JSIL.Reference.Of($asm02.System.Int32)]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Irbis.ICollisionObject.get_Collider)) ();
  };


  function Enemy__ctor (enemyName, t, iPos, enemyHealth, enemyDamage, enemySpeed, drawDepth) {
    this.$name = (JSIL.ConcatString("enemy ", $T05().__Type__.__PublicInterface__.$ToString($T04().RandomInt(100), "00", null)));
    this.mass = 0.9;
    this.animationSpeed = JSIL.Array.New($T03(), 20);
    this.animationFrames = JSIL.Array.New($T05(), 20);
    this.tex = t;
    this.attackPlayerLock = new ($T06())();
    this.collidedLock = new ($T06())();
    this.set_AIenabled(true);
    this.$name = enemyName;
    this.depth = +drawDepth;
    this.animationFrame = $S00().Construct((((+($T04().font.charHeight) * 2) * +($T04().textScale)) | 0), $T04().font.MemberwiseClone(), $T08().Color$White$value.MemberwiseClone(), true, $T09().get_Zero(), $T0A().Left, (+drawDepth + 0.001));
    this.climbablePixels = 3;
    this.position = iPos.MemberwiseClone();
    this.direction = $T0A().Forward;
    this.location = $T0B().Air;
    this.activity = $T0C().Idle;
    this.AIactivity = $T0D().Wander;
    this.wanderSpeed = 0.6666667 * +enemySpeed;
    this.wanderTime = 0;
    this.previouslyWandered = false;
    this.defaultSpeed = +enemySpeed;
    this.speed = +enemySpeed;
    this.jumpTime = 0;
    this.jumpTimeMax = 0.06;
    this.animationNoLoop = false;
    this.XcolliderOffset = 22;
    this.YcolliderOffset = 19;
    this.colliderWidth = 19;
    this.colliderHeight = 43;
    this.position.X = +this.position.X - +(this.XcolliderOffset);
    this.position.Y = +this.position.Y - +(this.YcolliderOffset);
    this.health = +enemyHealth;
    this.maxHealth = +enemyHealth;
    this.lastHitByAttackID = -1;
    this.stunned = 0;
    this.speedModifier = 1;
    this.attackCollider = $T0E().get_Empty().MemberwiseClone();
    this.attackColliderWidth = 30;
    this.attackColliderHeight = 30;
    this.attackID = this.attackIDtracker = 0;
    this.lastAttackID = -1;
    this.attackDamage = 0;
    this.attack1Damage = +enemyDamage;
    this.attackCooldown = 2;
    this.attackCooldownTimer = 3;
    this.combatCheckDistanceSqr = Math.imul(this.attackColliderWidth, this.attackColliderWidth);
    this.persueCheckDistanceSqr = 40000;
    this.combat = false;
    this.activeEffects = $S01().Construct();
    this.shockwaveStunTime = +$T04().jamie.shockwaveStunTime;
    this.shockwaveKnockback = $T04().jamie.shockwaveKnockback.MemberwiseClone();
    this.displayRect = $S02().Construct(((this.get_Position().X) | 0), ((this.get_Position().Y) | 0), 128, 128);
    this.animationSourceRect = $S02().Construct(0, 0, 64, 64);
    this.currentFrame = 0;
    this.currentAnimation = 0;
    this.animationSpeed[0] = 0.1;

    for (var i = 1; i < 20; i = ((i + 1) | 0)) {
      this.animationSpeed[i] = +this.animationSpeed[0];
    }
    this.animationFrames[0] = 2;
    this.animationFrames[1] = 4;
    this.animationFrames[2] = 2;
    this.animationFrames[3] = 2;
    this.animationFrames[4] = 2;
    this.animationFrames[5] = 2;
    this.animationFrames[6] = 2;
    this.animationFrames[7] = 2;
    this.animationFrames[8] = 2;
    this.animationSourceRect = $S02().Construct(Math.imul(64, this.currentFrame), Math.imul(64, this.currentAnimation), 64, 64);
    this.collided = $S03().Construct();
    this.sideCollided = $S04().Construct();
    $T04().jamie.add_OnPlayerAttack($T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "Enemy_OnPlayerAttack", $S05(), false, false)));
    $T04().jamie.add_OnPlayerShockwave($T14().New(this, null, new JSIL.MethodPointerInfo($thisType, "Enemy_OnPlayerShockwave", $S06(), false, false)));
  }; 

  function Enemy_AddEffect (effect) {
    (this.activeEffects).Add(effect);
  }; 

  function Enemy_Animate () {
    this.timeSinceLastFrame = +this.timeSinceLastFrame + +$T04().get_DeltaTime();
    if (+this.timeSinceLastFrame >= +this.animationSpeed[this.currentAnimation]) {
      this.currentFrame = (((this.currentFrame | 0) + 1) | 0);
      this.timeSinceLastFrame = +this.timeSinceLastFrame - +this.animationSpeed[this.currentAnimation];
    }
    if ((this.currentFrame | 0) > (this.animationFrames[this.currentAnimation] | 0)) {
      this.currentFrame = 0;
      if (this.animationNoLoop) {
        this.animationNoLoop = false;
        switch (this.currentAnimation) {
          case 1: 
            this.currentAnimation = 0;
            break;

          case 2: 
            this.currentAnimation = 0;
            break;

        }
      }
      if (this.attacking !== $T16().No) {
        this.attacking = $T16().No;
      }
    }
    if (this.attacking !== $T16().No) {
      this.activity = $T0C().Attacking;
    } else if ($T09().op_Inequality(this.input, $T09().get_Zero())) {
      if ((this.input.X | 0) !== 0) {
        if (((this.walled).get_Bottom() | 0) > 0) {
          this.activity = $T0C().Running;
        } else if (+this.velocity.Y < 0) {
          this.activity = $T0C().Jumping;
        } else {
          this.activity = $T0C().Falling;
        }
      } else if (((this.walled).get_Bottom() | 0) <= 0) {
        if (+this.velocity.Y < 0) {
          this.activity = $T0C().Jumping;
        } else {
          this.activity = $T0C().Falling;
        }
      }
    } else if (((this.walled).get_Bottom() | 0) <= 0) {
      if (+this.velocity.Y < 0) {
        this.activity = $T0C().Jumping;
      } else {
        this.activity = $T0C().Falling;
      }
    } else {
      this.activity = $T0C().Idle;
    }
    switch ((this.activity).valueOf()) {
      case 0: 
        this.currentAnimation = 3;
        break;

      case 1: 
        this.currentAnimation = 5;
        break;

      case 2: 
        this.currentAnimation = 5;
        break;

      case 3: 
        this.currentAnimation = 5;
        break;

      case 4: 
        this.currentAnimation = 5;
        break;

      case 5: 
        this.currentAnimation = 5;
        break;

      case 6: 
        this.currentAnimation = 7;
        break;

      default: 
        this.currentAnimation = 5;
        break;

    }
    if (this.direction === $T0A().Right) {
      this.currentAnimation = (((this.currentAnimation | 0) + 1) | 0);
    }
    if ((this.previousAnimation | 0) !== (this.currentAnimation | 0)) {
      this.timeSinceLastFrame = 0;
      this.currentFrame = 0;
    }
    this.animationSourceRect.X = Math.imul(64, this.currentFrame);
    this.animationSourceRect.Y = Math.imul(64, this.currentAnimation);
    this.previousAnimation = (this.currentAnimation | 0);
  }; 

  function Enemy_CalculateMovement () {
    this.displayRect.X = ((this.get_Position().X) | 0);
    this.displayRect.Y = ((this.get_Position().Y) | 0);
    this.collider.X = ((((this.get_Position().X) | 0) + (this.XcolliderOffset | 0)) | 0);
    this.collider.Y = ((((this.get_Position().Y) | 0) + (this.YcolliderOffset | 0)) | 0);
    this.collider.Width = (this.colliderWidth | 0);
    this.collider.Height = (this.colliderHeight | 0);
  }; 

  function Enemy_Collision (colliderList) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06;
    this.amountToMove = this.negAmountToMove = $T02().get_Zero().MemberwiseClone();
    this.testCollider.Width = (this.colliderWidth | 0);
    this.testCollider.Height = (this.colliderHeight | 0);

    for (var a$0 = colliderList._items, i$0 = 0, l$0 = (colliderList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      if (!(!$T0E().op_Inequality(
            $IM00().Call(s, null), 
            $T0E().get_Empty()
          ) || 
          !$T0E().op_Inequality($IM00().Call(s, null), this.collider) || (+$S07().CallStatic($T04(), "DistanceSquared", null, this.collider.MemberwiseClone(), $IM00().Call(s, null).MemberwiseClone()) > 0))) {
        this.collidedContains = (this.collided).Contains(s);
        if ($T04().IsTouching(this.collider, $IM00().Call(s, null), $T19().Bottom)) {
          if (!this.collidedContains) {
            (this.collided).Add(s);
            (this.sideCollided).Add($T19().Bottom);
            (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) + 1) | 0));
            if (!((+this.negAmountToMove.Y <= +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0))) || ((+this.velocity.Y * +$T04().get_DeltaTime()) < +(-+((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0)))))) {
              this.negAmountToMove.Y = +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0));
            }
          } else if (+this.negAmountToMove.Y > +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0))) {
            this.negAmountToMove.Y = +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0));
          }
        }
        if ($T04().IsTouching(this.collider, $IM00().Call(s, null), $T19().Right)) {
          if (!this.collidedContains) {
            (this.collided).Add(s);
            (this.sideCollided).Add($T19().Right);
            (this.walled).set_Right(((((this.walled).get_Right() | 0) + 1) | 0));
            if (!((+this.negAmountToMove.X <= +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0))) || ((+this.velocity.X * +$T04().get_DeltaTime()) < +(-+((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0)))))) {
              this.negAmountToMove.X = +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0));
            }
          } else if (+this.negAmountToMove.X > +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0))) {
            this.negAmountToMove.X = +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0));
          }
        }
        if ($T04().IsTouching(this.collider, $IM00().Call(s, null), $T19().Left)) {
          if (!this.collidedContains) {
            (this.collided).Add(s);
            (this.sideCollided).Add($T19().Left);
            (this.walled).set_Left(((((this.walled).get_Left() | 0) + 1) | 0));
            if (!((+this.amountToMove.X >= +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0))) || ((+this.velocity.X * +$T04().get_DeltaTime()) > +(-+((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0)))))) {
              this.amountToMove.X = +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0));
            }
          } else if (+this.amountToMove.X < +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0))) {
            this.amountToMove.X = +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0));
          }
        }
        if ($T04().IsTouching(this.collider, $IM00().Call(s, null), $T19().Top)) {
          if (!this.collidedContains) {
            (this.collided).Add(s);
            (this.sideCollided).Add($T19().Top);
            (this.walled).set_Top(((((this.walled).get_Top() | 0) + 1) | 0));
            if (!((+this.amountToMove.Y >= +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0))) || ((+this.velocity.Y * +$T04().get_DeltaTime()) > +(-+((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0)))))) {
              this.amountToMove.Y = +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0));
            }
          } else if (+this.amountToMove.Y < +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0))) {
            this.amountToMove.Y = +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0));
          }
        }
      }
    }
    if (!((((this.walled).get_Left() | 0) !== 1) || ((this.input.X | 0) >= 0))) {
      var climbamount = ((((this.collider).get_Bottom() | 0) - (($IM00().Call((this.collided).get_Item((this.sideCollided).IndexOf($T19().Left)), null)).get_Top() | 0)) | 0);
      if (climbamount <= (this.climbablePixels | 0)) {
        this.position.Y = +this.position.Y - +climbamount;
        this.amountToMove = this.negAmountToMove = $T02().get_Zero().MemberwiseClone();
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), [this, " on ramp, moved ", $T05().$Box(climbamount), " pixels. Timer:", $T1A().$Box($T04().get_Timer())])));
      }
    }
    if (!((((this.walled).get_Right() | 0) !== 1) || ((this.input.X | 0) <= 0))) {
      climbamount = ((((this.collider).get_Bottom() | 0) - (($IM00().Call((this.collided).get_Item((this.sideCollided).IndexOf($T19().Right)), null)).get_Top() | 0)) | 0);
      if (climbamount <= (this.climbablePixels | 0)) {
        this.position.Y = +this.position.Y - +climbamount;
        this.amountToMove = this.negAmountToMove = $T02().get_Zero().MemberwiseClone();
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), [this, " on ramp, moved ", $T05().$Box(climbamount), " pixels. Timer:", $T1A().$Box($T04().get_Timer())])));
      }
    }
    if (+this.amountToMove.X === 0) {
      this.amountToMove.X = +this.negAmountToMove.X;
    } else if (!((+this.negAmountToMove.X === 0) || (-this.negAmountToMove.X >= +this.amountToMove.X))) {
      this.amountToMove.X = +this.negAmountToMove.X;
    }
    if (+this.amountToMove.Y === 0) {
      this.amountToMove.Y = +this.negAmountToMove.Y;
    } else if (!((+this.negAmountToMove.Y === 0) || (-this.negAmountToMove.Y >= +this.amountToMove.Y))) {
      this.amountToMove.Y = +this.negAmountToMove.Y;
    }
    var Y = false;
    var X = false;
    if (!(((Math.abs(this.amountToMove.Y)) > (Math.abs(this.amountToMove.X))) || (+this.amountToMove.Y === 0))) {
      this.testPos.Y = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.Y))));
      this.testPos.X = +this.position.X;
      this.testPos.Y = +this.testPos.Y + +this.amountToMove.Y;
      Y = true;
    } else if (+this.amountToMove.X !== 0) {
      this.testPos.X = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.X))));
      this.testPos.Y = +this.position.Y;
      this.testPos.X = +this.testPos.X + +this.amountToMove.X;
      X = true;
    }
    var pass = true;
    this.testCollider.X = ((((this.testPos.X) | 0) + (this.XcolliderOffset | 0)) | 0);
    this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.YcolliderOffset | 0)) | 0);

    for (var a$1 = this.collided._items, i$1 = 0, l$1 = (this.collided._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      s = a$1[i$1];
      if (($IM00().Call(s, null)).Intersects(this.testCollider)) {
        pass = false;
      }
    }
    if (pass) {
      if (Y) {
        this.amountToMove.X = 0;
      } else if (X) {
        this.amountToMove.Y = 0;
      }
    } else {
      if ($T02().op_Inequality(this.amountToMove, $T02().get_Zero())) {
        $T04().WriteLine(JSIL.ConcatString("this: ", this.toString()));
        $T04().WriteLine(JSIL.ConcatString("        pass: ", $T1C().$Box(pass)));
        $T04().WriteLine(JSIL.ConcatString("amountToMove: ", this.amountToMove));
        $T04().WriteLine(JSIL.ConcatString("    velocity: ", this.velocity));
        $T04().WriteLine(JSIL.ConcatString("  position: ", this.position));
        $T04().WriteLine(JSIL.ConcatString("     testPos: ", this.testPos));
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   pcollider: T:", $T05().$Box((this.collider).get_Top()), " B:", $T05().$Box((this.collider).get_Bottom()), " L:", $T05().$Box((this.collider).get_Left()), " R:", $T05().$Box((this.collider).get_Right())])));
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   tcollider: T:", $T05().$Box((this.testCollider).get_Top()), " B:", $T05().$Box((this.testCollider).get_Bottom()), " L:", $T05().$Box((this.testCollider).get_Left()), " R:", $T05().$Box((this.testCollider).get_Right())])));

        for (var a$2 = this.collided._items, i$2 = 0, l$2 = (this.collided._size | 0); i$2 < l$2; ($temp02 = i$2, 
            i$2 = ((i$2 + 1) | 0), 
            $temp02)) {
          s = a$2[i$2];
          $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   scollider: T:", $T05().$Box(($IM00().Call(s, null)).get_Top()), " B:", $T05().$Box(($IM00().Call(s, null)).get_Bottom()), " L:", $T05().$Box(($IM00().Call(s, null)).get_Left()), " R:", $T05().$Box(($IM00().Call(s, null)).get_Right())])));
        }
        $T04().WriteLine("after1--");
      }
      pass = true;
      if (Y) {
        this.testPos.X = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.X))));
        this.testPos.Y = +this.position.Y;
        this.testPos.X = +this.testPos.X + +this.amountToMove.X;
        this.testCollider.X = ((((this.testPos.X) | 0) + (this.XcolliderOffset | 0)) | 0);
        this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.YcolliderOffset | 0)) | 0);

        for (var a$3 = this.collided._items, i$3 = 0, l$3 = (this.collided._size | 0); i$3 < l$3; ($temp03 = i$3, 
            i$3 = ((i$3 + 1) | 0), 
            $temp03)) {
          s = a$3[i$3];
          if (($IM00().Call(s, null)).Intersects(this.testCollider)) {
            pass = false;
          }
        }
        if (pass) {
          this.amountToMove.Y = 0;
        }
      } else if (X) {
        this.testPos.Y = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.Y))));
        this.testPos.X = +this.position.X;
        this.testPos.Y = +this.testPos.Y + +this.amountToMove.Y;
        this.testCollider.X = ((((this.testPos.X) | 0) + (this.XcolliderOffset | 0)) | 0);
        this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.YcolliderOffset | 0)) | 0);

        for (var a$4 = this.collided._items, i$4 = 0, l$4 = (this.collided._size | 0); i$4 < l$4; ($temp04 = i$4, 
            i$4 = ((i$4 + 1) | 0), 
            $temp04)) {
          s = a$4[i$4];
          if (($IM00().Call(s, null)).Intersects(this.testCollider)) {
            pass = false;
          }
        }
        if (pass) {
          this.amountToMove.X = 0;
        }
      }
      if ($T02().op_Inequality(this.amountToMove, $T02().get_Zero())) {
        $T04().WriteLine(JSIL.ConcatString("        pass: ", $T1C().$Box(pass)));
        $T04().WriteLine(JSIL.ConcatString("amountToMove: ", this.amountToMove));
        $T04().WriteLine(JSIL.ConcatString("    velocity: ", this.velocity));
        $T04().WriteLine(JSIL.ConcatString("  position: ", this.position));
        $T04().WriteLine(JSIL.ConcatString("     testPos: ", this.testPos));
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   pcollider: T:", $T05().$Box((this.collider).get_Top()), " B:", $T05().$Box((this.collider).get_Bottom()), " L:", $T05().$Box((this.collider).get_Left()), " R:", $T05().$Box((this.collider).get_Right())])));
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   tcollider: T:", $T05().$Box((this.testCollider).get_Top()), " B:", $T05().$Box((this.testCollider).get_Bottom()), " L:", $T05().$Box((this.testCollider).get_Left()), " R:", $T05().$Box((this.testCollider).get_Right())])));

        for (var a$5 = this.collided._items, i$5 = 0, l$5 = (this.collided._size | 0); i$5 < l$5; ($temp05 = i$5, 
            i$5 = ((i$5 + 1) | 0), 
            $temp05)) {
          s = a$5[i$5];
          $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   scollider: T:", $T05().$Box(($IM00().Call(s, null)).get_Top()), " B:", $T05().$Box(($IM00().Call(s, null)).get_Bottom()), " L:", $T05().$Box(($IM00().Call(s, null)).get_Left()), " R:", $T05().$Box(($IM00().Call(s, null)).get_Right())])));
        }
        $T04().WriteLine("after2--");
      }
    }
    if ($T02().op_Inequality(this.amountToMove, $T02().get_Zero())) {
      $T04().WriteLine(JSIL.ConcatString("    velocity: ", this.velocity));
    }
    this.position = $T02().op_Addition(this.position.MemberwiseClone(), this.amountToMove);
    this.CalculateMovement();

    for (var i = 0; i < ((this.collided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T04().IsTouching(
          this.collider, 
          $IM00().Call((this.collided).get_Item(i), null), 
          (this.sideCollided).get_Item(i)
        )) {
        switch (((this.sideCollided).get_Item(i)).valueOf()) {
          case 0: 
            (this.walled).set_Top(((((this.walled).get_Top() | 0) - 1) | 0));
            (this.collided).RemoveAt(i);
            (this.sideCollided).RemoveAt(i);
            i = ((i - 1) | 0);
            break;

          case 1: 
            (this.walled).set_Right(((((this.walled).get_Right() | 0) - 1) | 0));
            (this.collided).RemoveAt(i);
            (this.sideCollided).RemoveAt(i);
            i = ((i - 1) | 0);
            break;

          case 2: 
            (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) - 1) | 0));
            (this.collided).RemoveAt(i);
            (this.sideCollided).RemoveAt(i);
            i = ((i - 1) | 0);
            break;

          case 3: 
            (this.walled).set_Left(((((this.walled).get_Left() | 0) - 1) | 0));
            (this.collided).RemoveAt(i);
            (this.sideCollided).RemoveAt(i);
            i = ((i - 1) | 0);
            break;

        }
      }
    }
    if ($T02().op_Inequality(this.amountToMove, $T02().get_Zero())) {
      $T04().WriteLine(JSIL.ConcatString("        pass: ", $T1C().$Box(pass)));
      $T04().WriteLine(JSIL.ConcatString("amountToMove: ", this.amountToMove));
      $T04().WriteLine(JSIL.ConcatString("    velocity: ", this.velocity));
      $T04().WriteLine(JSIL.ConcatString("  position: ", this.position));
      $T04().WriteLine(JSIL.ConcatString("     testPos: ", this.testPos));
      $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   pcollider: T:", $T05().$Box((this.collider).get_Top()), " B:", $T05().$Box((this.collider).get_Bottom()), " L:", $T05().$Box((this.collider).get_Left()), " R:", $T05().$Box((this.collider).get_Right())])));
      $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   tcollider: T:", $T05().$Box((this.testCollider).get_Top()), " B:", $T05().$Box((this.testCollider).get_Bottom()), " L:", $T05().$Box((this.testCollider).get_Left()), " R:", $T05().$Box((this.testCollider).get_Right())])));

      for (var a$6 = this.collided._items, i$6 = 0, l$6 = (this.collided._size | 0); i$6 < l$6; ($temp06 = i$6, 
          i$6 = ((i$6 + 1) | 0), 
          $temp06)) {
        s = a$6[i$6];
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["   scollider: T:", $T05().$Box(($IM00().Call(s, null)).get_Top()), " B:", $T05().$Box(($IM00().Call(s, null)).get_Bottom()), " L:", $T05().$Box(($IM00().Call(s, null)).get_Left()), " R:", $T05().$Box(($IM00().Call(s, null)).get_Right())])));
      }
      $T04().WriteLine("done--");
      $T04().WriteLine();
    }
    if (!((((this.walled).get_Top() | 0) <= 0) || (+this.velocity.Y >= 0))) {
      this.velocity.Y = 0;
      this.position.Y = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.Y))));
    }
    if (!((((this.walled).get_Bottom() | 0) <= 0) || (+this.velocity.Y <= 0))) {
      this.velocity.Y = 0;
      this.position.Y = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.Y))));
    }
    if (!((((this.walled).get_Left() | 0) <= 0) || (+this.velocity.X >= 0))) {
      this.velocity.X = 0;
      this.position.X = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.X))));
    }
    if (!((((this.walled).get_Right() | 0) <= 0) || (+this.velocity.X <= 0))) {
      this.velocity.X = 0;
      this.position.X = +($S08().CallStatic($T1E(), "op_Explicit", null, $S09().CallStatic($T1D(), "Round", null, $S0A().CallStatic($T1E(), "op_Explicit", null, this.position.X))));
    }
  }; 

  function Enemy_Combat (player) {
    var $temp00;
    this.velocity.X = +$S0B().CallStatic($T04(), "Lerp", null, this.velocity.X, 0, +$thisType.movementLerpBuildup * +$T04().get_DeltaTime());
    this.jumpTime = 0;
    if (+this.attackCooldownTimer <= 0) {
      this.attackID = (($temp00 = (this.attackIDtracker | 0), 
        this.attackIDtracker = (((this.attackIDtracker | 0) + 1) | 0), 
        $temp00) | 0);
      this.attackCooldownTimer = +this.attackCooldown;
      this.attacking = $T16().Attack1;
    }
    if (this.attacking !== $T16().No) {
      this.Hitbox();
      if ((this.attackCollider).Intersects(player.get_Collider())) {
        player.Hurt(this.attackDamage);
      }
    } else {
      this.attackCollider = $T0E().get_Empty().MemberwiseClone();
      this.attackDamage = 0;
      this.attackID = 0;
    }
    return true;
  }; 

  function Enemy_Draw (sb) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch ($T04().debug) {
            case 1: 
              $label0 = 1 /* goto IL_6D */ ;
              continue $labelgroup0;

            case 2: 
              break;

            case 3: 
              break;

            case 4: 
              break;

            case 5: 
              break;

            default: 
              break $labelgroup0;

          }
          (this.animationFrame).Update((this.currentFrame).toString(), true);
          (this.animationFrame).Draw(sb, ($S0C().CallStatic($T02(), "op_Multiply", null, this.position.MemberwiseClone(), $T04().screenScale).MemberwiseClone()).ToPoint());

          $label0 = 1 /* goto IL_6D */ ;
          continue $labelgroup0;
        case 1: /* IL_6D */ 
          if ($T0E().op_Inequality(this.attackCollider, $T0E().get_Empty())) {
            $S0D().CallStatic($T20(), "Draw", null, sb, this.attackCollider.MemberwiseClone(), $T08().Color$Magenta$value.MemberwiseClone(), +this.depth + 0.001);
          }
          $S0E().CallStatic($T20(), "Draw", null, sb, this.collider.MemberwiseClone(), $T08().Color$Magenta$value.MemberwiseClone(), true);
          break $labelgroup0;

      }
    }
    /* Original label IL_B9 */ 
    $S0F().CallVirtual("Draw", null, sb, 
      this.tex, 
      $S0C().CallStatic($T02(), "op_Multiply", null, this.position.MemberwiseClone(), $T04().screenScale).MemberwiseClone(), 
      this.animationSourceRect.MemberwiseClone(), 
      $T08().Color$White$value.MemberwiseClone(), 
      0, 
      $T02().get_Zero().MemberwiseClone(), 
      $T04().screenScale, 
      $T21().None, 
      this.depth
    );
  }; 

  function Enemy_Enemy_OnPlayerAttack (AttackCollider, Attack) {
    $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), [this.$name, " response:\nattackCollider:", AttackCollider, " this.collider:", this.collider])));
    if (AttackCollider.Intersects(this.collider)) {
      this.PlayerAttackCollision();
      $T04().WriteLine(JSIL.ConcatString("hit. health remaining:", $T03().$Box(this.health)));
    } else {
      $T04().WriteLine(JSIL.ConcatString("miss. health remaining:", $T03().$Box(this.health)));
    }
    $T04().WriteLine(JSIL.ConcatString(this.$name, " done.\n"));
    return true;
  }; 

  function Enemy_Enemy_OnPlayerShockwave (Origin, RangeSquared, Range, Power) {
    $T04().WriteLine(JSIL.ConcatString(this.$name, " Enemy_OnPlayerShockwave triggered"));
    var DistanceSQR = +$S10().CallStatic($T04(), "DistanceSquared", null, this.collider.MemberwiseClone(), Origin.MemberwiseClone());
    if (DistanceSQR <= +RangeSquared) {
      var Distance = Math.fround(Math.sqrt(DistanceSQR));
      this.Stun((+(((+Range - Distance) / +Range)) * +this.shockwaveStunTime) * +Power);
      if ($S11().CallStatic($T04(), "Directions", null, Origin, (this.collider).get_Center()) === $T0A().Left) {
        this.velocity = $S0C().CallStatic($T02(), "op_Multiply", null, $S0C().CallStatic($T02(), "op_Multiply", null, $S0C().CallStatic($T02(), "op_Multiply", null, $S12().Construct(-this.shockwaveKnockback.X, this.shockwaveKnockback.Y), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass)));
      } else {
        this.velocity = $S0C().CallStatic($T02(), "op_Multiply", null, $S0C().CallStatic($T02(), "op_Multiply", null, $S0C().CallStatic($T02(), "op_Multiply", null, this.shockwaveKnockback.MemberwiseClone(), +Range - Distance).MemberwiseClone(), Power).MemberwiseClone(), +((1 / +this.mass)));
      }
      $T04().WriteLine(JSIL.ConcatString("postcalc velocity:", this.velocity));
    }
    $T04().WriteLine(JSIL.ConcatString(this.$name, " done.\n"));
    return true;
  }; 

  function Enemy_get_ActiveEffects () {
    return this.activeEffects;
  }; 

  function Enemy_get_AIenabled () {
    return this.aiEnabled;
  }; 

  function Enemy_get_Collider () {
    return this.collider;
  }; 

  function Enemy_get_Health () {
    return this.health;
  }; 

  function Enemy_get_Mass () {
    return this.mass;
  }; 

  function Enemy_get_MaxHealth () {
    return this.maxHealth;
  }; 

  function Enemy_get_Name () {
    return this.$name;
  }; 

  function Enemy_get_Position () {
    return this.position;
  }; 

  function Enemy_get_SpeedModifier () {
    return this.speedModifier;
  }; 

  function Enemy_get_StunTime () {
    return this.stunned;
  }; 

  function Enemy_get_Velocity () {
    return this.velocity;
  }; 

  function Enemy_get_Walled () {
    return this.walled;
  }; 

  function Enemy_Hitbox () {
    if ((this.lastAttackID | 0) !== (this.attackID | 0)) {
      this.lastAttackID = (this.attackID | 0);
      this.attackDamage = +this.attack1Damage;
      if (this.direction === $T0A().Left) {
        this.attackCollider.X = ((((this.collider).get_Center().X | 0) - (this.attackColliderWidth | 0)) | 0);
        this.attackCollider.Y = ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0);
        this.attackCollider.Width = (this.attackColliderWidth | 0);
        this.attackCollider.Height = (this.attackColliderHeight | 0);
      } else {
        this.attackCollider.X = ((this.collider).get_Center().X | 0);
        this.attackCollider.Y = ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0);
        this.attackCollider.Width = (this.attackColliderWidth | 0);
        this.attackCollider.Height = (this.attackColliderHeight | 0);
      }
    } else if ($T0E().op_Inequality(this.attackCollider, $T0E().get_Empty())) {
      this.attackCollider = $T0E().get_Empty().MemberwiseClone();
      this.attackDamage = 0;
      this.attackCooldownTimer = +this.attackCooldown;
    }
  }; 

  function Enemy_Hurt (damage) {
    this.health = +this.health - +damage;
  }; 

  function Enemy_Knockback (knockbackDirection, strength) {
    if (knockbackDirection === $T0A().Left) {
      this.velocity.Y = +this.velocity.Y + (-25 * +strength);
      this.velocity.X = +this.velocity.X + (-200 * +strength);
    } else {
      this.velocity.Y = +this.velocity.Y + (-25 * +strength);
      this.velocity.X = +this.velocity.X + (200 * +strength);
    }
  }; 

  function Enemy_Movement () {
    if (!((((this.walled).get_Right() | 0) <= 0) || (+this.velocity.X <= 0))) {
      this.velocity.X = 0;
    }
    if (!((((this.walled).get_Left() | 0) <= 0) || (+this.velocity.X >= 0))) {
      this.velocity.X = 0;
    }
    if (+this.jumpTime > 0) {
    }
    if (!((((this.walled).get_Top() | 0) <= 0) || (+this.velocity.Y >= 0))) {
      this.velocity.Y = 0;
      this.jumpTime = 0;
    }
    if (!((((this.walled).get_Bottom() | 0) > 0) || (+this.jumpTime > 0))) {
      this.velocity.Y = +this.velocity.Y + ((+$T04().gravity * +this.mass) * +$T04().get_DeltaTime());
    }
    this.position = $T02().op_Addition(this.position.MemberwiseClone(), $S0C().CallStatic($T02(), "op_Multiply", null, 
        $S0C().CallStatic($T02(), "op_Multiply", null, this.velocity.MemberwiseClone(), this.mass).MemberwiseClone(), 
        $T04().get_DeltaTime()
      ));
  }; 

  function Enemy_Persue (player) {
    this.input = $T09().get_Zero().MemberwiseClone();
    player.heading = ($T09().op_Subtraction(
        (player.get_Collider()).get_Center(), 
        (this.collider).get_Center()
      ).MemberwiseClone()).ToVector2();
    if (+player.heading.X > 0) {
      if (((this.walled).get_Right() | 0) <= 0) {
        this.input.X = (((this.input.X | 0) + 1) | 0);
        this.direction = $T0A().Right;
      } else if (((this.walled).get_Bottom() | 0) > 0) {
        this.input.X = (((this.input.X | 0) + 1) | 0);
        this.direction = $T0A().Right;
        this.jumpTime = +this.jumpTimeMax;
      }
    } else if (+player.heading.X < 0) {
      if (((this.walled).get_Left() | 0) <= 0) {
        this.input.X = (((this.input.X | 0) - 1) | 0);
        this.direction = $T0A().Left;
      } else if (((this.walled).get_Bottom() | 0) > 0) {
        this.input.X = (((this.input.X | 0) - 1) | 0);
        this.direction = $T0A().Left;
        this.jumpTime = +this.jumpTimeMax;
      }
    }
    if (((this.walled).get_Bottom() | 0) > 0) {
      this.velocity.X = +$S0B().CallStatic($T04(), "Lerp", null, this.velocity.X, (+(this.input.X) * +this.speed) * +this.speedModifier, +$thisType.movementLerpBuildup * +$T04().get_DeltaTime());
    } else if (+this.velocity.X === 0) {
      this.velocity.X = (+(this.input.X) * 0.1) * +this.speed;
    }
    return true;
  }; 

  function Enemy_PlayerAttackCollision () {
    var $temp00;
    this.lastHitByAttackID = ($T04().jamie.attackID | 0);
    $T04().jamie.attackHit = true;
    this.Hurt($T04().jamie.attackDamage);
    this.Stun(0.75);
    var distanceSqr = +$S13().CallStatic($T04(), "DistanceSquared", null, 
      $T04().jamie.get_Collider().get_Center(), 
      (this.get_Collider()).get_Center()
    );
    if ($T04().jamie.direction === $T0A().Left) {
      this.velocity.Y = -25;
      this.velocity.X = 0;
      if (distanceSqr < 1000) {
        this.velocity.X = +this.velocity.X - 150;
      } else {
        this.velocity.X = +this.velocity.X - +((22500 / distanceSqr));
      }
    } else {
      this.velocity.Y = -25;
      this.velocity.X = 0;
      if (distanceSqr < 1000) {
        this.velocity.X = +this.velocity.X + 150;
      } else {
        this.velocity.X = +this.velocity.X + +((22500 / distanceSqr));
      }
    }

    for (var a$0 = $T04().jamie.enchantList._items, i$0 = 0, l$0 = ($T04().jamie.enchantList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var enchant = a$0[i$0];
      enchant.AddEffect(this);
    }
  }; 

  function Enemy_PlayerCollision (player, enemy) {
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T22().Enter(obj = this.attackPlayerLock, /* ref */ flag);
      if (+player.invulnerable <= 0) {
        if (!(!$T0E().op_Inequality(enemy.collider, $T0E().get_Empty()) || !(player.get_Collider()).Intersects(enemy.collider))) {
          if (!player.shielded) {
            if (+player.velocity.X >= 0) {
              player.velocity.X = -player.hurtVelocity.X;
              player.velocity.Y = +player.hurtVelocity.Y;
            } else {
              player.velocity = player.hurtVelocity.MemberwiseClone();
            }
          }
          player.Hurt(20);
          player.invulnerable = +player.invulnerableMaxTime;
        }
      }
    } finally {
      if (flag.get()) {
        $T22().Exit(obj);
      }
    }
  }; 

  function Enemy_Respawn (initialPos) {
    this.position = $S0C().CallStatic($T02(), "op_Multiply", null, initialPos.MemberwiseClone(), 32);
    this.position.X = +this.position.X - +(this.XcolliderOffset);
    this.position.Y = +this.position.Y - +(this.YcolliderOffset);
    this.velocity = $T02().get_Zero().MemberwiseClone();
    this.health = +this.maxHealth;
    this.CalculateMovement();
  }; 

  function Enemy_set_AIenabled (value) {
    this.aiEnabled = value;
  }; 

  function Enemy_set_Collider (value) {
    this.collider = value.MemberwiseClone();
  }; 

  function Enemy_set_Health (value) {
    this.health = +value;
  }; 

  function Enemy_set_MaxHealth (value) {
    this.maxHealth = +value;
  }; 

  function Enemy_set_Position (value) {
    this.position = value.MemberwiseClone();
  }; 

  function Enemy_set_SpeedModifier (value) {
    this.speedModifier = +value;
  }; 

  function Enemy_set_Velocity (value) {
    this.velocity = value.MemberwiseClone();
  }; 

  function Enemy_Stun (duration) {
    this.stunned = +this.stunned + +duration;
    this.AIactivity = $T0D().Stunned;
    this.attackCooldownTimer = +this.attackCooldownTimer + 0.5;
  }; 

  function Enemy_ThreadPoolCallback (threadContext) {
    try {
      this.Update();
      if (!((+this.health > 0) && (+this.position.Y <= 5000))) {
        $T04().KillEnemy(this);
      }
    } finally {
      if (($S14().CallStatic($T23(), "Decrement", null, /* ref */ new JSIL.MemberReference($T04(), "pendingThreads")) | 0) <= 0) {
        $T04().doneEvent.Set();
      }
    }
  }; 

  function Enemy_toString () {
    return this.$name;
  }; 

  function Enemy_Update () {
    if (+this.stunned <= 0) {
      if (+this.jumpTime > 0) {
        this.velocity.Y = -250;
        this.jumpTime = +this.jumpTime - +$T04().get_DeltaTime();
        if (+this.jumpTime <= 0) {
          this.jumpTime = 0;
        }
      }
      this.distanceToPlayerSqr = +$S13().CallStatic($T04(), "DistanceSquared", null, 
        $T04().jamie.get_Collider().get_Center(), 
        (this.get_Collider()).get_Center()
      );
      if (+this.distanceToPlayerSqr <= +(this.combatCheckDistanceSqr)) {
        this.AIactivity = $T0D().Combat;
      } else if (+this.distanceToPlayerSqr <= +(this.persueCheckDistanceSqr)) {
        this.AIactivity = $T0D().Persue;
      } else {
        this.AIactivity = $T0D().Wander;
      }
      this.attackCooldownTimer = +this.attackCooldownTimer - +$T04().get_DeltaTime();
      if (this.get_AIenabled()) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var aIactivity = this.AIactivity;
              if (aIactivity !== $T0D().Wander) {
                switch (aIactivity.valueOf()) {
                  case 3: 
                    this.Combat($T04().jamie);
                    break $labelgroup0;

                  case 5: 
                    this.Persue($T04().jamie);
                    break $labelgroup0;

                }
                this.Wander();
              } else {
                this.Wander();
              }
              break $labelgroup0;

          }
        }
      }
    } else {
      this.stunned = +this.stunned - +$T04().get_DeltaTime();
      if (!((((this.walled).get_Bottom() | 0) <= 0) || ((Math.abs(this.velocity.X)) <= 0))) {
        this.velocity.X = +$S0B().CallStatic($T04(), "Lerp", null, this.velocity.X, 0, +$thisType.movementLerpBuildup * +$T04().get_DeltaTime());
      }
    }

    for (var i = 0; i < ((this.activeEffects).get_Count() | 0); i = ((i + 1) | 0)) {
      if (((this.activeEffects).get_Item(i)).ApplyEffect(this)) {
        (this.activeEffects).RemoveAt(i);
        i = ((i - 1) | 0);
      }
    }
    this.Movement();
    this.CalculateMovement();
    this.Animate();
    this.Collision($T04().collisionObjects);
    return true;
  }; 

  function Enemy_UpgradeEffect (index, duration) {
    if (((this.activeEffects).get_Count() | 0) > (index | 0)) {
      (this.activeEffects).get_Item(index).strength = ((((this.activeEffects).get_Item(index).strength | 0) + 1) | 0);
      (this.activeEffects).get_Item(index).effectDuration = +duration;
    }
  }; 

  function Enemy_Wander () {
    if (+this.wanderTime > 0) {
      this.wanderTime = +this.wanderTime - +$T04().get_DeltaTime();
    } else {
      if (this.previouslyWandered) {
        this.input = $T09().get_Zero().MemberwiseClone();
        this.previouslyWandered = false;
      } else {
        if (!((((this.walled).get_Right() | 0) <= 0) || (((this.walled).get_Right() | 0) > 1))) {
          if (((this.walled).get_Right() | 0) > 0) {
            this.input.X = (((this.input.X | 0) + 1) | 0);
            this.direction = $T0A().Right;
            this.jumpTime = +this.jumpTimeMax;
          } else {
            this.input.X = (((this.input.X | 0) - 1) | 0);
            this.direction = $T0A().Left;
          }
        } else if (!((((this.walled).get_Left() | 0) <= 0) || (((this.walled).get_Left() | 0) > 1))) {
          if (((this.walled).get_Left() | 0) > 0) {
            this.input.X = (((this.input.X | 0) - 1) | 0);
            this.direction = $T0A().Left;
            this.jumpTime = +this.jumpTimeMax;
          } else {
            this.input.X = (((this.input.X | 0) + 1) | 0);
            this.direction = $T0A().Right;
          }
        } else if ($T04().get_RandomFloat() > 0.5) {
          this.input.X = (((this.input.X | 0) - 1) | 0);
          this.direction = $T0A().Left;
        } else {
          this.input.X = (((this.input.X | 0) + 1) | 0);
          this.direction = $T0A().Right;
        }
        this.previouslyWandered = true;
      }
      this.wanderTime = +$T04().get_RandomFloat() + 0.5;
    }
    if (((this.walled).get_Bottom() | 0) > 0) {
      this.velocity.X = +$S0B().CallStatic($T04(), "Lerp", null, this.velocity.X, (+(this.input.X) * +this.wanderSpeed) * +this.speedModifier, +$thisType.movementLerpBuildup * +$T04().get_DeltaTime());
    } else if (+this.velocity.X === 0) {
      this.velocity.X = (+(this.input.X) * 0.1) * +this.speed;
    }
    return true;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Enemy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ]), 
      Enemy__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "AddEffect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Enchant")), 
      Enemy_AddEffect
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Void, 
      Enemy_Animate
    );

    $.Method({Static:false, Public:true }, "CalculateMovement", 
      JSIL.MethodSignature.Void, 
      Enemy_CalculateMovement
    );

    $.Method({Static:false, Public:true }, "Collision", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")])), 
      Enemy_Collision
    );

    $.Method({Static:false, Public:true }, "Combat", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Player")]), 
      Enemy_Combat
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Enemy_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Enemy_OnPlayerAttack", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Attacking")]), 
      Enemy_Enemy_OnPlayerAttack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Enemy_OnPlayerShockwave", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Int32, 
          $.Int32, $.Single
        ]), 
      Enemy_Enemy_OnPlayerShockwave
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ActiveEffects", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")])), 
      Enemy_get_ActiveEffects
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AIenabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enemy_get_AIenabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Collider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Enemy_get_Collider
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Health", 
      JSIL.MethodSignature.Return($.Single), 
      Enemy_get_Health
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Mass", 
      JSIL.MethodSignature.Return($.Single), 
      Enemy_get_Mass
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_MaxHealth", 
      JSIL.MethodSignature.Return($.Single), 
      Enemy_get_MaxHealth
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Enemy_get_Name
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Enemy_get_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_SpeedModifier", 
      JSIL.MethodSignature.Return($.Single), 
      Enemy_get_SpeedModifier
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_StunTime", 
      JSIL.MethodSignature.Return($.Single), 
      Enemy_get_StunTime
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Enemy_get_Velocity
    );

    $.Method({Static:false, Public:true }, "get_Walled", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Wall")), 
      Enemy_get_Walled
    );

    $.Method({Static:false, Public:true }, "Hitbox", 
      JSIL.MethodSignature.Void, 
      Enemy_Hitbox
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Hurt", 
      JSIL.MethodSignature.Action($.Single), 
      Enemy_Hurt
    );

    $.Method({Static:false, Public:true }, "Knockback", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Irbis.Direction"), $.Single]), 
      Enemy_Knockback
    );

    $.Method({Static:false, Public:true }, "Movement", 
      JSIL.MethodSignature.Void, 
      Enemy_Movement
    );

    $.Method({Static:false, Public:true }, "Persue", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Player")]), 
      Enemy_Persue
    );

    $.Method({Static:false, Public:true }, "PlayerAttackCollision", 
      JSIL.MethodSignature.Void, 
      Enemy_PlayerAttackCollision
    );

    $.Method({Static:false, Public:true }, "PlayerCollision", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Player"), $.Type]), 
      Enemy_PlayerCollision
    );

    $.Method({Static:false, Public:true }, "Respawn", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Enemy_Respawn
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_AIenabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      Enemy_set_AIenabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Collider", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Enemy_set_Collider
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Health", 
      JSIL.MethodSignature.Action($.Single), 
      Enemy_set_Health
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_MaxHealth", 
      JSIL.MethodSignature.Action($.Single), 
      Enemy_set_MaxHealth
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Enemy_set_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_SpeedModifier", 
      JSIL.MethodSignature.Action($.Single), 
      Enemy_set_SpeedModifier
    );

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Enemy_set_Velocity
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Stun", 
      JSIL.MethodSignature.Action($.Single), 
      Enemy_Stun
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ThreadPoolCallback", 
      JSIL.MethodSignature.Action($.Object), 
      Enemy_ThreadPoolCallback
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Enemy_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enemy_Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UpgradeEffect", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      Enemy_UpgradeEffect
    );

    $.Method({Static:false, Public:true }, "Wander", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enemy_Wander
    );

    $.Field({Static:false, Public:false}, "collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "walled", $asm00.TypeRef("Wall"));

    $.Field({Static:false, Public:false}, "health", $.Single);

    $.Field({Static:false, Public:false}, "maxHealth", $.Single);

    $.Field({Static:false, Public:false}, "speedModifier", $.Single);

    $.Field({Static:false, Public:false}, "activeEffects", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")]));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:true }, "aiEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "mass", $.Single);

    $.Field({Static:false, Public:false}, "collidedContains", $.Boolean);

    $.Field({Static:false, Public:true }, "speed", $.Single);

    $.Field({Static:false, Public:true }, "defaultSpeed", $.Single);

    $.Field({Static:false, Public:false}, "climbablePixels", $.Int32);

    $.Field({Static:false, Public:false}, "tex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "displayRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "animationSourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "testCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "XcolliderOffset", $.Int32);

    $.Field({Static:false, Public:true }, "YcolliderOffset", $.Int32);

    $.Field({Static:false, Public:true }, "colliderWidth", $.Int32);

    $.Field({Static:false, Public:true }, "colliderHeight", $.Int32);

    $.Field({Static:false, Public:true }, "animationFrame", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "depth", $.Single);

    $.Field({Static:false, Public:true }, "stunned", $.Single);

    $.Field({Static:false, Public:false}, "wanderSpeed", $.Single);

    $.Field({Static:false, Public:false}, "previouslyWandered", $.Boolean);

    $.Field({Static:false, Public:true }, "wanderTime", $.Single);

    $.Field({Static:false, Public:true }, "jumpTime", $.Single);

    $.Field({Static:false, Public:false}, "jumpTimeMax", $.Single);

    $.Field({Static:false, Public:false}, "timeSinceLastFrame", $.Single);

    $.Field({Static:false, Public:false}, "currentFrame", $.Int32);

    $.Field({Static:false, Public:false}, "currentAnimation", $.Int32);

    $.Field({Static:false, Public:false}, "previousAnimation", $.Int32);

    $.Field({Static:false, Public:false}, "animationSpeed", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Field({Static:false, Public:false}, "animationFrames", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "animationNoLoop", $.Boolean);

    $.Field({Static:false, Public:true }, "input", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "shockwaveEffectiveDistance", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveStunTime", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "attacking", $asm00.TypeRef("Irbis.Attacking"));

    $.Field({Static:false, Public:true }, "prevAttacking", $asm00.TypeRef("Irbis.Attacking"));

    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:true }, "location", $asm00.TypeRef("Irbis.Location"));

    $.Field({Static:false, Public:true }, "activity", $asm00.TypeRef("Irbis.Activity"));

    $.Field({Static:false, Public:true }, "AIactivity", $asm00.TypeRef("Irbis.AI"));

    $.Field({Static:false, Public:false}, "amountToMove", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "negAmountToMove", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "testPos", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "lastHitByAttackID", $.Int32);

    $.Field({Static:false, Public:true }, "collisionCheckDistanceSqr", $.Single);

    $.Field({Static:false, Public:true }, "distanceToPlayerSqr", $.Single);

    $.Field({Static:false, Public:true }, "combatCheckDistanceSqr", $.Int32);

    $.Field({Static:false, Public:true }, "persueCheckDistanceSqr", $.Int32);

    $.Field({Static:false, Public:true }, "combat", $.Boolean);

    $.Field({Static:true , Public:true }, "movementLerpBuildup", $.Single, 10);

    $.Field({Static:true , Public:true }, "movementLerpSlowdown", $.Single, 100);

    $.Field({Static:true , Public:true }, "movementLerpAir", $.Single, 5);

    $.Field({Static:false, Public:true }, "attackCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "attackColliderWidth", $.Int32);

    $.Field({Static:false, Public:true }, "attackColliderHeight", $.Int32);

    $.Field({Static:false, Public:true }, "attackID", $.Int32);

    $.Field({Static:false, Public:true }, "lastAttackID", $.Int32);

    $.Field({Static:false, Public:false}, "attackIDtracker", $.Int32);

    $.Field({Static:false, Public:true }, "attackDamage", $.Single);

    $.Field({Static:false, Public:true }, "attack1Damage", $.Single);

    $.Field({Static:false, Public:true }, "attackCooldown", $.Single);

    $.Field({Static:false, Public:true }, "attackCooldownTimer", $.Single);

    $.Field({Static:false, Public:true }, "freezeTimer", $.Single);

    $.Field({Static:false, Public:false}, "attackPlayerLock", $.Object);

    $.Field({Static:false, Public:false}, "collidedLock", $.Object);

    $.Field({Static:false, Public:true }, "collided", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")]));

    $.Field({Static:false, Public:false}, "sideCollided", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.Side")]));


    function Enemy__cctor () {
      $thisType.movementLerpBuildup = 10;
      $thisType.movementLerpSlowdown = 100;
      $thisType.movementLerpAir = 5;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Enemy__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true , Virtual:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Walled", $asm00.TypeRef("Wall"));

    $.Property({Static:false, Public:true , Virtual:true }, "Health", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "MaxHealth", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "SpeedModifier", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "ActiveEffects", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AIenabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Mass", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "StunTime", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Irbis.IEnemy"), 
      /* 1 */ $asm00.TypeRef("Irbis.ICollisionObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Font */ 

(function Font$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm02.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Char)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };


  function Font__ctor$00 (fontTexture, characterHeight, characterWidth, monospace) {
    if (monospace) {
      this.tex = fontTexture;
      this.charHeight = (characterHeight | 0);
      this.charWidth = JSIL.Array.New($T01(), 100);

      for (var i = 99; i >= 0; i = ((i - 1) | 0)) {
        this.charWidth[i] = (characterHeight | 0);
      }
    } else {
      this.tex = fontTexture;
      this.charHeight = (characterHeight | 0);
      this.charWidth = characterWidth;
    }
  }; 

  function Font__ctor$01 (fontTexture, characterHeight) {
    this.tex = fontTexture;
    this.charHeight = (characterHeight | 0);
    this.charWidth = JSIL.Array.New($T01(), 100);

    for (var i = 99; i >= 0; i = ((i - 1) | 0)) {
      this.charWidth[i] = (characterHeight | 0);
    }
  }; 

  function Font_PrintSize (StringToMeasure, maxWidth, monoSpace) {
    var width = 0;
    var maxUsedWidth = 0;
    var maxUsedHeight = 0;
    if (monoSpace) {

      for (var i = 0; i < (StringToMeasure.length | 0); i = ((i + 1) | 0)) {
        var c = (StringToMeasure[i]);
        if (!(!c.Equals("\n") && !c.Equals("\r"))) {
          if (width > maxUsedWidth) {
            maxUsedWidth = width;
          }
          width = 0;
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        } else {
          if (width >= (maxWidth | 0)) {
            if (width > maxUsedWidth) {
              maxUsedWidth = width;
            }
            width = 0;
            maxUsedHeight = ((maxUsedHeight + 1) | 0);
          }
          width = ((width + ((+(this.charHeight) * +$T06().screenScale) | 0)) | 0);
        }
      }
    } else {

      for (i = 0; i < (StringToMeasure.length | 0); i = ((i + 1) | 0)) {
        c = (StringToMeasure[i]);
        if (c.Equals("\n")) {
          if (width > maxUsedWidth) {
            maxUsedWidth = width;
          }
          width = 0;
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        } else {
          if (width >= (maxWidth | 0)) {
            if (width > maxUsedWidth) {
              maxUsedWidth = width;
            }
            width = 0;
            maxUsedHeight = ((maxUsedHeight + 1) | 0);
          }
          width = ((width + ((((+(this.charWidth[$T07().ReturnCharacterIndex(c)]) * +$T06().screenScale) | 0) + 1) | 0)) | 0);
        }
      }
    }
    if (!((maxUsedWidth > 0) && (maxUsedHeight > 0))) {
      var result = $S00().Construct(((width + ((+(this.charHeight) * +$T06().screenScale) | 0)) | 0), Math.imul(((0 + 1) | 0), ((+(this.charHeight) * +$T06().screenScale) | 0)));
    } else {
      result = $S00().Construct(maxUsedWidth, Math.imul(((maxUsedHeight + 1) | 0), ((+(this.charHeight) * +$T06().screenScale) | 0)));
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Font", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Boolean
        ]), 
      Font__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Int32]), 
      Font__ctor$01
    );

    $.Method({Static:false, Public:true }, "PrintSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [
          $.String, $.Int32, 
          $.Boolean
        ]), 
      Font_PrintSize
    );

    $.Field({Static:false, Public:true }, "tex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "charHeight", $.Int32);

    $.Field({Static:false, Public:true }, "charWidth", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Irbis.Difficulty */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.Difficulty", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Easy: 1, 
    Medium: 2, 
    Hard: 3, 
    Insane: 4, 
  }
);

/* enum Irbis.Side */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.Side", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Top: 0, 
    Right: 1, 
    Bottom: 2, 
    Left: 3, 
  }
);

/* enum Irbis.Direction */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.Direction", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Forward: 0, 
    Left: 1, 
    Right: 2, 
  }
);

/* enum Irbis.Location */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.Location", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Ground: 0, 
    Air: 1, 
    Water: 2, 
  }
);

/* enum Irbis.Activity */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.Activity", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Idle: 0, 
    Running: 1, 
    Jumping: 2, 
    Rolling: 3, 
    Falling: 4, 
    Landing: 5, 
    Attacking: 6, 
  }
);

/* enum Irbis.Attacking */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.Attacking", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    No: 0, 
    Attack1: 1, 
    Attack2: 2, 
  }
);

/* enum Irbis.AI */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.AI", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Wander: 0, 
    Patrol: 1, 
    Seek: 2, 
    Combat: 3, 
    Stunned: 4, 
    Persue: 5, 
  }
);

/* enum Irbis.EnchantType */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.EnchantType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Bleed: 0, 
    Fire: 1, 
    Frost: 2, 
    Knockback: 3, 
    Poison: 4, 
    Sharpness: 5, 
    Stun: 6, 
  }
);

/* enum Irbis.VendingType */ 

JSIL.MakeEnum(
  {
    FullName: "Irbis.VendingType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Enchant: 0, 
    Health: 1, 
    Energy: 2, 
    Shield: 3, 
    Potion: 4, 
    Life: 5, 
  }
);

/* interface Irbis.IDrawableObject */ 

JSIL.MakeInterface(
  "Irbis.IDrawableObject", true, [], function ($) {
    $.Method({}, "get_Depth", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "Draw", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")));
    $.Property({}, "Depth");
  }, [$asm02.TypeRef("System.IComparable")]);

/* class Irbis.Irbis */ 

(function Irbis$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Ray)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Line)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Shape)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.Console)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Irbis.EnchantType)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Enchant)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Player)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.Threading.Interlocked)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.System.Threading.EventWaitHandle)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Print))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Square))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Button))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.IEnemy))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.TotalMeanFramerate)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Irbis.VendingType)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Level)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm02.System.Char)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Bars)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm02.System.Enum)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Irbis.IEnemy)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.OnslaughtSpawner)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm02.System.IO.File)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.Square)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.VendingMachine))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.VendingMachine)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.SaveFile)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.BinaryTree$b1.Of($asm02.System.Single))) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm02.System.Collections.IEnumerator)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm02.System.IDisposable)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.BinaryTree$b1)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm02.System.UInt64)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize(System.Array.Of($asm00.Line))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize(System.Array.Of($asm00.Ray))) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize(System.Array.Of($asm00.Shape))) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.SmartFramerate)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm00.OldLevel)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm02.System.IO.Directory)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String))) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm00.Collided)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm02.System.Math)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.EffectPassCollection_Enumerator)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.EffectPassCollection)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.EffectPass)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm00.VendingMenu)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm00.UIElementSlider)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm00.Button)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm02.System.DateTime)) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm02.System.Random)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.TextInputEventArgs)) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm02.System.Environment)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.UIElementSlider))) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm02.System.Threading.ManualResetEvent)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.BasicEffect)) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm02.System.EventHandler$b1.Of($asm01.Microsoft.Xna.Framework.TextInputEventArgs))) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm02.System.Delegate)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm00.Irbis.Irbis_AttackEventDelegate)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm02.System.Threading.WaitCallback)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm00.PlayerSettings)) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.DisplayMode)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize($asm00.Font)) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize($asm00.TooltipGenerator)) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm00.Menu)) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T68 = function () {
    return ($T68 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T69 = function () {
    return ($T69 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T6A = function () {
    return ($T6A = JSIL.Memoize(System.Array.Of($asm02.System.Single))) ();
  };
  var $T6B = function () {
    return ($T6B = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Single))) ();
  };
  var $T6C = function () {
    return ($T6C = JSIL.Memoize(System.Array.Of($asm00.Irbis.VendingType))) ();
  };
  var $T6D = function () {
    return ($T6D = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $T6E = function () {
    return ($T6E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T6F = function () {
    return ($T6F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.RenderTarget2D)) ();
  };
  var $T70 = function () {
    return ($T70 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Double))) ();
  };
  var $T71 = function () {
    return ($T71 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Media.MediaPlayer)) ();
  };
  var $T72 = function () {
    return ($T72 = JSIL.Memoize($asm00.Irbis.Attacking)) ();
  };
  var $T73 = function () {
    return ($T73 = JSIL.Memoize($asm00.Irbis.Activity)) ();
  };
  var $T74 = function () {
    return ($T74 = JSIL.Memoize($asm02.System.Type)) ();
  };
  var $T75 = function () {
    return ($T75 = JSIL.Memoize($asm00.LizardGuy)) ();
  };
  var $T76 = function () {
    return ($T76 = JSIL.Memoize($asm00.LizardGuy_LizardActivity)) ();
  };
  var $T77 = function () {
    return ($T77 = JSIL.Memoize($asm02.System.Threading.ThreadPool)) ();
  };
  var $T78 = function () {
    return ($T78 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T79 = function () {
    return ($T79 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.VendingType))) ();
  };
  var $T7A = function () {
    return ($T7A = JSIL.Memoize($asm00.Enemy)) ();
  };
  var $T7B = function () {
    return ($T7B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T7C = function () {
    return ($T7C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T7D = function () {
    return ($T7D = JSIL.Memoize($asm02.System.TimeSpan)) ();
  };
  var $T7E = function () {
    return ($T7E = JSIL.Memoize($asm02.System.Threading.WaitHandle)) ();
  };
  var $T7F = function () {
    return ($T7F = JSIL.Memoize($asm02.System.Exception)) ();
  };
  var $T80 = function () {
    return ($T80 = JSIL.Memoize($asm02.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Enchant, [$asm00.Irbis.EnchantType, $asm02.System.Int32]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [
        $asm02.System.Single, $asm02.System.Single, 
        $asm02.System.Single
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [JSIL.Reference.Of($asm02.System.Int32)]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm02.System.String, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TEnum"]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Square, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Point, 
        $asm02.System.Single, $asm02.System.Boolean, 
        $asm02.System.Boolean, $asm02.System.Nullable$b1.Of($asm02.System.Single)
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm02.System.String, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TEnum"]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm02.System.String, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TEnum"]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String), null))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm00.Irbis.Direction, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean
      ]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.String, [$asm02.System.String]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Square), null))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject), null))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Button), null))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.IEnemy), null))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Print), null))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.UIElementSlider), null))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Graphics.BasicEffect, [$asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Random, null))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.System.Object, $asm01.Microsoft.Xna.Framework.TextInputEventArgs]))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.System.Object, $asm01.Microsoft.Xna.Framework.TextInputEventArgs]))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm00.Irbis.Attacking]))) ();
  };
  var $S1F = function () {
    return ($S1F = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S20 = function () {
    return ($S20 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S21 = function () {
    return ($S21 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Object")))) ();
  };
  var $S22 = function () {
    return ($S22 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Object")))) ();
  };
  var $S23 = function () {
    return ($S23 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Object")))) ();
  };
  var $S24 = function () {
    return ($S24 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Int32")))) ();
  };
  var $S25 = function () {
    return ($S25 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")))) ();
  };
  var $S26 = function () {
    return ($S26 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S27 = function () {
    return ($S27 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Font, [$asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm02.System.Int32]))) ();
  };
  var $S28 = function () {
    return ($S28 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [$asm00.Font]))) ();
  };
  var $S29 = function () {
    return ($S29 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.BinaryTree$b1.Of($asm02.System.Single), null))) ();
  };
  var $S2A = function () {
    return ($S2A = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Boolean")))) ();
  };
  var $S2B = function () {
    return ($S2B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.PlayerSettings, $asm02.System.String]))) ();
  };
  var $S2C = function () {
    return ($S2C = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Font, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm02.System.Int32, 
        System.Array.Of($asm02.System.Int32), $asm02.System.Boolean
      ]))) ();
  };
  var $S2D = function () {
    return ($S2D = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2), null))) ();
  };
  var $S2E = function () {
    return ($S2E = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S2F = function () {
    return ($S2F = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Int32")))) ();
  };
  var $S30 = function () {
    return ($S30 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Line, [$asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S31 = function () {
    return ($S31 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Shape, [System.Array.Of($asm01.Microsoft.Xna.Framework.Vector2)]))) ();
  };
  var $S32 = function () {
    return ($S32 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Shape, [$asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S33 = function () {
    return ($S33 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Graphics.Texture2D), null))) ();
  };
  var $S34 = function () {
    return ($S34 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.String")))) ();
  };
  var $S35 = function () {
    return ($S35 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Media.Song), null))) ();
  };
  var $S36 = function () {
    return ($S36 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")))) ();
  };
  var $S37 = function () {
    return ($S37 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Graphics.RenderTarget2D, [
        $asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice, $asm02.System.Int32, 
        $asm02.System.Int32
      ]))) ();
  };
  var $S38 = function () {
    return ($S38 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [JSIL.Reference.Of($asm02.System.Int32)]))) ();
  };
  var $S39 = function () {
    return ($S39 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color
      ]))) ();
  };
  var $S3A = function () {
    return ($S3A = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point), null))) ();
  };
  var $S3B = function () {
    return ($S3B = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Single), null))) ();
  };
  var $S3C = function () {
    return ($S3C = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.VendingType), null))) ();
  };
  var $S3D = function () {
    return ($S3D = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Int32, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S3E = function () {
    return ($S3E = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Object")))) ();
  };
  var $S3F = function () {
    return ($S3F = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.Object")))) ();
  };
  var $S40 = function () {
    return ($S40 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [System.Array.Of($asm00.Shape)]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Irbis.IEnemy.set_AIenabled)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm02.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm02.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm02.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm00.Irbis.IEnemy.get_Position)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm00.Irbis.IEnemy.get_Health)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm00.Irbis.IEnemy.get_StunTime)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm00.Irbis.IEnemy.Draw)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm00.Irbis.IEnemy.Update)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm00.Irbis.IEnemy.get_Collider)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm00.Irbis.IEnemy.get_MaxHealth)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm00.Irbis.IEnemy.get_Name)) ();
  };


  function Irbis__ctor () {
    $T08().prototype._ctor.call(this);
    $T09().WriteLine(("    Project: Irbis (" + $thisType.versionTy + ")"));
    $T09().WriteLine(("    " + $thisType.versionID + " v" + $thisType.versionNo));
    $thisType.game = this;
    this.set_IsMouseVisible(false);
    $thisType.sceneIsMenu = true;
    $thisType.graphics = new ($T0B())(this);
    $thisType.graphics.set_SynchronizeWithVerticalRetrace(false);
    $thisType.resetRequired = false;
    this.set_IsFixedTimeStep(false);
    (this.get_Content()).set_RootDirectory(".\\content");
    $thisType.gravity = 1125;
  }; 

  function Irbis_AddPlayerEnchant (enchant) {
    var hasEnchant = -1;

    for (var i = 0; i < ($thisType.jamie.enchantList.get_Count() | 0); i = ((i + 1) | 0)) {
      if ($thisType.jamie.enchantList.get_Item(i).enchantType === enchant) {
        hasEnchant = i;
      }
    }
    if (hasEnchant >= 0) {
      ($thisType.jamie.enchantList.get_Item(hasEnchant)).Upgrade();
      $thisType.WriteLine(JSIL.ConcatString($thisType.jamie.enchantList.get_Item(hasEnchant).enchantType, " upgraded"));
    } else {
      $thisType.jamie.enchantList.Add($S03().Construct(enchant, 1));
      $thisType.WriteLine(JSIL.ConcatString(enchant, " added"));
    }
  }; 

  function Irbis_Camera (threadContext) {
    try {
      if ($thisType.cameraLerpSetting) {
        if (+($thisType.boundingBox.get_Right()) <= +$thisType.screenSpacePlayerPos.X) {
          $thisType.mainCamera.X = +$thisType.mainCamera.X + (+$S04().CallStatic($thisType, "Lerp", null, 
              +($thisType.boundingBox.get_Right()), 
              $thisType.screenSpacePlayerPos.X, 
              +$thisType.cameraLerpSpeed * +$thisType.get_DeltaTime()
            ) - +($thisType.boundingBox.get_Right()));
        } else if (+($thisType.boundingBox.get_Left()) >= +$thisType.screenSpacePlayerPos.X) {
          $thisType.mainCamera.X = +$thisType.mainCamera.X + (+$S04().CallStatic($thisType, "Lerp", null, 
              +($thisType.boundingBox.get_Left()), 
              $thisType.screenSpacePlayerPos.X, 
              +$thisType.cameraLerpSpeed * +$thisType.get_DeltaTime()
            ) - +($thisType.boundingBox.get_Left()));
        }
        if (+($thisType.boundingBox.get_Bottom()) <= +$thisType.screenSpacePlayerPos.Y) {
          $thisType.mainCamera.Y = +$thisType.mainCamera.Y + (+$S04().CallStatic($thisType, "Lerp", null, 
              +($thisType.boundingBox.get_Bottom()), 
              $thisType.screenSpacePlayerPos.Y, 
              +$thisType.cameraLerpSpeed * +$thisType.get_DeltaTime()
            ) - +($thisType.boundingBox.get_Bottom()));
        } else if (+($thisType.boundingBox.get_Top()) >= +$thisType.screenSpacePlayerPos.Y) {
          $thisType.mainCamera.Y = +$thisType.mainCamera.Y + (+$S04().CallStatic($thisType, "Lerp", null, 
              +($thisType.boundingBox.get_Top()), 
              $thisType.screenSpacePlayerPos.Y, 
              +$thisType.cameraLerpSpeed * +$thisType.get_DeltaTime()
            ) - +($thisType.boundingBox.get_Top()));
        }
      } else {
        if (+($thisType.boundingBox.get_Right()) <= +$thisType.screenSpacePlayerPos.X) {
          $thisType.mainCamera.X = +$thisType.mainCamera.X + (+$thisType.screenSpacePlayerPos.X - +($thisType.boundingBox.get_Right()));
        } else if (+($thisType.boundingBox.get_Left()) >= +$thisType.screenSpacePlayerPos.X) {
          $thisType.mainCamera.X = +$thisType.mainCamera.X + (+$thisType.screenSpacePlayerPos.X - +($thisType.boundingBox.get_Left()));
        }
        if (+($thisType.boundingBox.get_Bottom()) <= +$thisType.screenSpacePlayerPos.Y) {
          $thisType.mainCamera.Y = +$thisType.mainCamera.Y + (+$thisType.screenSpacePlayerPos.Y - +($thisType.boundingBox.get_Bottom()));
        } else if (+($thisType.boundingBox.get_Top()) >= +$thisType.screenSpacePlayerPos.Y) {
          $thisType.mainCamera.Y = +$thisType.mainCamera.Y + (+$thisType.screenSpacePlayerPos.Y - +($thisType.boundingBox.get_Top()));
        }
      }
      $thisType.screenSpacePlayerPos.X = ((+$thisType.jamie.get_TrueCenter().X * +$thisType.screenScale) + +($thisType.halfResolution.X)) - +$thisType.mainCamera.X;
      $thisType.screenSpacePlayerPos.Y = ((+$thisType.jamie.get_TrueCenter().Y * +$thisType.screenScale) + +($thisType.halfResolution.Y)) - +$thisType.mainCamera.Y;
      if (+$thisType.cameraShakeDuration > 0) {
        $thisType.ReturnCamera($thisType.CameraShake());
      }
      if (+$thisType.cameraSwingDuration > 0) {
        $thisType.ReturnCamera($thisType.CameraSwing());
      }
      if (+$thisType.cameraReturnTime > 0) {
        $thisType.ReturnCamera();
      } else {
        $thisType.camera = $thisType.mainCamera.MemberwiseClone();
      }
      $thisType.background.M31 = $thisType.foreground.M41 = +($thisType.halfResolution.X) - +$thisType.camera.X;
      $thisType.background.M32 = $thisType.foreground.M42 = +($thisType.halfResolution.Y) - +$thisType.camera.Y;
    } finally {
      if (($S05().CallStatic($T12(), "Decrement", null, /* ref */ new JSIL.MemberReference($thisType, "pendingThreads")) | 0) <= 0) {
        $thisType.doneEvent.Set();
      }
    }
  }; 

  function Irbis_CameraShake$00 (duration, magnitude) {
    if ($thisType.cameraShakeSetting) {
      $thisType.cameraShakeDuration = +duration;
      $thisType.GenerateCameraShakeTarget();
      $thisType.cameraShakePrevLocation = $thisType.mainCamera.MemberwiseClone();
      $thisType.cameraShakeMagnitude = +magnitude * +$thisType.screenScale;
    }
  }; 

  function Irbis_CameraShake$01 () {
    $thisType.cameraShakeDuration = +$thisType.cameraShakeDuration - +$thisType.get_DeltaTime();
    $thisType.cameraShakeLerpTime = +$thisType.cameraShakeLerpTime - +$thisType.get_DeltaTime();
    if (+$thisType.cameraShakeLerpTime <= 0) {
      $thisType.GenerateCameraShakeTarget();
    }
    $thisType.cameraShakePercentage = 1 - +((+$thisType.cameraShakeLerpTime / +$thisType.cameraShakeLerpTimeMax));
    $thisType.camera.X = +$S04().CallStatic($thisType, "Lerp", null, $thisType.cameraShakePrevLocation.X, $thisType.cameraShakeTargetLocation.X, $thisType.cameraShakePercentage);
    $thisType.camera.Y = +$S04().CallStatic($thisType, "Lerp", null, $thisType.cameraShakePrevLocation.Y, $thisType.cameraShakeTargetLocation.Y, $thisType.cameraShakePercentage);
    return $thisType.cameraShakeLerpTimeMax;
  }; 

  function Irbis_CameraSwing$02 (duration, magnitude, heading) {
    if ($thisType.cameraSwingSetting) {
      $thisType.cameraSwingMaxDuration = +duration;
      $thisType.cameraSwingDuration = +duration;
      $thisType.cameraSwingHeading = heading.MemberwiseClone();
      $thisType.cameraSwingHeading.Normalize();
      $thisType.cameraSwingMagnitude = +magnitude * +$thisType.screenScale;
    }
  }; 

  function Irbis_CameraSwing$03 () {
    return -1;
  }; 

  function Irbis_CleanConsole () {

    while (($thisType.developerConsole.lines | 0) > 10000) {
      $thisType.developerConsole.Clear();
    }
  }; 

  function Irbis_ClearLevel () {
    $thisType.printList.Clear();
    $thisType.printList.Add($thisType.debuginfo);
    $thisType.printList.Add($thisType.consoleWriteline);
    $thisType.printList.Add($thisType.developerConsole);
    $thisType.sList.Clear();
    $thisType.buttonList.Clear();
    $thisType.enemyList.Clear();
    $thisType.squareList.Clear();
    $thisType.collisionObjects.Clear();
    $thisType.backgroundSquareList.Clear();
    if ($thisType.jamie !== null) {
      $thisType.jamie.PlayerEventsReset();
    }
    if ($thisType.recordFPS) {
      $thisType.meanFPS = new ($T1B())(true);
      $thisType.maxFPS = -1.7976931348623157E+308;
      $thisType.maxFPStime = NaN;
      $thisType.minFPS = 1.7976931348623157E+308;
      $thisType.minFPStime = NaN;
    }
    $thisType.timer = 0;
    $thisType.screenspace = $S06().Construct($T1C().get_Zero(), $thisType.resolution);
  }; 

  function Irbis_ClearUI () {
    $thisType.sList.Clear();
    $thisType.printList.Clear();
    $thisType.buttonList.Clear();
    $thisType.bars = null;
  }; 

  function Irbis_ConsoleParser (line) {
    var $temp00, $temp01;
    var floatResult = new JSIL.BoxedVariable(0);
    var intResult = new JSIL.BoxedVariable(0);
    var keyResult = new JSIL.BoxedVariable($asm01.Microsoft.Xna.Framework.Input.Keys.None);
    var boolResult = new JSIL.BoxedVariable(false);
    var enchantResult = new JSIL.BoxedVariable($asm00.Irbis.EnchantType.Bleed);
    var vendtype = new JSIL.BoxedVariable($asm00.Irbis.VendingType.Enchant);
    var thisLevel = new ($T20())();
    line.trim();
    $thisType.WriteLine();
    $thisType.WriteLine(line);
    line = (line.toLowerCase());
    if (!(((line.length | 0) < 1) || (line[0]).Equals(";"))) {

      var $label1 = 0;
    $labelgroup1: 
      while (true) {
        switch ($label1) {
          case 0: /* $entry1 */ 
            var variable = $T0A().Empty;
            var extra = $T0A().Empty;
            var value = $T0A().Empty;
            var statement = $T0A().Empty;
            var text = line;

            for (var j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
              var c = (text[j]);
              if (!$T21().IsWhiteSpace(c)) {
                statement = (JSIL.ConcatString(statement, $T21().$Box(c)));
              }
            }
            var stage = 0;
            text = statement;

            for (j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
              c = (text[j]);
              if (stage === 3) {
                if (c.Equals(";")) {
                  stage = -1;
                }
                if (stage > 0) {
                  value = (JSIL.ConcatString(value, $T21().$Box(c)));
                }
              }
              if (stage === 2) {
                if (c.Equals("=")) {
                  stage = 3;
                }
              }
              if (stage === 1) {
                if (c.Equals("]")) {
                  stage = 2;
                } else {
                  extra = (JSIL.ConcatString(extra, $T21().$Box(c)));
                }
              }
              if (stage === 0) {
                if (c.Equals("=")) {
                  stage = 3;
                } else if (c.Equals("[")) {
                  stage = 1;
                } else {
                  variable = (JSIL.ConcatString(variable, $T21().$Box(c)));
                }
              }
            }
            var text2 = (variable.toLowerCase());
            if (text2 !== null) {

              var $label0 = 0;
            $labelgroup0: 
              while (true) {
                switch ($label0) {
                  case 0: /* $entry0 */ 
                    switch (text2) {
                      case "attack1damage": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.attack1Damage = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "attack2damage": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.attack2Damage = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "speed": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.speed = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "jumptimemax": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.jumpTimeMax = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "idletimemax": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.idleTimeMax = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "maxhealth": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.maxHealth = +floatResult.get();
                          $T22().healthBar.maxValue = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "maxshield": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.maxShield = +floatResult.get();
                          $T22().shieldBar.maxValue = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "maxenergy": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.maxEnergy = +floatResult.get();
                          $T22().energyBar.maxValue = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "superShockwaveHoldtime": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.superShockwaveHoldtime = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shockwaveeffectivedistance": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.shockwaveEffectiveDistance = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shockwavestuntime": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.shockwaveStunTime = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "invulnerablemaxtime": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.invulnerableMaxTime = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shieldrechargerate": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.shieldRechargeRate = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "energyrechargerate": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.energyRechargeRate = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "healthrechargerate": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.healthRechargeRate = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "energyusablemargin": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.energyUsableMargin = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "minsqrdetectdistance": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.minSqrDetectDistance = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shieldanimationspeed": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.shieldAnimationSpeed = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shieldhealingpercentage": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.shieldHealingPercentage = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "cameralerpspeed": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.cameraLerpSpeed = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "terminalvelocity": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.terminalVelocity = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "masteraudiolevel": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.masterAudioLevel = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "musiclevel": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.musicLevel = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "soundeffectslevel": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.soundEffectsLevel = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "potionrechargerate": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.potionRechargeRate = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "potionrechargetime": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.jamie.potionRechargeTime = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "collideroffset": 
                        $thisType.jamie.colliderOffset = $thisType.PointParser(value).MemberwiseClone();
                        if ($T1C().op_Equality($thisType.jamie.colliderOffset, $S07().Construct(-112, -112))) {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "colliderwidth": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.jamie.colliderSize.X = (intResult.get() | 0);
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "colliderheight": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.jamie.colliderSize.Y = (intResult.get() | 0);
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "attackcolliderwidth": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.jamie.attackColliderWidth = (intResult.get() | 0);
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "attackcolliderheight": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.jamie.attackColliderHeight = (intResult.get() | 0);
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "screenscale": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.SetScreenScale(floatResult.get());
                          $thisType.WriteLine(JSIL.ConcatString("screenscale:", $T14().$Box($thisType.screenScale)));
                        } else {
                          $thisType.WriteLine(JSIL.ConcatString("this command changes the screenscale\ncurrent screenscale:", $T14().$Box($thisType.screenScale)));
                        }
                        break $labelgroup1;

                      case "maxnumberofpotions": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.jamie.maxNumberOfPotions = (intResult.get() | 0);
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "attackkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.attackKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altattackkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altAttackKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shockwavekey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.shockwaveKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altshockwavekey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altShockwaveKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "shieldkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.shieldKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altshieldkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altShieldKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "jumpkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.jumpKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altjumpkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altJumpKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "upkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.upKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altupkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altUpKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "downkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.downKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altdownkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altDownKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "leftkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.leftKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altleftkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altLeftKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "rightkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.rightKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altrightkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altRightKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "rollkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.rollKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altrollkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altRollKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "potionkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.potionKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "altpotionkey": 
                        if ($S08().CallStatic($T23(), "TryParse$b1", [$asm01.Microsoft.Xna.Framework.Input.Keys], value, /* ref */ keyResult)) {
                          $thisType.altPotionKey = keyResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "timeraccuracy": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.timerAccuracy = "00.";
                          if ((intResult.get() | 0) > 8) {

                            for (var i = 8; i > 0; i = ((i - 1) | 0)) {
                              $thisType.timerAccuracy = (JSIL.ConcatString($thisType.timerAccuracy, "0"));
                            }
                          } else {

                            for (i = (intResult.get() | 0); i > 0; i = ((i - 1) | 0)) {
                              $thisType.timerAccuracy = (JSIL.ConcatString($thisType.timerAccuracy, "0"));
                            }
                          }
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "cameralerp": 
                        if ($T1E().TryParse(value, /* ref */ boolResult)) {
                          $thisType.cameraLerpSetting = boolResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "camerashakesetting": 
                        if ($T1E().TryParse(value, /* ref */ boolResult)) {
                          $thisType.cameraShakeSetting = boolResult.get();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "fullscreen": 
                        if ($T1E().TryParse(value, /* ref */ boolResult)) {
                          $thisType.graphics.set_IsFullScreen(boolResult.get());
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "verticalretrace": 
                        if ($T1E().TryParse(value, /* ref */ boolResult)) {
                          $thisType.graphics.set_SynchronizeWithVerticalRetrace(boolResult.get());
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "Isfixedtimestep": 
                        if ($T1E().TryParse(value, /* ref */ boolResult)) {
                          this.set_IsFixedTimeStep(boolResult.get());
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "summonenemy": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          this.SummonGenericEnemy();
                        } else if ($T0E().TryParse(value, /* ref */ intResult)) {
                          this.SummonGenericEnemy(100 * +((+(intResult.get()) / 100)), 10, 300);
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "summonenemies": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {

                          for (i = (intResult.get() | 0); i > 0; i = ((i - 1) | 0)) {
                            this.SummonGenericEnemy();
                          }
                        } else {
                          $thisType.WriteLine("Use this command to summon X number of enemies: \"summonenemies=X\"");
                        }
                        break $labelgroup1;

                      case "notarget": 
                        $thisType.AIenabled = !$thisType.AIenabled;

                        for (var a$0 = $thisType.enemyList._items, i$0 = 0, l$0 = ($thisType.enemyList._size | 0); i$0 < l$0; ($temp00 = i$0, 
                            i$0 = ((i$0 + 1) | 0), 
                            $temp00)) {
                          var e = a$0[i$0];
                          $IM00().Call(e, null, $thisType.AIenabled);
                        }
                        break $labelgroup1;

                      case "noclip": 
                        $thisType.jamie.Noclip();
                        break $labelgroup1;

                      case "killall": 
                        $thisType.enemyList.Clear();
                        break $labelgroup1;

                      case "savelevel": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine(JSIL.ConcatString("saving level as ", $thisType.currentLevel));
                          this.SaveLevel($thisType.currentLevel);
                        } else {
                          $thisType.WriteLine(JSIL.ConcatString("saving level as ", value));
                          this.SaveLevel(value);
                          this.LoadLevel(value, true);
                        }
                        $thisType.WriteLine("done.");
                        break $labelgroup1;

                      case "skiptowave": 
                        if ($thisType.onslaughtMode) {
                          if ($T0E().TryParse(value, /* ref */ intResult)) {
                            $thisType.onslaughtSpawner.SkipToWave(intResult.get());
                            $thisType.WriteLine(JSIL.ConcatString("wave: ", $T0E().$Box($thisType.onslaughtSpawner.wave)));
                          } else {
                            $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                          }
                        }
                        break $labelgroup1;

                      case "loadlevel": 
                        if ($T26().Exists((".\\levels\\" + value + ".lvl"))) {
                          $thisType.WriteLine(JSIL.ConcatString("loading level: ", value));
                          this.LoadLevel(value, !$thisType.levelEditor);
                          if ($thisType.levelEditor) {
                            $thisType.sceneIsMenu = true;
                          }
                          $thisType.WriteLine("done.");
                        }
                        break $labelgroup1;

                      case "newlevel": 
                        if (!(!$thisType.levelEditor || $T0A().IsNullOrWhiteSpace(value))) {
                          $thisType.WriteLine(JSIL.ConcatString("creating new level: ", value));
                          (thisLevel = thisLevel.MemberwiseClone(), 
                            $T20().prototype._ctor.call(thisLevel, true));
                          this.SaveLevel(value);
                          this.LoadLevel(value, true);
                        }
                        break $labelgroup1;

                      case "leveleditor": 
                        this.EnableLevelEditor();
                        $thisType.WriteLine(JSIL.ConcatString("levelEditor: ", $T1E().$Box($thisType.levelEditor)));
                        break $labelgroup1;

                      case "clearui": 
                        this.ClearUI();
                        break $labelgroup1;

                      case "spawnpoints": 

                        for (i = 0; i < ((this.enemySpawnPoints).get_Count() | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["enemySpawnPoints[", $T0E().$Box(i), "]: ", (this.enemySpawnPoints).get_Item(i)])));
                        }
                        $thisType.WriteLine(JSIL.ConcatString($T0E().$Box((this.enemySpawnPoints).get_Count()), " enemy spawn points"));
                        break $labelgroup1;

                      case "squarelist": 

                        for (i = 0; i < ($thisType.squareList.get_Count() | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["squareList[", $T0E().$Box(i), "] position:", ($thisType.squareList.get_Item(i)).get_Position(), " collider:", ($thisType.squareList.get_Item(i)).get_Collider(), " texture:", $thisType.squareList.get_Item(i).texture, " depth:", $T14().$Box($thisType.squareList.get_Item(i).depth)])));
                        }
                        break $labelgroup1;

                      case "addspawn": 
                        if ($T1C().op_Inequality(
                            $thisType.PointParser(value), 
                            $T1C().get_Zero()
                          )) {
                          var tempPoint = $thisType.PointParser(value).MemberwiseClone();
                          (this.enemySpawnPoints).Add(tempPoint.ToVector2().MemberwiseClone());
                          $thisType.WriteLine(JSIL.ConcatString("added spawn point at ", tempPoint));
                        }
                        break $labelgroup1;

                      case "removespawn": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          if (!(((intResult.get() | 0) < 0) || ((intResult.get() | 0) >= ((this.enemySpawnPoints).get_Count() | 0)))) {
                            (this.enemySpawnPoints).RemoveAt(intResult.get());
                            $thisType.WriteLine(JSIL.ConcatString("removed spawn point ", $T0E().$Box(intResult.get())));
                          }
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "removespawns": 
                        if ($T1C().op_Inequality(
                            $thisType.PointParser(value), 
                            $T1C().get_Zero()
                          )) {
                          tempPoint = $thisType.PointParser(value).MemberwiseClone();

                          for (i = (tempPoint.X | 0); i <= (tempPoint.Y | 0); i = ((i + 1) | 0)) {
                            (this.enemySpawnPoints).RemoveAt(tempPoint.X);
                          }
                          $thisType.WriteLine(JSIL.ConcatString("removed ", $T0E().$Box((((((tempPoint.Y | 0) - (tempPoint.X | 0)) | 0) + 1) | 0)), " spawn points"));
                        }
                        break $labelgroup1;

                      case "removeallspawns": 
                        (this.enemySpawnPoints).Clear();
                        break $labelgroup1;

                      case "spawnblock": 
                        if ($thisType.levelEditor) {
                          this.SaveLevel($thisType.currentLevel);
                          if ($T0A().IsNullOrWhiteSpace(value)) {
                            $thisType.WriteLine(JSIL.ConcatString("spawning block with defaultTex texture at ", $S07().Construct(((+$thisType.camera.X - (+$thisType.camera.X % 32)) | 0), ((+$thisType.camera.Y - (+$thisType.camera.Y % 32)) | 0))));
                            var defaultSquareTex = (this.get_Content()).Load$b1($T2A())("defaultTex");
                            var tempSquare = $S09().Construct(defaultSquareTex, $S07().Construct(((+$thisType.camera.X - (+$thisType.camera.X % 32)) | 0), ((+$thisType.camera.Y - (+$thisType.camera.Y % 32)) | 0)), $thisType.screenScale, false, true, 0.3);
                            $thisType.squareList.Add(tempSquare);
                          } else {
                            $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["spawning block with", value, " texture at ", $S07().Construct(((+$thisType.camera.X % 32) | 0), ((+$thisType.camera.Y % 32) | 0))])));
                            defaultSquareTex = (this.get_Content()).Load$b1($T2A())(value);
                            tempSquare = $S09().Construct(defaultSquareTex, $S07().Construct(((+$thisType.camera.X % 32) | 0), ((+$thisType.camera.Y % 32) | 0)), $thisType.screenScale, false, true, 0.3);
                            $thisType.squareList.Add(tempSquare);
                          }
                        }
                        break $labelgroup1;

                      case "addenchant": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine("addenchant=Type  -------  add enchant to active enchants");
                          $thisType.WriteLine("(bleed, fire, frost, knockback, poison, sharpness, stun)");
                          $thisType.WriteLine("add the same enchant multiple times to upgrade its strength");
                        } else if (!(!$S0A().CallStatic($T23(), "TryParse$b1", [$asm00.Irbis.EnchantType], value, /* ref */ enchantResult) || ($thisType.jamie === null))) {
                          $thisType.AddPlayerEnchant(enchantResult.get());
                        } else {
                          $thisType.WriteLine(("error: enchant \"" + value + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "purchaseenchant": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine("purchase enchant=Type  -------  add enchant to active enchants");
                          $thisType.WriteLine("(bleed, fire, frost, knockback, poison, sharpness, stun)");
                          $thisType.WriteLine("purchase the same enchant multiple times to upgrade its strength");
                        } else if (!(!$S0A().CallStatic($T23(), "TryParse$b1", [$asm00.Irbis.EnchantType], value, /* ref */ enchantResult) || ($thisType.jamie === null))) {
                          var vendingmachine = -1;

                          for (i = 0; i < ($thisType.onslaughtSpawner.vendingMachineList.get_Count() | 0); i = ((i + 1) | 0)) {
                            if ($thisType.onslaughtSpawner.vendingMachineList.get_Item(i).type === $T1F().Enchant) {
                              vendingmachine = i;
                            }
                          }
                          if (vendingmachine >= 0) {
                            ($thisType.onslaughtSpawner.vendingMachineList.get_Item(vendingmachine)).Purchase((enchantResult.get()).valueOf());
                            $thisType.WriteLine(JSIL.ConcatString("purchased ", enchantResult.get()));
                          } else {
                            $thisType.WriteLine(JSIL.ConcatString("vendingmachine=", $T0E().$Box(vendingmachine)));
                            $thisType.WriteLine("failed");
                          }
                        } else {
                          $thisType.WriteLine(("error: enchant \"" + value + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "disenchant": 
                        $thisType.jamie.enchantList.Clear();
                        $thisType.WriteLine("removed all enchants");
                        break $labelgroup1;

                      case "enchants": 
                        if (($thisType.jamie.enchantList.get_Count() | 0) <= 0) {
                          $thisType.WriteLine("no enchants");
                        }

                        for (var a$1 = $thisType.jamie.enchantList._items, i$1 = 0, l$1 = ($thisType.jamie.enchantList._size | 0); i$1 < l$1; ($temp01 = i$1, 
                            i$1 = ((i$1 + 1) | 0), 
                            $temp01)) {
                          var e2 = a$1[i$1];
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["Enchant: ", e2.enchantType, ", str: ", $T0E().$Box(e2.strength), ", val: ", $T14().$Box(e2.effectValue), ", dur: ", $T14().$Box(e2.effectDuration), ", maxStack: ", $T0E().$Box(e2.maxStack)])));
                        }
                        break $labelgroup1;

                      case "lines": 
                        $thisType.WriteLine(($thisType.developerConsole.lines).toString());
                        break $labelgroup1;

                      case "clearlog": 
                        $thisType.developerConsole.Clear();
                        break $labelgroup1;

                      case "version": 
                        this.PrintVersion();
                        break $labelgroup1;

                      case "killme": 
                        $thisType.PlayerDeath();
                        break $labelgroup1;

                      case "printsave": 
                        $thisType.savefile.Print($thisType.autosave);
                        break $labelgroup1;

                      case "unstuck": 
                        $thisType.jamie.ClearCollision();
                        break $labelgroup1;

                      case "fps": 
                        break;

                      case "framerate": 
                        break;

                      case "timer": 
                        $thisType.WriteLine(JSIL.ConcatString("timer: ", $T2E().$Box($thisType.get_Timer())));
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debuglevel": 
                        var thislevel = new ($T20())();
                        thislevel.Load((".\\levels\\" + $thisType.currentLevel + ".lvl"));
                        $thisType.WriteLine(thislevel.toString());
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "moveme": 
                        $label0 = 1 /* goto IL_261F */ ;
                        continue $labelgroup0;

                      case "move": 
                        $label0 = 1 /* goto IL_261F */ ;
                        continue $labelgroup0;

                      case "random": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine(JSIL.ConcatString("random int between 0 and 100: ", $T0E().$Box($thisType.RandomInt(100))));
                        } else if ($T1C().op_Inequality(
                            $thisType.PointParser(value), 
                            $T1C().get_Zero()
                          )) {
                          tempPoint = $thisType.PointParser(value).MemberwiseClone();
                          var mean = 0;
                          var min = 2147483647;
                          var max = -2147483648;
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), [$T0E().$Box(tempPoint.Y), " random ints between 0 and ", $T0E().$Box(tempPoint.X), ": "])));
                          $thisType.WriteLine();

                          for (i = 0; i < (tempPoint.Y | 0); i = ((i + 1) | 0)) {
                            var currentInt = ($thisType.RandomInt(tempPoint.X) | 0);
                            mean += +currentInt;
                            if (currentInt > max) {
                              max = currentInt;
                            }
                            if (currentInt < min) {
                              min = currentInt;
                            }
                            $thisType.Write(JSIL.ConcatString($T0E().$Box(currentInt), " "));
                          }
                          var median = +((+(min + max) / 2));
                          mean = +((mean / +(tempPoint.Y)));
                          $thisType.WriteLine(JSIL.ConcatString("   min: ", $T0E().$Box(min)));
                          $thisType.WriteLine(JSIL.ConcatString("   max: ", $T0E().$Box(max)));
                          $thisType.WriteLine(JSIL.ConcatString("  mean: ", $T14().$Box(mean)));
                          $thisType.WriteLine(JSIL.ConcatString("median: ", $T14().$Box(median)));
                          $thisType.WriteLine();
                        } else if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["random int between 0 and ", $T0E().$Box(intResult.get()), ": ", $T0E().$Box($thisType.RandomInt(intResult.get()))])));
                        } else {
                          $thisType.WriteLine(JSIL.ConcatString("random int between 0 and 100: ", $T0E().$Box($thisType.RandomInt(100))));
                        }
                        break $labelgroup1;

                      case "randombool": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine(JSIL.ConcatString("random bool: ", $T1E().$Box($thisType.get_RandomBool())));
                        } else if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.WriteLine(JSIL.ConcatString($T0E().$Box(intResult.get()), " random bools:"));

                          for (i = 1; i <= (intResult.get() | 0); i = ((i + 1) | 0)) {
                            $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["random bool ", $T0E().$Box(i), ": ", $T1E().$Box($thisType.get_RandomBool())])));
                          }
                        } else {
                          $thisType.WriteLine(("error: \"" + value + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "spawnvending": 
                        $label0 = 2 /* goto IL_29AC */ ;
                        continue $labelgroup0;

                      case "spawnvendingmachine": 
                        $label0 = 2 /* goto IL_29AC */ ;
                        continue $labelgroup0;

                      case "debugvending": 
                        $label0 = 3 /* goto IL_2BC9 */ ;
                        continue $labelgroup0;

                      case "debugvendingmachine": 
                        $label0 = 3 /* goto IL_2BC9 */ ;
                        continue $labelgroup0;

                      case "invocation": 
                        $thisType.WriteLine(this.Invocation());
                        break $labelgroup1;

                      case "addtotree": 
                        if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $T2F().prototype.Add.call($thisType.testTree, floatResult.get());
                          $thisType.WriteLine(JSIL.ConcatString("added ", $T14().$Box(floatResult.get())));
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "filltree": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          $thisType.WriteLine("filling...");

                          for (i = 0; i < (intResult.get() | 0); i = ((i + 1) | 0)) {
                            var randomfloat = +$thisType.get_RandomFloat() * 100;
                            $thisType.Write(JSIL.ConcatString($T14().$Box(randomfloat), " "));
                            $T2F().prototype.Add.call($thisType.testTree, randomfloat);
                          }
                          $thisType.WriteLine();
                        } else {
                          $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "printtree": 
                        $thisType.WriteLine();
                        var enumerator3 = $T2F().prototype.GetEnumerator.call($thisType.testTree);
                        try {

                          while ($IM01().Call(enumerator3, null)) {
                            var f = $T14().$Cast($IM02().Call(enumerator3, null));
                            $thisType.Write(JSIL.ConcatString($T14().$Box(f), " "));
                          }
                        } finally {
                          var disposable = $T31().$As(enumerator3);
                          if (disposable !== null) {
                            $IM03().Call(disposable, null);
                          }
                        }
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "printtreeleftmost": 
                        $thisType.WriteLine(String($T2F().prototype.GetLeftmost.call($thisType.testTree, $thisType.testTree)));
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debugtree": 
                        if ($thisType.testTree !== null) {
                          $thisType.WriteLine(JSIL.ConcatString(" root: ", $thisType.testTree));
                          if ($thisType.testTree.get_Left() === null) {
                            $thisType.WriteLine(" left: null");
                          } else {
                            $thisType.WriteLine(JSIL.ConcatString(" left: ", $thisType.testTree.get_Left()));
                          }
                          if ($thisType.testTree.get_Right() !== null) {
                            $thisType.WriteLine(JSIL.ConcatString("right: ", $thisType.testTree.get_Right()));
                          } else {
                            $thisType.WriteLine("right: null");
                          }
                        } else {
                          $thisType.WriteLine(" root: null");
                        }
                        break $labelgroup1;

                      case "vendings": 
                        $label0 = 4 /* goto IL_2E18 */ ;
                        continue $labelgroup0;

                      case "vendingmachines": 
                        $label0 = 4 /* goto IL_2E18 */ ;
                        continue $labelgroup0;

                      case "removevending": 
                        $label0 = 5 /* goto IL_2E92 */ ;
                        continue $labelgroup0;

                      case "removevendingmachine": 
                        $label0 = 5 /* goto IL_2E92 */ ;
                        continue $labelgroup0;

                      case "player": 
                        $thisType.WriteLine($thisType.jamie.toString());
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debugonslaught": 
                        $label0 = 6 /* goto IL_2F15 */ ;
                        continue $labelgroup0;

                      case "recordfps": 
                        $label0 = 7 /* goto IL_2F40 */ ;
                        continue $labelgroup0;

                      case "recordframerate": 
                        $label0 = 7 /* goto IL_2F40 */ ;
                        continue $labelgroup0;

                      case "god": 
                        $thisType.jamie.invulnerable = 3.40282347E+38;
                        $thisType.WriteLine("godmode on");
                        break $labelgroup1;

                      case "addpoints": 
                        if ($T0E().TryParse(value, /* ref */ intResult)) {
                          if ($thisType.onslaughtSpawner !== null) {
                            $thisType.onslaughtSpawner.set_Points($T33().op_Addition($thisType.onslaughtSpawner.Points, $T33().FromNumber(intResult.get())));
                            $thisType.WriteLine(JSIL.ConcatString("added ", $T0E().$Box(intResult.get()), " points"));
                          }
                        } else {
                          $thisType.WriteLine("use this command to add points to your score");
                        }
                        break $labelgroup1;

                      case "resolution": 
                        $thisType.WriteLine(JSIL.ConcatString("resolution:", $thisType.resolution));
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "projection": 
                        $thisType.WriteLine(JSIL.ConcatString("basicEffect.Projection:", $thisType.MatrixPrinter($thisType.projection)));
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debuglines": 
                        $thisType.WriteLine(JSIL.ConcatString("lines: ", $T0E().$Box($thisType.debuglines.length)));

                        for (i = 0; i < ($thisType.debuglines.length | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["line[", $T0E().$Box(i), "]:", ($thisType.debuglines[i].MemberwiseClone()).toString()])));
                        }
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debugrays": 
                        $thisType.WriteLine(JSIL.ConcatString("rays: ", $T0E().$Box($thisType.debugrays.length)));

                        for (i = 0; i < ($thisType.debugrays.length | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["ray[", $T0E().$Box(i), "]:", ($thisType.debugrays[i].MemberwiseClone()).toString()])));
                        }
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debugshapes": 
                        $thisType.WriteLine(JSIL.ConcatString("shapes: ", $T0E().$Box($thisType.debugshapes.length)));

                        for (i = 0; i < ($thisType.debugshapes.length | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["shape[", $T0E().$Box(i), "]:\n", ($thisType.debugshapes[i].MemberwiseClone()).Debug(true)])));
                          $thisType.WriteLine();
                        }
                        break $labelgroup1;

                      case "multithreading": 
                        $label0 = 8 /* goto IL_31F6 */ ;
                        continue $labelgroup0;

                      case "multithread": 
                        $label0 = 8 /* goto IL_31F6 */ ;
                        continue $labelgroup0;

                      case "forcetriangulate": 

                        for (i = 0; i < ($thisType.debugshapes.length | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString("triangulating debugshapes[", $T0E().$Box(i), "]..."));
                          if (($thisType.debugshapes[i].MemberwiseClone()).Triangulate()) {
                            $thisType.Write(" done.");
                          } else {
                            $thisType.Write(" failed.");
                          }
                        }
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "shadowshape": 
                        $thisType.WriteLine($thisType.shadowShape.toString());
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "fizzbuzz": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          this.FizzBuzz(100);
                        } else if ($T0E().TryParse(value, /* ref */ intResult)) {
                          this.FizzBuzz(intResult.get());
                        } else {
                          $thisType.WriteLine(("error: rank \"" + value + "\" could not be parsed"));
                        }
                        break $labelgroup1;

                      case "timescale": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine("Sets the timescale");
                        } else if ($T14().TryParse(value, /* ref */ floatResult)) {
                          $thisType.timeScale = +floatResult.get();
                        } else {
                          $thisType.WriteLine(("error: \"" + value + "\" could not be parsed"));
                        }
                        $thisType.WriteLine(JSIL.ConcatString("Current timescale: ", $T14().$Box($thisType.timeScale)));
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "camerashake": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          $thisType.WriteLine("Causes the camera to shake for (magnitude, duration)");
                        } else {
                          var tempppoint = $thisType.PointParser(value).MemberwiseClone();
                          $thisType.CameraShake(+(tempppoint.Y), +(tempppoint.X));
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["Shaking the camera at ", $T0E().$Box(tempppoint.X), " magnitude for ", $T0E().$Box(tempppoint.Y), " seconds"])));
                        }
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "onslaught": 
                        $thisType.onslaughtMode = !$thisType.onslaughtMode;
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "enemies": 
                        $thisType.WriteLine(JSIL.ConcatString("enemyList currently contains ", $T0E().$Box($thisType.enemyList.get_Count()), " entities.\nuse \"print enemies\" to print a list"));
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "printenemies": 

                        for (i = 0; i < ($thisType.enemyList.get_Count() | 0); i = ((i + 1) | 0)) {
                          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["enemyList[", $T0E().$Box(i), "]:", $thisType.enemyList.get_Item(i), " Position:", $IM04().Call($thisType.enemyList.get_Item(i), null), " Health:", $T14().$Box($IM05().Call($thisType.enemyList.get_Item(i), null)), " StunTime:", $T14().$Box($IM06().Call($thisType.enemyList.get_Item(i), null))])));
                        }
                        $thisType.WriteLine();
                        break $labelgroup1;

                      case "debug": 
                        if ($T0A().IsNullOrWhiteSpace(value)) {
                          if (($thisType.debug | 0) > 0) {
                            this.Debug(0);
                          } else {
                            this.Debug(3);
                          }
                        } else if ($T0E().TryParse(value, /* ref */ intResult)) {
                          this.Debug(intResult.get());
                        } else {
                          $thisType.WriteLine(("error: rank \"" + value + "\" could not be parsed"));
                        }
                        $thisType.WriteLine(JSIL.ConcatString("debug: ", $T0E().$Box($thisType.debug)));
                        break $labelgroup1;

                      case "exit": 
                        this.Quit();
                        break $labelgroup1;

                      case "quit": 
                        this.Quit();
                        break $labelgroup1;

                      case "mow": 
                        if (!$T0A().IsNullOrWhiteSpace(value)) {
                          if ($T0E().TryParse(value, /* ref */ intResult)) {
                            $thisType.WriteLine("");

                            for (i = 0; i < (intResult.get() | 0); i = ((i + 1) | 0)) {
                              $thisType.developerConsole.Write("mow");
                            }
                            if ((intResult.get() | 0) > 25) {
                              $thisType.WriteLine("It's probably pretty cluttered here now... why don't you -clearlog-?");
                            }
                          } else {
                            $thisType.WriteLine("Yep, yep, I'm a snep!");
                          }
                        } else {
                          $thisType.WriteLine("Yep, yep, I'm a snep!");
                        }
                        break $labelgroup1;

                      case "credits": 
                        $thisType.WriteLine(this.Credits());
                        break $labelgroup1;

                      case "export": 
                        $thisType.ExportConsole();
                        break $labelgroup1;

                      case "exportconsole": 
                        $thisType.ExportConsole();
                        break $labelgroup1;

                      case "help": 
                        $thisType.WriteLine(this.Help());
                        break $labelgroup1;

                      default: 
                        $label1 = 1 /* goto IL_36C3 */ ;
                        continue $labelgroup1;

                    }
                    $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["smart fps: ", $T2E().$Box($thisType.smartFPS.get_Framerate()), ", raw fps: ", $T14().$Box(+((1 / +$thisType.get_DeltaTime())))])));
                    if ($thisType.recordFPS) {
                      $thisType.WriteLine(JSIL.ConcatString("meanfps:", $T2E().$Box($thisType.meanFPS.get_Framerate())));
                      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), [" maxfps:", $T2E().$Box($thisType.maxFPS), " at time:", $T2E().$Box($thisType.maxFPStime)])));
                      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), [" minfps:", $T2E().$Box($thisType.minFPS), " at time:", $T2E().$Box($thisType.minFPStime)])));
                    }
                    $thisType.WriteLine();
                    break $labelgroup1;

                  case 1: /* IL_261F */ 
                    if ($T1C().op_Inequality(
                        $thisType.PointParser(value), 
                        $T1C().get_Zero()
                      )) {
                      tempPoint = $thisType.PointParser(value).MemberwiseClone();
                      var expr_264B_cp_0 = $thisType.jamie;
                      expr_264B_cp_0.position.X = +expr_264B_cp_0.position.X + +(tempPoint.X);
                      var expr_2669_cp_0 = $thisType.jamie;
                      expr_2669_cp_0.position.Y = +expr_2669_cp_0.position.Y + +(tempPoint.X);
                      $thisType.WriteLine(JSIL.ConcatString("moved player to ", $thisType.jamie.position));
                    }
                    break $labelgroup1;

                  case 2: /* IL_29AC */ 
                    if ($T0A().IsNullOrWhiteSpace(value)) {
                      $thisType.WriteLine(JSIL.ConcatString("spawning enchant vending machine at ", $S07().Construct(((+$thisType.camera.X - (+$thisType.camera.X % 32)) | 0), ((+$thisType.camera.Y - (+$thisType.camera.Y % 32)) | 0))));
                      var tempvend = new ($T2C())(200, $T1F().Enchant, $S06().Construct($S07().Construct(((+$thisType.camera.X - (+$thisType.camera.X % 32)) | 0), ((+$thisType.camera.Y - (+$thisType.camera.Y % 32)) | 0)), $S07().Construct(64, 64)), (this.get_Content()).Load$b1($T2A())("enchant vending machine"), 0.35);
                      $thisType.onslaughtSpawner.vendingMachineList.Add(tempvend);
                    } else if ($S0B().CallStatic($T23(), "TryParse$b1", [$asm00.Irbis.VendingType], value, /* ref */ vendtype)) {
                      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["spawning ", value, " vending machine at ", $S07().Construct(((+$thisType.camera.X - (+$thisType.camera.X % 32)) | 0), ((+$thisType.camera.Y - (+$thisType.camera.Y % 32)) | 0))])));
                      tempvend = new ($T2C())(200, vendtype.get(), $S06().Construct($S07().Construct(((+$thisType.camera.X - (+$thisType.camera.X % 32)) | 0), ((+$thisType.camera.Y - (+$thisType.camera.Y % 32)) | 0)), $S07().Construct(64, 64)), (this.get_Content()).Load$b1($T2A())("enchant vending machine"), 0.35);
                      $thisType.onslaughtSpawner.vendingMachineList.Add(tempvend);
                    } else {
                      $thisType.WriteLine(("error: vending machine \"" + value + "\" could not be parsed"));
                    }
                    break $labelgroup1;

                  case 3: /* IL_2BC9 */ 
                    $label0 = 6 /* goto IL_2F15 */ ;
                    continue $labelgroup0;

                  case 4: /* IL_2E18 */ 

                    for (i = 0; i < ($thisType.onslaughtSpawner.vendingMachineList.get_Count() | 0); i = ((i + 1) | 0)) {
                      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["VendingMachine[", $T0E().$Box(i), "]: ", $thisType.onslaughtSpawner.vendingMachineList.get_Item(i)])));
                    }
                    $thisType.WriteLine();
                    break $labelgroup1;

                  case 5: /* IL_2E92 */ 
                    if ($T0E().TryParse(value, /* ref */ intResult)) {
                      $thisType.onslaughtSpawner.vendingMachineList.RemoveAt(intResult.get());
                      $thisType.WriteLine(JSIL.ConcatString("removed vending machine [", $T0E().$Box(intResult.get()), "]"));
                    } else {
                      $thisType.WriteLine(("error: variable \"" + variable + "\" could not be parsed"));
                    }
                    $thisType.WriteLine();
                    break $labelgroup1;

                  case 6: /* IL_2F15 */ 
                    if ($thisType.onslaughtSpawner !== null) {
                      $thisType.WriteLine($thisType.onslaughtSpawner.toString());
                    }
                    $thisType.WriteLine();
                    break $labelgroup1;

                  case 7: /* IL_2F40 */ 
                    $thisType.meanFPS = new ($T1B())(true);
                    $thisType.maxFPS = -1.7976931348623157E+308;
                    $thisType.minFPS = 1.7976931348623157E+308;
                    $thisType.recordFPS = true;
                    break $labelgroup1;

                  case 8: /* IL_31F6 */ 
                    $thisType.useMultithreading = !$thisType.useMultithreading;
                    $thisType.WriteLine(JSIL.ConcatString("multithreading:", $T1E().$Box($thisType.useMultithreading)));
                    $thisType.WriteLine();
                    break $labelgroup1;

                }
              }
            }

            $label1 = 1 /* goto IL_36C3 */ ;
            continue $labelgroup1;
          case 1: /* IL_36C3 */ 
            if ($T0A().IsNullOrWhiteSpace(extra)) {
              $thisType.WriteLine(("error: no command with name: \"" + variable + "\""));
            } else {
              $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["error: no command with name: \"", variable, "[", extra, "]\""])));
            }
            break $labelgroup1;

        }
      }
    }
  }; 

  function Irbis_ConvertOldLevelFilesToNew () {
    var lvl = new ($T20())(), testlvl = new ($T39())();
    var leeevelList = $T3A().GetFiles(".\\levels");
    $T09().WriteLine(JSIL.ConcatString("length pre format check: ", $T0E().$Box(leeevelList.length)));
    var tempLevelList = $S0C().Construct();
    var array = leeevelList;

    for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
      var s = array[j];
      tempLevelList.Add(s);
    }

    for (var i = 0; i < (tempLevelList.get_Count() | 0); i = ((i + 1) | 0)) {
      if (!(System.String.StartsWith(tempLevelList.get_Item(i), ".\\levels\\")) || !(System.String.EndsWith(tempLevelList.get_Item(i), ".lvl"))) {
        tempLevelList.RemoveAt(i);
      }
    }
    leeevelList = $T3B().prototype.ToArray.call(tempLevelList);
    $T09().WriteLine(JSIL.ConcatString("length post format check: ", $T0E().$Box(leeevelList.length)));
    array = leeevelList;

    for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
      s = array[j];
      (lvl = lvl.MemberwiseClone(), 
        $T20().prototype._ctor.call(lvl, true));
      $T09().WriteLine(JSIL.ConcatString("attempting load on: ", s));
      lvl.Load(s);
      $T09().WriteLine(lvl.toString());
      $T39().Save($T39().LevelConverter(lvl.MemberwiseClone()).MemberwiseClone(), s);
      (testlvl = testlvl.MemberwiseClone(), 
        $T39().prototype._ctor.call(testlvl, true));
      testlvl.Load(s);
      testlvl.Debug(true);
    }
    return true;
  }; 

  function Irbis_Credits () {
    var returncredits = $T0A().Empty;
    var text = "  Programming, Game Design, Level Design, Mechanics\r\n                 Jonathan \"Darius\" Miu\r\n                      LN2 Software\r\n\r\n                       Art Design:\r\n                          Flea\r\n                      pulexart.com\r\n\r\n                      Play Testers:\r\n                          Flea\r\n                          Reiji\r\n\r\n                       Animation:\r\n                        someone\r\n";

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var c = (text[i]);
      if (!c.Equals("\r")) {
        returncredits = (JSIL.ConcatString(returncredits, $T21().$Box(c)));
      }
    }
    return returncredits;
  }; 

  function Irbis_Debug (rank) {
    var $temp00;
    $thisType.debug = (rank | 0);
    if (($thisType.debug | 0) > 0) {
      this.set_IsMouseVisible($thisType.recordFPS = true);
      $thisType.meanFPS = new ($T1B())(true);
      $thisType.maxFPS = -1.7976931348623157E+308;
      $thisType.minFPS = 1.7976931348623157E+308;
      $thisType.debuginfo.align = $T3C().Left;
      $thisType.debuginfo.origin = $S07().Construct(3, 3);
    } else {
      $thisType.debuginfo.Update(($thisType.versionID + " v" + $thisType.versionNo), true);
      this.set_IsMouseVisible($thisType.recordFPS = false);

      for (var a$0 = $thisType.squareList._items, i$0 = 0, l$0 = ($thisType.squareList._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var s = a$0[i$0];
        s.color = $T00().Color$White$value.MemberwiseClone();
      }
      $thisType.debuginfo.align = $T3C().Right;
      $thisType.debuginfo.origin = $S07().Construct(((($thisType.resolution.X | 0) - 3) | 0), 3);
    }
  }; 

  function Irbis_DebugUpdate (threadContext) {
    var $temp00;
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            if (!($thisType.console || (+$thisType.elapsedTime <= (+($thisType.framedropfactor) * +$thisType.elapsedTime)))) {
              $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["recording framedrop(1/", $T0E().$Box($thisType.framedropfactor), ")\nold fps: ", $T2E().$Box(+((1 / +$thisType.elapsedTime))), ", new fps: ", $T2E().$Box(+((1 / +$thisType.elapsedTime))), "\ntimer: ", $T2E().$Box($thisType.get_Timer())])));
            }
            if ($thisType.recordFPS) {
              $thisType.meanFPS.Update($thisType.elapsedTime);
              if (+$thisType.maxFPS < +((1 / +$thisType.elapsedTime))) {
                $thisType.maxFPS = +((1 / +$thisType.elapsedTime));
                $thisType.maxFPStime = +$thisType.get_Timer();
              }
              if (+$thisType.minFPS > +((1 / +$thisType.elapsedTime))) {
                $thisType.minFPS = +((1 / +$thisType.elapsedTime));
                $thisType.minFPStime = +$thisType.get_Timer();
              }
            }
            switch ($thisType.debug) {
              case 1: 
                $label0 = 1 /* goto IL_1EC */ ;
                continue $labelgroup0;

              case 2: 
                $label0 = 1 /* goto IL_1EC */ ;
                continue $labelgroup0;

              case 3: 
                break;

              case 4: 
                break;

              case 5: 
                break;

              default: 
                break $labelgroup0;

            }
            this.PrintDebugInfo();
            if ($thisType.jamie !== null) {

              for (var a$0 = $thisType.squareList._items, i$0 = 0, l$0 = ($thisType.squareList._size | 0); i$0 < l$0; ($temp00 = i$0, 
                  i$0 = ((i$0 + 1) | 0), 
                  $temp00)) {
                var s = a$0[i$0];
                if ($thisType.jamie.collided.Contains(s)) {
                  s.color = $T00().Color$Cyan$value.MemberwiseClone();
                } else {
                  s.color = $T00().Color$White$value.MemberwiseClone();
                }
              }
            }
            break $labelgroup0;

          case 1: /* IL_1EC */ 
            $thisType.debuginfo.Update(JSIL.ConcatString("\n\n\u1d25", $T2E().__Type__.__PublicInterface__.$ToString($thisType.smartFPS.get_Framerate(), "0000", null)), true);
            break $labelgroup0;

        }
      }
    } finally {
      if (($S05().CallStatic($T12(), "Decrement", null, /* ref */ new JSIL.MemberReference($thisType, "pendingThreads")) | 0) <= 0) {
        $thisType.doneEvent.Set();
      }
    }
  }; 

  function Irbis_Directions$04 (Rectangle1, Rectangle2) {
    return $S0D().CallStatic($thisType, "Directions", null, 
      Rectangle1.get_Center(), 
      Rectangle2.get_Center()
    );
  }; 

  function Irbis_Directions$05 (Point1, Point2) {
    if ((Point1.X | 0) > (Point2.X | 0)) {
      var result = $T3C().Left;
    } else if ((Point2.X | 0) > (Point1.X | 0)) {
      result = $T3C().Right;
    } else {
      result = $T3C().Forward;
    }
    return result;
  }; 

  function Irbis_Distance$06 (p1, p2) {
    return Math.fround(Math.sqrt($S0E().CallStatic($thisType, "DistanceSquared", null, p1, p2)));
  }; 

  function Irbis_Distance$07 (rectangle1, rectangle2) {
    return Math.fround(Math.sqrt($S0F().CallStatic($thisType, "DistanceSquared", null, rectangle1.MemberwiseClone(), rectangle2.MemberwiseClone())));
  }; 

  function Irbis_Distance$08 (rectangle, point) {
    return Math.fround(Math.sqrt($S10().CallStatic($thisType, "DistanceSquared", null, rectangle.MemberwiseClone(), point.MemberwiseClone())));
  }; 

  function Irbis_DistanceSquared$09 (p1, p2) {
    var tempX = (((p2.X | 0) - (p1.X | 0)) | 0);
    var tempY = (((p2.Y | 0) - (p1.Y | 0)) | 0);
    return +(Math.imul(tempX, tempX) + Math.imul(tempY, tempY));
  }; 

  function Irbis_DistanceSquared$0A (rectangle1, rectangle2) {
    var p = $T1C().get_Zero().MemberwiseClone();
    var p2 = $T1C().get_Zero().MemberwiseClone();
    if ((rectangle1.get_Left() | 0) > (rectangle2.get_Right() | 0)) {
      p.X = (rectangle1.get_Left() | 0);
      p2.X = (rectangle2.get_Right() | 0);
    } else if ((rectangle2.get_Left() | 0) > (rectangle1.get_Right() | 0)) {
      p.X = (rectangle1.get_Right() | 0);
      p2.X = (rectangle2.get_Left() | 0);
    }
    if ((rectangle1.get_Bottom() | 0) < (rectangle2.get_Top() | 0)) {
      p.Y = (rectangle1.get_Bottom() | 0);
      p2.Y = (rectangle2.get_Top() | 0);
    } else if ((rectangle2.get_Bottom() | 0) < (rectangle1.get_Top() | 0)) {
      p.Y = (rectangle1.get_Top() | 0);
      p2.Y = (rectangle2.get_Bottom() | 0);
    }
    return $S0E().CallStatic($thisType, "DistanceSquared", null, p, p2);
  }; 

  function Irbis_DistanceSquared$0B (rectangle, point) {
    var p = $T1C().get_Zero().MemberwiseClone();
    if ((rectangle.get_Left() | 0) > (point.X | 0)) {
      p.X = (rectangle.get_Left() | 0);
    } else if ((rectangle.get_Right() | 0) < (point.X | 0)) {
      p.X = (rectangle.get_Right() | 0);
    } else {
      point.X = 0;
    }
    if ((rectangle.get_Bottom() | 0) < (point.Y | 0)) {
      p.Y = (rectangle.get_Bottom() | 0);
    } else if ((rectangle.get_Top() | 0) > (point.Y | 0)) {
      p.Y = (rectangle.get_Top() | 0);
    } else {
      point.Y = 0;
    }
    return $S0E().CallStatic($thisType, "DistanceSquared", null, p, point);
  }; 

  function Irbis_Draw (gameTime) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06;
    (this.get_GraphicsDevice()).Clear($T00().Color$CornflowerBlue$value.MemberwiseClone());
    $thisType.spriteBatch.Begin(
      $T42().FrontToBack, 
      $T43().AlphaBlend, 
      $T44().PointWrap, 
      $T45().None, 
      $T46().CullCounterClockwise, 
      null, 
      $thisType.background.MemberwiseClone()
    );

    for (var a$0 = $thisType.backgroundSquareList._items, i$0 = 0, l$0 = ($thisType.backgroundSquareList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var b = a$0[i$0];
      b.Draw($thisType.spriteBatch);
    }
    $thisType.spriteBatch.End();
    $thisType.spriteBatch.Begin(
      $T42().FrontToBack, 
      $T43().AlphaBlend, 
      $T44().PointWrap, 
      $T45().None, 
      $T46().CullCounterClockwise, 
      null, 
      $thisType.foreground.MemberwiseClone()
    );

    for (var a$1 = $thisType.squareList._items, i$1 = 0, l$1 = ($thisType.squareList._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var s = a$1[i$1];
      s.Draw($thisType.spriteBatch);
    }

    for (var a$2 = $thisType.enemyList._items, i$2 = 0, l$2 = ($thisType.enemyList._size | 0); i$2 < l$2; ($temp02 = i$2, 
        i$2 = ((i$2 + 1) | 0), 
        $temp02)) {
      var e = a$2[i$2];
      if (e !== null) {
        $IM07().Call(e, null, $thisType.spriteBatch);
      }
    }
    if ($thisType.jamie !== null) {
      $thisType.jamie.Draw($thisType.spriteBatch);
    }
    if (($thisType.debug | 0) > 1) {
      $S11().CallStatic($T47(), "Draw", null, $thisType.spriteBatch, $S06().Construct($T1C().get_Zero(), $thisType.screenspace.get_Size()), $T00().Color$Magenta$value.MemberwiseClone(), false);
    }
    if ($thisType.onslaughtSpawner !== null) {

      for (var a$3 = $thisType.onslaughtSpawner.vendingMachineList._items, i$3 = 0, l$3 = ($thisType.onslaughtSpawner.vendingMachineList._size | 0); i$3 < l$3; ($temp03 = i$3, 
          i$3 = ((i$3 + 1) | 0), 
          $temp03)) {
        var v = a$3[i$3];
        v.Draw($thisType.spriteBatch);
      }
    }
    $thisType.spriteBatch.End();
    if (($thisType.debug | 0) > 4) {
      var enumerator4 = $thisType.basicEffect.Effect$CurrentTechnique$value.EffectTechnique$Passes$value.GetEnumerator();
      try {

        while (enumerator4.MoveNext()) {
          var effectPass = enumerator4.get_Current();
          effectPass.Apply();
          $thisType.shadowShape.Draw();
        }
      } finally {
        $IM03().Call(enumerator4, null);
      }
    }
    $thisType.spriteBatch.Begin(
      $T42().FrontToBack, 
      $T43().AlphaBlend, 
      $T44().PointWrap, 
      $T45().None, 
      $T46().CullCounterClockwise, 
      null, 
      $thisType.UIground.MemberwiseClone()
    );
    if ($thisType.vendingMachineMenu !== null) {
      $thisType.vendingMachineMenu.Draw($thisType.spriteBatch);
    } else if ($thisType.bars !== null) {
      $thisType.bars.Draw($thisType.spriteBatch);
    }
    if (!$thisType.onslaughtMode) {
      $thisType.timerDisplay.Draw($thisType.spriteBatch);
    } else {
      $thisType.onslaughtDisplay.Draw($thisType.spriteBatch);
    }
    if (!$thisType.sceneIsMenu) {
      $thisType.debuginfo.Draw($thisType.spriteBatch);
    }
    if (($thisType.debug | 0) > 1) {
      $S11().CallStatic($T47(), "Draw", null, $thisType.spriteBatch, $thisType.boundingBox.MemberwiseClone(), $T00().Color$Magenta$value.MemberwiseClone(), false);
    }
    if (!((!$thisType.console && 
          (+$thisType.consoleMoveTimer <= 0)) || $thisType.sceneIsMenu)) {
      $thisType.spriteBatch.Draw(
        $thisType.consoleTex, 
        $thisType.consoleRect.MemberwiseClone(), 
        $thisType.consoleTex.get_Bounds().MemberwiseClone(), 
        $thisType.consoleRectColor.MemberwiseClone(), 
        0, 
        $T01().get_Zero().MemberwiseClone(), 
        $T4E().None, 
        0.999
      );
      $thisType.consoleWriteline.Draw($thisType.spriteBatch);
      $thisType.developerConsole.Draw($thisType.spriteBatch);
    }
    $thisType.spriteBatch.End();
    if ($thisType.sceneIsMenu) {
      $thisType.spriteBatch.Begin(
        $T42().FrontToBack, 
        $T43().AlphaBlend, 
        $T44().PointWrap, 
        $T45().None, 
        $T46().CullCounterClockwise, 
        null, 
        $thisType.UIground.MemberwiseClone()
      );
      if (!$thisType.levelEditor) {
        if (($thisType.levelLoaded | 0) > 0) {
          $thisType.spriteBatch.Draw(
            $thisType.nullTex, 
            $thisType.zeroScreenspace.MemberwiseClone(), 
            null, 
            $S00().Construct(31, 29, 37, 205), 
            0, 
            $T01().get_Zero().MemberwiseClone(), 
            $T4E().None, 
            0
          );
        } else if (($thisType.scene | 0) === 0) {
          if ($thisType.logos !== null) {

            for (var i = 0; i < ((($thisType.logos.get_Count() | 0) - 1) | 0); i = ((i + 1) | 0)) {
              $S12().CallVirtual("Draw", null, $thisType.spriteBatch, 
                $thisType.logos.get_Item(i), 
                $S01().Construct(+(Math.imul(i, 72) + 5), +(($thisType.zeroScreenspace.Height | 0) - 69)), 
                null, 
                $T00().Color$White$value.MemberwiseClone(), 
                0, 
                $T01().get_Zero().MemberwiseClone(), 
                1, 
                $T4E().None, 
                0.9
              );
            }
          }
        }
      }
      $thisType.debuginfo.Draw($thisType.spriteBatch);
      if (!((($thisType.scene | 0) !== 3) || 
          (($thisType.menuSelection | 0) < 0) || (($thisType.menuSelection | 0) > 3))) {
        $S11().CallStatic($T47(), "Draw", null, $thisType.spriteBatch, $thisType.boundingBox.MemberwiseClone(), $T00().Color$Magenta$value.MemberwiseClone(), false);
      }
      if (($thisType.scene | 0) === 5) {

        for (var a$4 = $thisType.sliderList._items, i$4 = 0, l$4 = ($thisType.sliderList._size | 0); i$4 < l$4; ($temp04 = i$4, 
            i$4 = ((i$4 + 1) | 0), 
            $temp04)) {
          var s2 = a$4[i$4];
          s2.Draw($thisType.spriteBatch);
        }
      }

      for (var a$5 = $thisType.buttonList._items, i$5 = 0, l$5 = ($thisType.buttonList._size | 0); i$5 < l$5; ($temp05 = i$5, 
          i$5 = ((i$5 + 1) | 0), 
          $temp05)) {
        var b2 = a$5[i$5];
        b2.Draw($thisType.spriteBatch);
      }

      for (i = 0; i < ($thisType.printList.get_Count() | 0); i = ((i + 1) | 0)) {
        if (($thisType.scene | 0) === 3) {
          if (i === 0) {
            if (!((($thisType.menuSelection | 0) < 0) || (($thisType.menuSelection | 0) > 3))) {
              ($thisType.printList.get_Item(i)).Draw($thisType.spriteBatch);
            }
          } else {
            ($thisType.printList.get_Item(i)).Draw($thisType.spriteBatch);
          }
        } else {
          ($thisType.printList.get_Item(i)).Draw($thisType.spriteBatch);
        }
      }

      for (var a$6 = $thisType.sList._items, i$6 = 0, l$6 = ($thisType.sList._size | 0); i$6 < l$6; ($temp06 = i$6, 
          i$6 = ((i$6 + 1) | 0), 
          $temp06)) {
        s = a$6[i$6];
        s.Draw($thisType.spriteBatch);
      }
      $thisType.spriteBatch.End();
      if (!$thisType.levelEditor) {
        $thisType.spriteBatch.Begin(
          $T42().FrontToBack, 
          $T43().AlphaBlend, 
          $T44().LinearClamp, 
          $T45().None, 
          $T46().CullCounterClockwise, 
          null, 
          $thisType.UIground.MemberwiseClone()
        );
        $S12().CallVirtual("Draw", null, $thisType.spriteBatch, 
          $thisType.menuTex[$thisType.scene], 
          $T01().get_Zero().MemberwiseClone(), 
          null, 
          $T00().Color$White$value.MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          +((70 / +($thisType.menuTex[$thisType.scene].get_Height()))) * +$thisType.screenScale, 
          $T4E().None, 
          0.5
        );
        $thisType.spriteBatch.End();
      }
      if (!(!$thisType.console && (+$thisType.consoleMoveTimer <= 0))) {
        $thisType.spriteBatch.Begin(
          $T42().FrontToBack, 
          $T43().AlphaBlend, 
          $T44().PointClamp, 
          $T45().None, 
          $T46().CullCounterClockwise, 
          null, 
          $thisType.UIground.MemberwiseClone()
        );
        $thisType.spriteBatch.Draw(
          $thisType.consoleTex, 
          $thisType.consoleRect.MemberwiseClone(), 
          null, 
          $thisType.consoleRectColor.MemberwiseClone(), 
          0, 
          $T01().get_Zero().MemberwiseClone(), 
          $T4E().None, 
          0.999
        );
        $thisType.consoleWriteline.Draw($thisType.spriteBatch);
        $thisType.developerConsole.Draw($thisType.spriteBatch);
        $thisType.spriteBatch.End();
      }
    }
    $T08().prototype.Draw.call(this, gameTime);
  }; 

  function Irbis_EnableLevelEditor () {
    this.ClearUI();
    $thisType.levelEditor = $thisType.sceneIsMenu = true;
    $thisType.jamie = null;
    $thisType.enemyList.Clear();
  }; 

  function Irbis_ExportConsole () {
    if ($thisType.meanFPS !== null) {
      $thisType.WriteLine(JSIL.ConcatString("meanFPS: ", $T2E().$Box($thisType.meanFPS.get_Framerate())));
      $thisType.WriteLine(JSIL.ConcatString(" minFPS: ", $T2E().$Box($thisType.minFPS)));
      $thisType.WriteLine(JSIL.ConcatString("at time: ", $T2E().$Box($thisType.minFPStime)));
      $thisType.WriteLine(JSIL.ConcatString(" maxFPS: ", $T2E().$Box($thisType.maxFPS)));
      $thisType.WriteLine(JSIL.ConcatString("at time: ", $T2E().$Box($thisType.maxFPStime)));
      $thisType.WriteLine(JSIL.ConcatString(" median: ", $T2E().$Box(+(((+$thisType.minFPS + +$thisType.maxFPS) / 2)))));
    }
    $thisType.ExportString($thisType.developerConsole.get_Konsole());
  }; 

  function Irbis_ExportString (stringtoexport) {
    var timenow = (($T52().get_Now().MemberwiseClone().ToShortDateString() + "." + $S13().CallVirtual("ToString", null, $T52().get_Now().MemberwiseClone(), "HH:mm:ss.fff")));
    var nameoffile = ".\\";
    var text = timenow;

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var c = (text[i]);
      if (!(!$T21().IsDigit(c) && !c.Equals("."))) {
        nameoffile = (JSIL.ConcatString(nameoffile, $T21().$Box(c)));
      }
    }
    nameoffile = (JSIL.ConcatString(nameoffile, ".txt"));
    $T09().WriteLine(("saving " + nameoffile + "..."));
    $thisType.WriteLine(("saving " + nameoffile + "..."));
    $T26().WriteAllText(nameoffile, stringtoexport);
  }; 

  function Irbis_FizzBuzz (loops) {

    for (var i = 1; i <= (loops | 0); i = ((i + 1) | 0)) {
      var fizz = ((i % 3) | 0) === 0;
      var buzz = ((i % 5) | 0) === 0;
      $T09().WriteLine();
      if (!(!fizz && !buzz)) {
        if (fizz) {
          $T09().Write("fizz");
        }
        if (buzz) {
          $T09().Write("buzz");
        }
      } else {
        $T09().Write(i);
      }
    }
  }; 

  function Irbis_GenerateCameraShakeTarget () {
    $thisType.cameraShakePrevLocation = $thisType.cameraShakeTargetLocation.MemberwiseClone();
    $thisType.cameraShakeTargetLocation.X = +$thisType.mainCamera.X + (((Math.fround($thisType.RAND.NextDouble()) * 2) - 1) * +$thisType.cameraShakeMagnitude);
    $thisType.cameraShakeTargetLocation.Y = +$thisType.mainCamera.Y + (((Math.fround($thisType.RAND.NextDouble()) * 2) - 1) * +$thisType.cameraShakeMagnitude);
    if (($thisType.debug | 0) > 0) {
      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["       mainCamera:", $thisType.mainCamera, "\ncameraShakeTarget:", $thisType.cameraShakeTargetLocation])));
      $thisType.WriteLine();
    }
    $thisType.cameraShakeLerpTime = +$thisType.cameraShakeLerpTimeMax;
  }; 

  function Irbis_get_DeltaTime () {
    return $thisType.deltaTime;
  }; 

  function Irbis_get_GetAttackKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.attackKey) || $thisType.keyboardState.IsKeyDown($thisType.altAttackKey));
  }; 

  function Irbis_get_GetAttackKeyDown () {
    return ($thisType.GetKeyDown($thisType.attackKey) || $thisType.GetKeyDown($thisType.altAttackKey));
  }; 

  function Irbis_get_GetAttackKeyUp () {
    return ($thisType.GetKeyUp($thisType.attackKey) || $thisType.GetKeyUp($thisType.altAttackKey));
  }; 

  function Irbis_get_GetDownKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.downKey) || $thisType.keyboardState.IsKeyDown($thisType.altDownKey));
  }; 

  function Irbis_get_GetDownKeyDown () {
    return ($thisType.GetKeyDown($thisType.downKey) || $thisType.GetKeyDown($thisType.altDownKey));
  }; 

  function Irbis_get_GetDownKeyUp () {
    return ($thisType.GetKeyUp($thisType.downKey) || $thisType.GetKeyUp($thisType.altDownKey));
  }; 

  function Irbis_get_GetEnterKey () {
    return $thisType.keyboardState.IsKeyDown($T1D().Enter);
  }; 

  function Irbis_get_GetEnterKeyDown () {
    return $thisType.GetKeyDown($T1D().Enter);
  }; 

  function Irbis_get_GetEnterKeyUp () {
    return $thisType.GetKeyUp($T1D().Enter);
  }; 

  function Irbis_get_GetEscapeKey () {
    return $thisType.keyboardState.IsKeyDown($T1D().Escape);
  }; 

  function Irbis_get_GetEscapeKeyDown () {
    return $thisType.GetKeyDown($T1D().Escape);
  }; 

  function Irbis_get_GetEscapeKeyUp () {
    return $thisType.GetKeyUp($T1D().Escape);
  }; 

  function Irbis_get_GetJumpKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.jumpKey) || $thisType.keyboardState.IsKeyDown($thisType.altJumpKey));
  }; 

  function Irbis_get_GetJumpKeyDown () {
    return ($thisType.GetKeyDown($thisType.jumpKey) || $thisType.GetKeyDown($thisType.altJumpKey));
  }; 

  function Irbis_get_GetJumpKeyUp () {
    return ($thisType.GetKeyUp($thisType.jumpKey) || $thisType.GetKeyUp($thisType.altJumpKey));
  }; 

  function Irbis_get_GetKeyboardState () {
    return $thisType.keyboardState;
  }; 

  function Irbis_get_GetLeftKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.leftKey) || $thisType.keyboardState.IsKeyDown($thisType.altLeftKey));
  }; 

  function Irbis_get_GetLeftKeyDown () {
    return ($thisType.GetKeyDown($thisType.leftKey) || $thisType.GetKeyDown($thisType.altLeftKey));
  }; 

  function Irbis_get_GetLeftKeyUp () {
    return ($thisType.GetKeyUp($thisType.leftKey) || $thisType.GetKeyUp($thisType.altLeftKey));
  }; 

  function Irbis_get_GetLeftMouseDown () {
    return (($thisType.mouseState.get_LeftButton() === $T56().Pressed) && ($thisType.previousMouseState.get_LeftButton() === $T56().Released));
  }; 

  function Irbis_get_GetMouseState () {
    return $thisType.mouseState;
  }; 

  function Irbis_get_GetPotionKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.potionKey) || $thisType.keyboardState.IsKeyDown($thisType.altPotionKey));
  }; 

  function Irbis_get_GetPotionKeyDown () {
    return ($thisType.GetKeyDown($thisType.potionKey) || $thisType.GetKeyDown($thisType.altPotionKey));
  }; 

  function Irbis_get_GetPotionKeyUp () {
    return ($thisType.GetKeyUp($thisType.potionKey) || $thisType.GetKeyUp($thisType.altPotionKey));
  }; 

  function Irbis_get_GetPreviousKeyboardState () {
    return $thisType.previousKeyboardState;
  }; 

  function Irbis_get_GetPreviousMouseState () {
    return $thisType.previousMouseState;
  }; 

  function Irbis_get_GetRightKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.rightKey) || $thisType.keyboardState.IsKeyDown($thisType.altRightKey));
  }; 

  function Irbis_get_GetRightKeyDown () {
    return ($thisType.GetKeyDown($thisType.rightKey) || $thisType.GetKeyDown($thisType.altRightKey));
  }; 

  function Irbis_get_GetRightKeyUp () {
    return ($thisType.GetKeyUp($thisType.rightKey) || $thisType.GetKeyUp($thisType.altRightKey));
  }; 

  function Irbis_get_GetRollKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.rollKey) || $thisType.keyboardState.IsKeyDown($thisType.altRollKey));
  }; 

  function Irbis_get_GetRollKeyDown () {
    return ($thisType.GetKeyDown($thisType.rollKey) || $thisType.GetKeyDown($thisType.altRollKey));
  }; 

  function Irbis_get_GetRollKeyUp () {
    return ($thisType.GetKeyUp($thisType.rollKey) || $thisType.GetKeyUp($thisType.altRollKey));
  }; 

  function Irbis_get_GetShieldKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.shieldKey) || $thisType.keyboardState.IsKeyDown($thisType.altShieldKey));
  }; 

  function Irbis_get_GetShieldKeyDown () {
    return ($thisType.GetKeyDown($thisType.shieldKey) || $thisType.GetKeyDown($thisType.altShieldKey));
  }; 

  function Irbis_get_GetShieldKeyUp () {
    return ($thisType.GetKeyUp($thisType.shieldKey) || $thisType.GetKeyUp($thisType.altShieldKey));
  }; 

  function Irbis_get_GetShockwaveKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.shockwaveKey) || $thisType.keyboardState.IsKeyDown($thisType.altShockwaveKey));
  }; 

  function Irbis_get_GetShockwaveKeyDown () {
    return ($thisType.GetKeyDown($thisType.shockwaveKey) || $thisType.GetKeyDown($thisType.altShockwaveKey));
  }; 

  function Irbis_get_GetShockwaveKeyUp () {
    return ($thisType.GetKeyUp($thisType.shockwaveKey) || $thisType.GetKeyUp($thisType.altShockwaveKey));
  }; 

  function Irbis_get_GetUpKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.upKey) || $thisType.keyboardState.IsKeyDown($thisType.altUpKey));
  }; 

  function Irbis_get_GetUpKeyDown () {
    return ($thisType.GetKeyDown($thisType.upKey) || $thisType.GetKeyDown($thisType.altUpKey));
  }; 

  function Irbis_get_GetUpKeyUp () {
    return ($thisType.GetKeyUp($thisType.upKey) || $thisType.GetKeyUp($thisType.altUpKey));
  }; 

  function Irbis_get_GetUseKey () {
    return ($thisType.keyboardState.IsKeyDown($thisType.useKey) || $thisType.keyboardState.IsKeyDown($thisType.altUseKey));
  }; 

  function Irbis_get_GetUseKeyDown () {
    return ($thisType.GetKeyDown($thisType.useKey) || $thisType.GetKeyDown($thisType.altUseKey));
  }; 

  function Irbis_get_GetUseKeyUp () {
    return ($thisType.GetKeyUp($thisType.useKey) || $thisType.GetKeyUp($thisType.altUseKey));
  }; 

  function Irbis_get_RandomBool () {
    return (+$thisType.RAND.NextDouble() > 0.5);
  }; 

  function Irbis_get_RandomFloat () {
    return Math.fround($thisType.RAND.NextDouble());
  }; 

  function Irbis_get_Timer () {
    return $thisType.timer;
  }; 

  function Irbis_GetKey (key) {
    return $thisType.keyboardState.IsKeyDown(key);
  }; 

  function Irbis_GetKeyDown (key) {
    return !(!$thisType.keyboardState.IsKeyDown(key) || !$thisType.previousKeyboardState.IsKeyUp(key));
  }; 

  function Irbis_GetKeyUp (key) {
    return !(!$thisType.keyboardState.IsKeyUp(key) || !$thisType.previousKeyboardState.IsKeyDown(key));
  }; 

  function Irbis_GetLevelChapterAndMap (level) {
    if (!(!$thisType.IsDefaultLevelFormat(level) || !(level[0]).Equals("c"))) {
      var temp = (level.substr(1));
      var chapter = $T0A().Empty;
      var map = $T0A().Empty;
      var encounteredMapChar = false;
      var text = temp;

      for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
        var c = (text[i]);
        if (!$T21().IsDigit(c)) {
          if (!(!c.Equals("b") && !c.Equals("o"))) {
            encounteredMapChar = true;
          }
        } else if (encounteredMapChar) {
          map = (JSIL.ConcatString(map, $T21().$Box(c)));
        } else {
          chapter = (JSIL.ConcatString(chapter, $T21().$Box(c)));
        }
      }
      var result = $S07().Construct($T0E().Parse(chapter), $T0E().Parse(map));
    } else {
      result = $T1C().get_Zero().MemberwiseClone();
    }
    return result;
  }; 

  function Irbis_HandleInput (sender, e) {
    var character = e.get_Character();
    switch (character) {
      case "\x08": 
        if (($thisType.textInputBuffer.length | 0) > 0) {
          $thisType.textInputBuffer = ($thisType.textInputBuffer.substr(0, ((($thisType.textInputBuffer.length | 0) - 1) | 0)));
        }
        break;

      case "\t": 
        $thisType.textInputBuffer = (JSIL.ConcatString($thisType.textInputBuffer, "    "));
        break;

      default: 
        if ((character.charCodeAt(0) | 0) !== (("\r").charCodeAt(0) | 0)) {
          $thisType.textInputBuffer = (JSIL.ConcatString($thisType.textInputBuffer, $T21().$Box(e.get_Character())));
        }
        break;

    }
  }; 

  function Irbis_Help () {
    var returnhelp = $T0A().Empty;
    var text = "enter commands in the form: command=value or command=(optional value)\r\nList of commands:\r\n\r\ndebug=(rank)  -------  enables debugmode         leveleditor  ------------  enter level editor\r\nversion  ------------  print current version      savelevel=(name)  ------  save the current level\r\nsummonenemy=(hp)  ---  summons one enemy          newlevel=(name)  -------  creates empty level\r\nsummonenemies=(X)  --  summon -X- enemies         spawnblock=(texture)  --  spawns block at screen center\r\nnotarget  -----------  disables all AI            squarelist  ------------  lists ALL squares\r\nkillall  ------------  kill all enemies           spawnpoints  -----------  list enemy spawn points\r\nskiptowave=wave  ----  if onslaught, skip to wave  removespawn=index  ----  remove spawn point\r\nloadlevel=name  -----  if exists, load level       removespawns=startIndex,endIndex\r\nkillme  -------------  kills the player            removeallspawns  ------  deletes all spawns\r\nprintsave  ----------  print autosave info         addspawn=X,Y  ---------  adds spawn at position X, Y\r\ncredits  ------------  display credits           Enchants  ---------------  list active enchants\r\nexport  -------------  export log to file         addenchant=Type  -------  add enchant to active enchants\r\nhelp  ---------------  displays this msg           (bleed, fire, frost, knockback, poison, sharpness, stun)\r\nmove=X,Y  -----------  move player X,Y pixels      add the same enchant multiple times to upgrade its strength\r\nexit  ---------------  quits                      disenchant  ------------  remove all enchants\r\nquit  ---------------  exits\r\n";

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var c = (text[i]);
      if (!c.Equals("\r")) {
        returnhelp = (JSIL.ConcatString(returnhelp, $T21().$Box(c)));
      }
    }
    return returnhelp;
  }; 

  function Irbis_Initialize () {
    $T09().WriteLine("initializing");
    $thisType.threadCount = ($T58().get_ProcessorCount() | 0);
    $thisType.sList = $S14().Construct();
    $thisType.collisionObjects = $S15().Construct();
    $thisType.squareList = $S14().Construct();
    $thisType.backgroundSquareList = $S14().Construct();
    $thisType.buttonList = $S16().Construct();
    $thisType.enemyList = $S17().Construct();
    $thisType.printList = $S18().Construct();
    $thisType.sliderList = $S19().Construct();
    $thisType.doneEvent = new ($T5A())(false);
    $thisType.AIenabled = true;
    $thisType.nextframe = true;
    this.randomTimer = 0;
    $thisType.basicEffect = $S1A().Construct($thisType.graphics.get_GraphicsDevice());
    $thisType.basicEffect.set_TextureEnabled(false);
    $thisType.basicEffect.set_VertexColorEnabled(true);
    $thisType.cameraShakeLerpTimeMax = 0.025;
    $thisType.cameraShakeLerpTime = 0;
    $thisType.levelLoaded = -1;
    $thisType.RAND = $S1B().Construct();
    $thisType.displayEnemyHealth = false;
    (this.get_Window()).add_TextInput($T5D().New(this, null, new JSIL.MethodPointerInfo($thisType, "TextEntered", $S1C(), false, false)));
    this.onTextEntered = $T5E().Combine(this.onTextEntered, $T5D().New(this, null, new JSIL.MethodPointerInfo($thisType, "HandleInput", $S1D(), false, false)));
    $thisType.acceptTextInput = false;
    $thisType.textInputBuffer = "";
    $thisType.foreground = $T03().get_Identity().MemberwiseClone();
    $thisType.background = $T03().get_Identity().MemberwiseClone();
    $thisType.UIground = $T03().get_Identity().MemberwiseClone();
    $T08().prototype.Initialize.call(this);
  }; 

  function Irbis_Invocation () {
    var returninvocation = $T0A().Empty;
    var text = "Don't call it a comb-back; I'll have hair for years.\r\nI\u2019M SCARED.\r\nI\u2019m scared that my abilities are gone.\r\nI\u2019m scared that I\u2019m going to fuck this up.\r\nAnd I\u2019m scared of you.\r\nI don't want to start, but I will.\r\nThis is an invocation for anyone who hasn't begun, who's stuck in a terrible place between zero and one.\r\nLet me realize that my past failures at follow-through are no indication of my future performance. They're\r\njust healthy little fires that are going to warm up my ass.\r\nIf my F.I.L.D.I. is strong, let me keep him in a velvet box until I really, really need him. If my F.I.L.D.I.\r\nis weak, let me feed him oranges and not let him gorge himself on ego and arrogance.\r\nLet me not hit up my Facebook like it's a crack pipe, keep the browser closed.\r\nIf I catch myself wearing a too-too (too fat, too late, too old) let me shake it off like a donkey would\r\nshake off something it doesn't like.\r\nAnd when I get that feeling in my stomach, you know the feeling when all of a sudden you get a ball of energy\r\nand it shoots down into your legs and up into your arms and tells you to get up and stand up and go to the\r\nrefrigerator and get a cheese sandwich? That's my cheese monster talking. And my cheese monster will never be\r\nsatisfied by cheddar, only the cheese of accomplishment.\r\nLet me think about the people who I care about the most, and how when they fail or disappoint me... I still\r\nlove them, I still give them chances, and I still see the best in them. Let me extend that generosity to myself.\r\nLet me find and use metaphors to help me understand the world around me and give me the strength to get rid of\r\nthem when it's apparent they no longer work.\r\nLet me thank the parts of me that I don't understand or are outside of my rational control like my creativity\r\nand my courage. And let me remember that my courage is a wild dog. It won't just come when I call it, I have to\r\nchase it down and hold on as tight as I can.\r\nLet me not be so vain to think that I'm the sole author of my victories and a victim of my defeats.\r\nLet me remember that the unintended meaning that people project onto what I do is neither my fault or something\r\nI can take credit for.\r\nPerfectionism may look good in his shiny shoes but he's a little bit of an asshole and no one invites him to\r\ntheir pool parties.\r\nLet me remember that the impact of criticism is often not the intent of the critic, but when the intent is evil,\r\nthat's what the block button's for.\r\nAnd when I eat my critique, let me be able to separate out the good advice from the bitter herbs.\r\n(There are few people who won't be disarmed by a genuine smile.)\r\n(A big impact on a few can be worth more than a small impact.)\r\nLet me not think of my work only as a stepping stone to something else, and if it is, let me become fascinated\r\nwith the shape of the stone.\r\nLet me take the idea that has gotten me this far and put it to bed. What I am about to do will not be that, but\r\nit will be something.\r\nThere is no need to sharpen my pencils anymore, my pencils are sharp enough.\r\nEven the dull ones will make a mark.\r\nWarts and all, let's start this shit up.\r\nAnd god let me enjoy this. Life isn't just a sequence of waiting for things to be done.\r\n\r\nThank you, Ze Frank, for the inspiration.";

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var c = (text[i]);
      if (!c.Equals("\r")) {
        returninvocation = (JSIL.ConcatString(returninvocation, $T21().$Box(c)));
      }
    }
    return returninvocation;
  }; 

  function Irbis_IsDefaultLevelFormat (level) {
    if (!(((level.length | 0) <= 0) || !(level[0]).Equals("c"))) {
      var temp = (level.substr(1));
      var encounteredMapChar = false;
      var text = temp;

      for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
        var c = (text[i]);
        if (!$T21().IsDigit(c)) {
          if (encounteredMapChar || (!c.Equals("b") && 
              !c.Equals("o"))) {
            var result = false;
            return result;
          }
          encounteredMapChar = true;
        }
      }
      result = encounteredMapChar;
    } else {
      result = false;
    }
    return result;
  }; 

  function Irbis_IsTouching$0C (rect1, rect2) {
    return !(((rect1.get_Right() | 0) < (rect2.get_Left() | 0)) || 
      ((rect1.get_Top() | 0) > (rect2.get_Bottom() | 0)) || 
      ((rect1.get_Bottom() | 0) < (rect2.get_Top() | 0)) || ((rect1.get_Left() | 0) > (rect2.get_Right() | 0)));
  }; 

  function Irbis_IsTouching$0D (rect1, rect2, side) {
    switch (side.valueOf()) {
      case 0: 
        if (!(((rect1.get_Right() | 0) <= (rect2.get_Left() | 0)) || 
            ((rect1.get_Top() | 0) > (rect2.get_Bottom() | 0)) || 
            ((rect1.get_Bottom() | 0) <= (rect2.get_Top() | 0)) || ((rect1.get_Left() | 0) >= (rect2.get_Right() | 0)))) {
          var result = true;
          return result;
        }
        break;

      case 1: 
        if (!(((rect1.get_Right() | 0) < (rect2.get_Left() | 0)) || 
            ((rect1.get_Top() | 0) >= (rect2.get_Bottom() | 0)) || 
            ((rect1.get_Bottom() | 0) <= (rect2.get_Top() | 0)) || ((rect1.get_Left() | 0) >= (rect2.get_Right() | 0)))) {
          result = true;
          return result;
        }
        break;

      case 2: 
        if (!(((rect1.get_Right() | 0) <= (rect2.get_Left() | 0)) || 
            ((rect1.get_Top() | 0) >= (rect2.get_Bottom() | 0)) || 
            ((rect1.get_Bottom() | 0) < (rect2.get_Top() | 0)) || ((rect1.get_Left() | 0) >= (rect2.get_Right() | 0)))) {
          result = true;
          return result;
        }
        break;

      case 3: 
        if (!(((rect1.get_Right() | 0) <= (rect2.get_Left() | 0)) || 
            ((rect1.get_Top() | 0) >= (rect2.get_Bottom() | 0)) || 
            ((rect1.get_Bottom() | 0) <= (rect2.get_Top() | 0)) || ((rect1.get_Left() | 0) > (rect2.get_Right() | 0)))) {
          result = true;
          return result;
        }
        break;

      default: 
        result = false;
        return result;

    }
    result = false;
    return result;
  }; 

  function Irbis_KillEnemy (killMe) {
    $thisType.WriteLine(JSIL.ConcatString("removing enemy. index:", $T0E().$Box($thisType.enemyList.IndexOf(killMe))));
    $thisType.jamie.remove_OnPlayerAttack($T60().New($thisType.enemyList.get_Item($thisType.enemyList.IndexOf(killMe)), null, new JSIL.MethodPointerInfo($asm00.Irbis.IEnemy, "Enemy_OnPlayerAttack", $S1E(), false, true)));
    if ($thisType.enemyList.Contains(killMe)) {
      $thisType.enemyList.Remove(killMe);
      $thisType.WriteLine("successfully removed from enemyList.");
    }
    if ($thisType.collisionObjects.Contains(killMe)) {
      if ($thisType.jamie.collided.Contains(killMe)) {
        $thisType.jamie.RemoveCollision(killMe);
      }
      $thisType.collisionObjects.Remove(killMe);
      $thisType.WriteLine("successfully removed from collisionObjects.");
    }
    if ($thisType.onslaughtMode) {
      $thisType.onslaughtSpawner.EnemyKilled();
    }
    $thisType.WriteLine("done.");
  }; 

  function Irbis_Lerp$0E (value1, value2, amount) {
    if (+amount > 1) {
      var result = +value2;
    } else {
      result = +value1 + ((+value2 - +value1) * +amount);
    }
    return result;
  }; 

  function Irbis_Lerp$0F (value1, value2, amount) {
    return $S01().Construct($S04().CallStatic($thisType, "Lerp", null, value1.X, value2.X, amount), $S04().CallStatic($thisType, "Lerp", null, value1.Y, value2.Y, amount));
  }; 

  function Irbis_LevelEditor (threadContext) {
    try {
      $thisType.debug = 3;
      this.set_IsMouseVisible($thisType.sceneIsMenu = true);
      if (!$thisType.acceptTextInput) {
        if ($thisType.GetKey($T1D().LeftShift)) {
          if ($thisType.keyboardState.IsKeyDown($thisType.upKey)) {
            $thisType.camera.Y = +$thisType.camera.Y - (10 * +$thisType.get_DeltaTime());
          }
          if ($thisType.keyboardState.IsKeyDown($thisType.downKey)) {
            $thisType.camera.Y = +$thisType.camera.Y + (10 * +$thisType.get_DeltaTime());
          }
          if ($thisType.keyboardState.IsKeyDown($thisType.leftKey)) {
            $thisType.camera.X = +$thisType.camera.X - (10 * +$thisType.get_DeltaTime());
          }
          if ($thisType.keyboardState.IsKeyDown($thisType.rightKey)) {
            $thisType.camera.X = +$thisType.camera.X + (10 * +$thisType.get_DeltaTime());
          }
        } else {
          if ($thisType.keyboardState.IsKeyDown($thisType.upKey)) {
            $thisType.camera.Y = +$thisType.camera.Y - (1000 * +$thisType.get_DeltaTime());
          }
          if ($thisType.keyboardState.IsKeyDown($thisType.downKey)) {
            $thisType.camera.Y = +$thisType.camera.Y + (1000 * +$thisType.get_DeltaTime());
          }
          if ($thisType.keyboardState.IsKeyDown($thisType.leftKey)) {
            $thisType.camera.X = +$thisType.camera.X - (1000 * +$thisType.get_DeltaTime());
          }
          if ($thisType.keyboardState.IsKeyDown($thisType.rightKey)) {
            $thisType.camera.X = +$thisType.camera.X + (1000 * +$thisType.get_DeltaTime());
          }
        }
      }
      $thisType.background.M31 = $thisType.foreground.M41 = +($thisType.halfResolution.X) - +$thisType.camera.X;
      $thisType.background.M32 = $thisType.foreground.M42 = +($thisType.halfResolution.Y) - +$thisType.camera.Y;
      $thisType.screenspace.X = ((+$thisType.camera.X - +($thisType.halfResolution.X)) | 0);
      $thisType.screenspace.Y = ((+$thisType.camera.Y - +($thisType.halfResolution.Y)) | 0);
      this.worldSpaceMouseLocation = $T1C().op_Subtraction(
        $T1C().op_Addition(
          $S1F().CallStatic($T01(), "op_Division", null, $thisType.mouseState.get_Position().MemberwiseClone().ToVector2().MemberwiseClone(), $thisType.screenScale).MemberwiseClone().ToPoint(), 
          $S1F().CallStatic($T01(), "op_Division", null, $thisType.camera.MemberwiseClone(), $thisType.screenScale).MemberwiseClone().ToPoint()
        ), 
        $S1F().CallStatic($T01(), "op_Division", null, $thisType.halfResolution.ToVector2().MemberwiseClone(), $thisType.screenScale).MemberwiseClone().ToPoint()
      );
      if (!(($thisType.mouseState.get_RightButton() !== $T56().Pressed) || ($thisType.previousMouseState.get_RightButton() === $T56().Pressed))) {
        var destroyBlock = -1;

        for (var i = 0; i < ($thisType.squareList.get_Count() | 0); i = ((i + 1) | 0)) {
          if ($S20().CallVirtual("Contains", null, ($thisType.squareList.get_Item(i)).get_Collider(), this.worldSpaceMouseLocation)) {
            destroyBlock = i;
          }
        }
        if (destroyBlock >= 0) {
          $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["destroying block ", $T0E().$Box(destroyBlock), " at ", this.worldSpaceMouseLocation])));
          $thisType.squareList.RemoveAt(destroyBlock);
        } else {
          $thisType.WriteLine(JSIL.ConcatString("spawning block with defaultTex texture at ", this.worldSpaceMouseLocation));
          var defaultSquareTex = (this.get_Content()).Load$b1($T2A())("defaultTex");
          var tempSquare = $S09().Construct(defaultSquareTex, this.worldSpaceMouseLocation.MemberwiseClone(), $thisType.screenScale, false, true, 0.3);
          $thisType.squareList.Add(tempSquare);
        }
      }
      if (!(($thisType.mouseState.get_LeftButton() !== $T56().Pressed) || ($thisType.previousMouseState.get_LeftButton() === $T56().Pressed))) {
        this.selectedBlock = -1;

        for (i = 0; i < ($thisType.squareList.get_Count() | 0); i = ((i + 1) | 0)) {
          if ($S20().CallVirtual("Contains", null, ($thisType.squareList.get_Item(i)).get_Collider(), this.worldSpaceMouseLocation)) {
            this.selectedBlock = i;
          }
        }
        if ((this.selectedBlock | 0) >= 0) {
          $thisType.WriteLine(JSIL.ConcatString("moving block ", $T0E().$Box(this.selectedBlock)));
        }
      }
      if (!(($thisType.mouseState.get_LeftButton() !== $T56().Pressed) || ((this.selectedBlock | 0) < 0))) {
        ($thisType.squareList.get_Item(this.selectedBlock).Position = (this.worldSpaceMouseLocation).ToVector2());
      }
    } finally {
      if (($S05().CallStatic($T12(), "Decrement", null, /* ref */ new JSIL.MemberReference($thisType, "pendingThreads")) | 0) <= 0) {
        $thisType.doneEvent.Set();
      }
    }
  }; 

  function Irbis_LevelUpdate (gameTime) {
    if (($thisType.debug | 0) > 0) {
      if (!(!$thisType.GetKeyDown($T1D().N) || $thisType.acceptTextInput)) {
        $thisType.nextFrameTimer = 0;
        $thisType.framebyframe = true;
      } else if (!(!$thisType.framebyframe || 
          !$thisType.GetKey($T1D().N) || $thisType.acceptTextInput)) {
        $thisType.nextFrameTimer = +$thisType.nextFrameTimer + +$thisType.get_DeltaTime();
      }
      if (!(!$thisType.keyboardState.IsKeyDown($T1D().G) || $thisType.acceptTextInput)) {
        $thisType.framebyframe = false;
      }
    }
    if (!(!(!$thisType.framebyframe || 
          $thisType.GetKeyDown($T1D().N)) && (+$thisType.nextFrameTimer <= 0.1))) {
      if ($thisType.framebyframe) {
        $thisType.nextFrameTimer = +$thisType.nextFrameTimer - 0.1;
      }
      $thisType.timer = +$thisType.timer + $thisType.deltaTime;
      $thisType.jamie.Update();
      if (+$thisType.jamie.health <= 0) {
        $thisType.PlayerDeath();
        this.LoadLevel($thisType.currentLevel, true);
      }
      if ($thisType.useMultithreading) {
        $thisType.QueueThread($T61().New(this, null, new JSIL.MethodPointerInfo($thisType, "Camera", $S21(), false, false)));
      } else {
        this.Camera(null);
      }
      if ($thisType.timerDisplay !== null) {
        $thisType.timerDisplay.Update(this.TimerText($thisType.timer), true);
      }
      $T22().healthBar.UpdateValue($thisType.jamie.health);
      $T22().shieldBar.UpdateValue($thisType.jamie.shield, $thisType.jamie.shielded);
      $T22().energyBar.UpdateValue($thisType.jamie.energy);
      if ($thisType.useMultithreading) {

        for (var i = 0; i < ($thisType.enemyList.get_Count() | 0); i = ((i + 1) | 0)) {
          $thisType.QueueThread($T61().New($thisType.enemyList.get_Item(i), null, new JSIL.MethodPointerInfo($asm00.Irbis.IEnemy, "ThreadPoolCallback", $S22(), false, true)));
        }
        $thisType.QueueThread($T61().New(null, null, new JSIL.MethodPointerInfo($thisType, "UpdateEnemyHealthBar", $S23(), true, false)));
      } else {

        for (i = 0; i < ($thisType.enemyList.get_Count() | 0); i = ((i + 1) | 0)) {
          $IM08().Call($thisType.enemyList.get_Item(i), null);
          if (!((+$IM05().Call($thisType.enemyList.get_Item(i), null) > 0) && (+$IM04().Call($thisType.enemyList.get_Item(i), null).Y <= 5000))) {
            $thisType.KillEnemy($thisType.enemyList.get_Item(i));
            i = ((i - 1) | 0);
          }
        }
        $thisType.UpdateEnemyHealthBar(null);
      }
    }
    if ($thisType.onslaughtMode) {
      if (!((($thisType.onslaughtSpawner.enemiesLeftThisWave | 0) <= 0) || 
          (($thisType.enemyList.get_Count() | 0) >= ($thisType.onslaughtSpawner.maxEnemies | 0)) || !$thisType.onslaughtSpawner.EnemySpawnTimer())) {
        this.SummonGenericEnemy($thisType.onslaughtSpawner.enemyHealth, $thisType.onslaughtSpawner.enemyDamage, $thisType.onslaughtSpawner.enemySpeed);
      }
      if (!((($thisType.enemyList.get_Count() | 0) > 0) || (($thisType.onslaughtSpawner.enemiesKilled | 0) < ($thisType.onslaughtSpawner.enemiesThisWave | 0)))) {
        $thisType.onslaughtSpawner.NextWave();
      }
      if (!$thisType.onslaughtSpawner.waveStarted) {
        $thisType.onslaughtDisplay.Update(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["Wave ", $T0E().$Box($thisType.onslaughtSpawner.wave), " Start: ", $T14().__Type__.__PublicInterface__.$ToString($thisType.onslaughtSpawner.timeUntilNextSpawn, "00", null)])), true);
      } else {
        $thisType.onslaughtDisplay.Update(JSIL.ConcatString("Onslaught Wave ", $T0E().$Box($thisType.onslaughtSpawner.wave)), true);
      }
      if ($thisType.get_GetUseKeyDown()) {

        for (i = 0; i < ($thisType.onslaughtSpawner.vendingMachineList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (+$S0E().CallStatic($thisType, "DistanceSquared", null, 
              ($thisType.onslaughtSpawner.vendingMachineList.get_Item(i).collider).get_Center(), 
              $thisType.jamie.get_Collider().get_Center()
            ) <= +($thisType.vendingMachineUseDistanceSqr)) {
            ($thisType.onslaughtSpawner.vendingMachineList.get_Item(i)).LoadMenu();
            $thisType.jamie.inputEnabled = !$thisType.onslaughtSpawner.vendingMachineList.get_Item(i).drawMenu;
            if (!$thisType.jamie.inputEnabled) {
              $thisType.vendingMenu = i;
              this.set_IsMouseVisible(true);
              $thisType.WriteLine("vending machine menu open");
            } else {
              $thisType.vendingMenu = -1;
              this.set_IsMouseVisible(false);
              $thisType.WriteLine("vending machine menu close");
            }
          }
        }
      }
      if (($thisType.vendingMenu | 0) >= 0) {
        if ($thisType.jamie.inputEnabled) {
          $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).LoadMenu();
          $thisType.vendingMenu = -1;
          this.set_IsMouseVisible(false);
          $thisType.WriteLine("vending machine menu close");
        }
        if ($thisType.get_GetLeftKeyDown()) {
          $S24().CallVirtual("Update", null, $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu), ((($thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).selection | 0) - 1) | 0));
        }
        if ($thisType.get_GetRightKeyDown()) {
          $S24().CallVirtual("Update", null, $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu), ((($thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).selection | 0) + 1) | 0));
        }
        if ($thisType.get_GetUpKeyDown()) {
          $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).MoveSelectionUp();
        }
        if ($thisType.get_GetDownKeyDown()) {
          $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).MoveSelectionDown();
        }
        if ($thisType.get_GetLeftMouseDown()) {
          $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).OnClick($thisType.mouseState.get_Position());
        }
        if ($T55().op_Inequality($thisType.mouseState, $thisType.previousMouseState)) {
          $S25().CallVirtual("Update", null, $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu), $thisType.mouseState.get_Position());
        }
        if ($thisType.Use()) {
          $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).Purchase($thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).selection);
        }
      }
    }
    if (!(!$thisType.GetKeyDown($T1D().Escape) && !$thisType.GetKeyDown($T1D().Pause))) {
      if (($thisType.vendingMenu | 0) >= 0) {
        $thisType.onslaughtSpawner.vendingMachineList.get_Item($thisType.vendingMenu).LoadMenu();
        $thisType.jamie.inputEnabled = true;
        $thisType.vendingMenu = -1;
        this.set_IsMouseVisible(false);
        $thisType.WriteLine("vending machine menu close");
      } else {
        $thisType.framebyframe = false;
        this.LoadMenu(0, 0, false);
      }
    }
    if (!(!$thisType.keyboardState.IsKeyDown($T1D().K) || 
        $thisType.previousKeyboardState.IsKeyDown($T1D().K) || $thisType.acceptTextInput)) {
      this.randomTimer = 0;
      this.SummonGenericEnemy();
    }
    if (!(!$thisType.keyboardState.IsKeyDown($T1D().K) || $thisType.acceptTextInput)) {
      this.randomTimer = +this.randomTimer + +$thisType.get_DeltaTime();
      if (+this.randomTimer > 0.5) {
        this.SummonGenericEnemy();
      }
    }
  }; 

  function Irbis_Load (filename) {
    var playerSettings = $T62().Load(filename);
    $thisType.attackKey = playerSettings.attackKey;
    $thisType.altAttackKey = playerSettings.altAttackKey;
    $thisType.shockwaveKey = playerSettings.shockwaveKey;
    $thisType.altShockwaveKey = playerSettings.altShockwaveKey;
    $thisType.shieldKey = playerSettings.shieldKey;
    $thisType.altShieldKey = playerSettings.altShieldKey;
    $thisType.jumpKey = playerSettings.jumpKey;
    $thisType.altJumpKey = playerSettings.altJumpKey;
    $thisType.upKey = playerSettings.upKey;
    $thisType.altUpKey = playerSettings.altUpKey;
    $thisType.downKey = playerSettings.downKey;
    $thisType.altDownKey = playerSettings.altDownKey;
    $thisType.leftKey = playerSettings.leftKey;
    $thisType.altLeftKey = playerSettings.altLeftKey;
    $thisType.rightKey = playerSettings.rightKey;
    $thisType.altRightKey = playerSettings.altRightKey;
    $thisType.rollKey = playerSettings.rollKey;
    $thisType.altRollKey = playerSettings.altRollKey;
    $thisType.potionKey = playerSettings.potionKey;
    $thisType.altPotionKey = playerSettings.altPotionKey;
    $thisType.useKey = playerSettings.useKey;
    $thisType.altUseKey = playerSettings.altUseKey;
    $thisType.cameraLerp = $thisType.cameraLerpSetting = playerSettings.cameraLerpSetting;
    $thisType.cameraLerpSpeed = +playerSettings.cameraLerpSpeed;
    $thisType.minSqrDetectDistance = +playerSettings.minSqrDetectDistance;
    $thisType.cameraShakeSetting = playerSettings.cameraShakeSetting;
    $thisType.cameraSwingSetting = playerSettings.cameraSwingSetting;
    $thisType.swingDuration = +playerSettings.swingDuration;
    $thisType.swingMagnitude = +playerSettings.swingMagnitude;
    $thisType.timerAccuracy = playerSettings.timerAccuracy;
    $thisType.graphics.set_SynchronizeWithVerticalRetrace(this.Game$IsFixedTimeStep = playerSettings.vSync);
    $thisType.tempResolution = playerSettings.resolution.MemberwiseClone();
    $thisType.masterAudioLevel = +playerSettings.masterAudioLevel;
    $thisType.musicLevel = +playerSettings.musicLevel;
    $thisType.soundEffectsLevel = +playerSettings.soundEffectsLevel;
    if (!$thisType.resetRequired) {
      $thisType.tempResolution = playerSettings.resolution.MemberwiseClone();
      if ($T1C().op_Inequality($thisType.tempResolution, $T1C().get_Zero())) {
        $thisType.SetResolution($thisType.tempResolution.MemberwiseClone());
      } else {
        $thisType.tempResolution = $S07().Construct($thisType.graphics.get_GraphicsDevice().get_DisplayMode().get_Width(), $thisType.graphics.get_GraphicsDevice().get_DisplayMode().get_Height());
        $thisType.SetResolution($thisType.tempResolution.MemberwiseClone());
      }
      $thisType.graphics.set_IsFullScreen(playerSettings.fullscreen);
    }
    $thisType.SetScreenScale(playerSettings.screenScale);
    if (+(((+(+$thisType.screenScale / 2)) | 0)) === +((+$thisType.screenScale / 2))) {
      $thisType.textScale = ((+(+$thisType.screenScale / 2)) | 0);
    } else {
      $thisType.textScale = ((((+(+$thisType.screenScale / 2)) | 0) + 1) | 0);
    }
    $thisType.projection.M11 = +((4 / +($thisType.resolution.X)));
    $thisType.projection.M22 = +((4 / +($thisType.resolution.Y)));
    $thisType.graphics.set_SynchronizeWithVerticalRetrace(this.Game$IsFixedTimeStep = playerSettings.vSync);
    $thisType.graphics.ApplyChanges();
    $thisType.boundingBox = playerSettings.boundingBox.MemberwiseClone();
    if ($T07().op_Equality($thisType.boundingBox, $T07().get_Empty())) {
      $thisType.boundingBox = $S06().Construct(($S26().CallStatic($T01(), "op_Multiply", null, $thisType.resolution.ToVector2().MemberwiseClone(), 0.3).MemberwiseClone()).ToPoint(), ($S26().CallStatic($T01(), "op_Multiply", null, $thisType.resolution.ToVector2().MemberwiseClone(), 0.4).MemberwiseClone()).ToPoint());
    }
    if ($thisType.jamie !== null) {
      $thisType.jamie.Load(playerSettings);
    }
    return playerSettings;
  }; 

  function Irbis_LoadContent () {
    var angleVector = new ($T01())();
    $T09().WriteLine("loading content");
    var fontTex2 = (this.get_Content()).Load$b1($T2A())("font2");
    var font2 = $S27().Construct(fontTex2, 8);
    $thisType.consoleTex = null;
    $thisType.developerConsole = $S28().Construct(font2.MemberwiseClone());
    this.PrintVersion();
    $thisType.WriteLine(JSIL.ConcatString("Number of logical processors:", $T0E().$Box($thisType.threadCount)));
    $thisType.WriteLine();
    $thisType.tooltipGenerator = new ($T65())($thisType.game);
    $thisType.testTree = $S29().Construct();
    $thisType.vendingMenu = -1;
    $thisType.autosave = ".\\content\\autosave.snep";
    if ($T26().Exists(".\\content\\playerSettings.ini")) {
      var playerSettings = this.Load(".\\content\\playerSettings.ini").MemberwiseClone();
    } else {
      $T09().WriteLine("creating new playerSettings.ini...");
      $thisType.WriteLine("creating new playerSettings.ini...");
      (playerSettings = playerSettings.MemberwiseClone(), 
        $S2A().Call($T62().prototype, "_ctor", null, playerSettings, true));
      $S2B().CallStatic($T62(), "Save", null, playerSettings.MemberwiseClone(), ".\\content\\playerSettings.ini");
      playerSettings = this.Load(".\\content\\playerSettings.ini").MemberwiseClone();
    }
    $thisType.savefile = new ($T2D())(true);
    if ($T26().Exists($thisType.autosave)) {
      $thisType.savefile.Load($thisType.autosave);
    } else {
      $T09().WriteLine("creating new autosave.snep...");
      $thisType.WriteLine("creating new autosave.snep...");
      $thisType.savefile = new ($T2D())(false);
      $thisType.savefile.Save($thisType.autosave);
    }
    $thisType.developerConsole.textScale = ($thisType.textScale | 0);
    $thisType.font = $S2C().Construct((this.get_Content()).Load$b1($T2A())("font"), playerSettings.characterHeight, playerSettings.characterWidth, false);
    var playerTex = (this.get_Content()).Load$b1($T2A())("player");
    var shieldTex = (this.get_Content()).Load$b1($T2A())("shield");
    $thisType.jamie = new ($T11())(playerTex, shieldTex, playerSettings, 0.5);
    $thisType.jamie.Respawn($S01().Construct(-1000, -1000));
    $thisType.spriteBatch = new ($T41())(this.get_GraphicsDevice());
    $thisType.menuTex = JSIL.Array.New($T2A(), 8);
    $thisType.menuTex[0] = (this.get_Content()).Load$b1($T2A())("Main Menu title");
    $thisType.menuTex[1] = (this.get_Content()).Load$b1($T2A())("Options title");
    $thisType.menuTex[2] = (this.get_Content()).Load$b1($T2A())("Keybinds title");
    $thisType.menuTex[3] = (this.get_Content()).Load$b1($T2A())("Camera title");
    $thisType.menuTex[4] = (this.get_Content()).Load$b1($T2A())("Video title");
    $thisType.menuTex[5] = (this.get_Content()).Load$b1($T2A())("Audio title");
    $thisType.menuTex[6] = (this.get_Content()).Load$b1($T2A())("Misc title");
    $thisType.menuTex[7] = (this.get_Content()).Load$b1($T2A())("Level Select title");
    $thisType.nullTex = (this.get_Content()).Load$b1($T2A())("nullTex");
    $thisType.largeNullTex = (this.get_Content()).Load$b1($T2A())("largeNullTex");
    $thisType.defaultTex = (this.get_Content()).Load$b1($T2A())("defaultTex");
    this.enemySpawnPoints = $S2D().Construct();
    $thisType.menu = new ($T66())();
    $thisType.debuginfo = $S2E().Construct($thisType.resolution.X, font2.MemberwiseClone(), $T00().Color$White$value.MemberwiseClone(), true, $S07().Construct($thisType.resolution.X, 3), $T3C().Left, 0.95);
    $thisType.consoleWriteline = $S2E().Construct($thisType.resolution.X, font2.MemberwiseClone(), $T00().Color$White$value.MemberwiseClone(), true, $S07().Construct(1, 5), $T3C().Left, 1);
    $S2F().CallVirtual("Update", null, $thisType.developerConsole, $thisType.resolution.X);
    $thisType.developerConsole.scrollDown = false;
    $thisType.consoleMoveTimer = 0;
    $thisType.console = false;
    this.Debug($thisType.debug);
    $thisType.printList.Add($thisType.debuginfo);
    $thisType.printList.Add($thisType.consoleWriteline);
    $thisType.printList.Add($thisType.developerConsole);
    $thisType.smartFPS = new ($T37())(5);
    ($thisType.basicEffect.View = $T03().get_Identity().MemberwiseClone());
    ($thisType.basicEffect.World = $T03().get_Identity().MemberwiseClone());
    ($thisType.basicEffect.Projection = $thisType.projection.MemberwiseClone());

    for (var i = 0; i < ($thisType.debuglines.length | 0); i = ((i + 1) | 0)) {
      $thisType.debuglines[i] = $S30().Construct($S01().Construct((300 * +i), 300), $S01().Construct((100 * +i), 500));
    }

    for (i = 0; i < ($thisType.debugrays.length | 0); i = ((i + 1) | 0)) {
      var myAngleInRadians = 6.28318548 * +((+i / 50));
      (angleVector = angleVector.MemberwiseClone(), 
        $T01().prototype._ctor.call(angleVector, Math.fround(Math.cos(myAngleInRadians)), -Math.fround(Math.sin(myAngleInRadians))));
      $thisType.debugrays[i] = new ($T04())($S1F().CallStatic($T01(), "op_Division", null, $thisType.halfResolution.ToVector2().MemberwiseClone(), $thisType.screenScale).MemberwiseClone(), angleVector.MemberwiseClone());
    }
    $thisType.vendingMachineUseDistanceSqr = 2500;
    var debugshapevertices = JSIL.Array.New($T01(), [$S01().Construct(100, 200), $S01().Construct(300, 200), $S01().Construct(400, 400)]);
    $thisType.debugshapes[0] = $S31().Construct(debugshapevertices);
    debugshapevertices = JSIL.Array.New($T01(), [$S01().Construct(900, 700), $S01().Construct(600, 500), $S01().Construct(600, 450), $S01().Construct(500, 600)]);
    $thisType.debugshapes[1] = $S31().Construct(debugshapevertices);
    debugshapevertices = JSIL.Array.New($T01(), [$S01().Construct(900, 100), $S01().Construct(850, 450), $S01().Construct(700, 500), $S01().Construct(800, 200), $S01().Construct(750, 100)]);
    $thisType.debugshapes[2] = $S31().Construct(debugshapevertices);
    $thisType.debugshapes[3] = $S32().Construct($thisType.zeroScreenspace.MemberwiseClone());
    $thisType.logos = $S33().Construct();
    $thisType.logos.Add((this.get_Content()).Load$b1($T2A())("monogame"));
    $thisType.logos.Add((this.get_Content()).Load$b1($T2A())("ln2"));
    $thisType.logos.Add((this.get_Content()).Load$b1($T2A())("patreon"));
    $thisType.shadows = $S2D().Construct();
    $thisType.WriteLine("creating shadowShape");
    $thisType.shadowShape = $S31().Construct($T27().prototype.ToArray.call($thisType.shadows));
    this.LoadScene(11);
    this.LoadMenu(0, 0, false);
    $thisType.sceneIsMenu = true;
    $thisType.LoadMusic();
    $thisType.PlaySong("bensound-relaxing", true);
    $T09().WriteLine("done.");
  }; 

  function Irbis_LoadEnchantDescriptions () {
    return JSIL.Array.New($T0A(), ["long duration, low damage", "short duration, high damage", "long duration, slows", "knocks enemies back short distance", "long duration, high damage, limited use", "flat damage increase (no duration)", "short duration, full stun"]);
  }; 

  function Irbis_LoadEnchantIcons () {
    var texlist = $S33().Construct();
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("blood enchant icon"));
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("fire enchant icon"));
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("frost enchant icon"));
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("knockback enchant icon"));
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("poison enchant icon"));
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("sharpness enchant icon"));
    texlist.Add($thisType.game.get_Content().Load$b1($T2A())("stun enchant icon"));
    return $T4F().prototype.ToArray.call(texlist);
  }; 

  function Irbis_LoadLevel (filename, loadUI) {
    this.set_IsMouseVisible(false);
    $thisType.scene = 11;
    $thisType.sceneIsMenu = false;
    $thisType.currentLevel = filename;
    this.ClearLevel();
    var thisLevel = new ($T20())(true);
    thisLevel.Load((".\\levels\\" + filename + ".lvl"));
    var squareSpawns = $T69().prototype.ToArray.call(thisLevel.get_SquareSpawnPoints());
    var squareDepths = $T6B().prototype.ToArray.call(thisLevel.squareDepths);
    var BackgroundSquares = $T69().prototype.ToArray.call(thisLevel.get_BackgroundSquares());
    $thisType.onslaughtMode = thisLevel.isOnslaught;
    this.enemySpawnPoints = thisLevel.get_EnemySpawnPoints();
    this.bossSpawn = thisLevel.get_BossSpawn().MemberwiseClone();
    this.bossName = thisLevel.bossName;
    this.enemy0Tex = (this.get_Content()).Load$b1($T2A())("enemy0");
    var centerTex = (this.get_Content()).Load$b1($T2A())("centerTexture");
    if (loadUI) {
      $thisType.bars = new ($T22())((this.get_Content()).Load$b1($T2A())("bar health"), (this.get_Content()).Load$b1($T2A())("bar shield"), (this.get_Content()).Load$b1($T2A())("bar energy"), (this.get_Content()).Load$b1($T2A())("bar potion fill 1"), (this.get_Content()).Load$b1($T2A())("bar enemy fill"), (this.get_Content()).Load$b1($T2A())("shieldBar"), (this.get_Content()).Load$b1($T2A())("bars"), (this.get_Content()).Load$b1($T2A())("bar enemy"), JSIL.Array.New($T2A(), [(this.get_Content()).Load$b1($T2A())("bar potion 1"), (this.get_Content()).Load$b1($T2A())("bar potion 2"), (this.get_Content()).Load$b1($T2A())("bar potion 3")]));
      if ($thisType.jamie !== null) {
        $thisType.jamie.Respawn($thisType.initialPos.MemberwiseClone());
      }
    } else if ($thisType.jamie !== null) {
      $thisType.jamie.Respawn($S01().Construct(-1000, -1000));
      $thisType.camera = $thisType.screenSpacePlayerPos = $thisType.mainCamera = $thisType.halfResolution.ToVector2();
    }
    if ($thisType.onslaughtMode) {
      $thisType.onslaughtSpawner = new ($T25())();
      var vendingMachineLocations = thisLevel.get_VendingMachineLocations();
      var vendingMachineTypes = thisLevel.get_VendingMachineTypes();
      var vendingMachineTextures = thisLevel.get_VendingMachineTextures();

      for (var i = 0; i < (vendingMachineTextures.length | 0); i = ((i + 1) | 0)) {
        $thisType.onslaughtSpawner.vendingMachineList.Add(new ($T2C())(200, vendingMachineTypes[i], $S06().Construct(vendingMachineLocations[i], $S07().Construct(64, 64)), (this.get_Content()).Load$b1($T2A())(vendingMachineTextures[i]), 0.35));
      }
      $thisType.onslaughtDisplay = $S2E().Construct(((($thisType.resolution.Y | 0) / 2) | 0), $thisType.font.MemberwiseClone(), $T00().Color$White$value.MemberwiseClone(), true, $S07().Construct(2, 7), $T3C().Left, 0.6);
      $thisType.onslaughtDisplay.Update(JSIL.ConcatString("Onslaught Wave ", $T0E().$Box($thisType.onslaughtSpawner.wave)), true);
    } else {
      $thisType.onslaughtDisplay = null;
      $thisType.onslaughtSpawner = null;
    }
    $thisType.timerDisplay = $S2E().Construct(((($thisType.resolution.Y | 0) / 2) | 0), $thisType.font.MemberwiseClone(), $T00().Color$White$value.MemberwiseClone(), true, $S07().Construct(2, 7), $T3C().Left, 0.6);

    for (i = 0; i < ((thisLevel.squareTextures).get_Count() | 0); i = ((i + 1) | 0)) {
      if (+(thisLevel.squareDepths).get_Item(i) > 0.1) {
        var tempSquare = $S09().Construct($thisType.LoadTexture((thisLevel.squareTextures).get_Item(i)), squareSpawns[i].MemberwiseClone(), $thisType.screenScale, false, false, (thisLevel.squareDepths).get_Item(i));
      } else if (+(thisLevel.squareDepths).get_Item(i) > 0) {
        tempSquare = $S09().Construct($thisType.LoadTexture((thisLevel.squareTextures).get_Item(i)), squareSpawns[i].MemberwiseClone(), $thisType.screenScale, false, true, (thisLevel.squareDepths).get_Item(i));
      } else {
        tempSquare = $S09().Construct($thisType.LoadTexture((thisLevel.squareTextures).get_Item(i)), squareSpawns[i].MemberwiseClone(), $thisType.screenScale, false, true, null);
      }
      $thisType.collisionObjects.Add(tempSquare);
      $thisType.squareList.Add(tempSquare);
    }

    for (i = 0; i < ((thisLevel.backgroundSquareDepths).get_Count() | 0); i = ((i + 1) | 0)) {
      var squareTex = (this.get_Content()).Load$b1($T2A())((thisLevel.backgroundTextures).get_Item(i));
      tempSquare = $S09().Construct(squareTex, BackgroundSquares[i].MemberwiseClone(), $thisType.screenScale, true, false, (thisLevel.backgroundSquareDepths).get_Item(i));
      $thisType.backgroundSquareList.Add(tempSquare);
    }
    if (($thisType.levelLoaded | 0) < 0) {
      $thisType.levelLoaded = 0;
      $thisType.WriteLine("for a list of commands, enter: help");
    } else {
      $thisType.levelLoaded = ($thisType.scene | 0);
      $thisType.savefile.lastPlayedLevel = $thisType.currentLevel;
      $thisType.savefile.Save($thisType.autosave);
      $thisType.WriteLine("for a list of all squares, enter: squareList");
    }
    this.SummonBoss(this.bossName, this.bossSpawn.MemberwiseClone());
  }; 

  function Irbis_LoadMenu (Scene, startMenuLocation, loadSettings) {
    this.set_IsMouseVisible(true);
    $thisType.scene = (Scene | 0);
    $thisType.sceneIsMenu = true;
    $thisType.sList.Clear();
    $thisType.printList.Clear();
    $thisType.buttonList.Clear();
    if (loadSettings) {
      this.Load(".\\content\\playerSettings.ini");
    }
    if ($thisType.resetRequired) {
      var resettt = $S2E().Construct(((($thisType.resolution.X | 0) - 132) | 0), $thisType.font.MemberwiseClone(), $T00().Color$White$value.MemberwiseClone(), false, $S07().Construct(((($thisType.resolution.X | 0) - 32) | 0), ((($thisType.resolution.Y | 0) - 26) | 0)), $T3C().Right, 0.5);
      $S34().CallVirtual("Update", null, resettt, "Restart the game to apply resolution changes!");
      $thisType.printList.Add(resettt);
    }
    if (($thisType.levelLoaded | 0) > 0) {
      $thisType.logos = null;
    }
    $thisType.menu.Create($thisType.scene);
    $thisType.menuSelection = (startMenuLocation | 0);
  }; 

  function Irbis_LoadMusic () {
    $thisType.music = $S35().Construct();
    $thisType.musicList = $S0C().Construct();
    $thisType.music.Add($thisType.game.get_Content().Load$b1($T6E())("music/bensound-betterdays"));
    $thisType.musicList.Add("bensound-betterdays");
    $thisType.music.Add($thisType.game.get_Content().Load$b1($T6E())("music/bensound-epic"));
    $thisType.musicList.Add("bensound-epic");
    $thisType.music.Add($thisType.game.get_Content().Load$b1($T6E())("music/bensound-instinct"));
    $thisType.musicList.Add("bensound-instinct");
    $thisType.music.Add($thisType.game.get_Content().Load$b1($T6E())("music/bensound-memories"));
    $thisType.musicList.Add("bensound-memories");
    $thisType.music.Add($thisType.game.get_Content().Load$b1($T6E())("music/bensound-relaxing"));
    $thisType.musicList.Add("bensound-relaxing");
    $thisType.music.Add($thisType.game.get_Content().Load$b1($T6E())("music/bensound-slowmotion"));
    $thisType.musicList.Add("bensound-slowmotion");
    return true;
  }; 

  function Irbis_LoadScene (SCENE) {
    $thisType.scene = (SCENE | 0);
    switch ($thisType.scene) {
      case 0: 
        this.LoadMenu(0, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 1: 
        this.LoadMenu(1, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 2: 
        this.LoadMenu(2, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 3: 
        this.LoadMenu(3, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 4: 
        this.LoadMenu(4, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 5: 
        this.LoadMenu(5, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 6: 
        this.LoadMenu(6, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 7: 
        this.LoadMenu(7, 0, false);
        $thisType.sceneIsMenu = true;
        return;

      case 11: 
        this.LoadLevel($thisType.savefile.lastPlayedLevel, false);
        $thisType.sceneIsMenu = false;
        return;

    }
    $T09().WriteLine(JSIL.ConcatString("Error. Scene ID ", $T0E().$Box($thisType.scene), " does not exist."));
  }; 

  function Irbis_LoadTexture (TextureFile) {
    $thisType.WriteLine(TextureFile);
    if ($T0A().IsNullOrWhiteSpace(TextureFile)) {
      var result = $thisType.game.get_Content().Load$b1($T2A())("defaultTex");
    } else {
      result = $thisType.game.get_Content().Load$b1($T2A())(TextureFile);
    }
    return result;
  }; 

  function Irbis_MatrixPrinter (matrix) {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n{M11:", $T14().$Box($thisType.projection.M11), " M12:", $T14().$Box($thisType.projection.M12), " M13:", $T14().$Box($thisType.projection.M13), " M14:", $T14().$Box($thisType.projection.M14), "}  {", $T14().$Box($thisType.projection.M11), ":", $T14().$Box($thisType.projection.M12), ":", $T14().$Box($thisType.projection.M13), ":", $T14().$Box($thisType.projection.M14), "}\n{M21:", $T14().$Box($thisType.projection.M21), " M22:", $T14().$Box($thisType.projection.M22), " M23:", $T14().$Box($thisType.projection.M23), " M24:", $T14().$Box($thisType.projection.M24), "}  {", $T14().$Box($thisType.projection.M21), ":", $T14().$Box($thisType.projection.M22), ":", $T14().$Box($thisType.projection.M23), ":", $T14().$Box($thisType.projection.M24), "}\n{M31:", $T14().$Box($thisType.projection.M31), " M32:", $T14().$Box($thisType.projection.M32), " M33:", $T14().$Box($thisType.projection.M33), " M34:", $T14().$Box($thisType.projection.M34), "}  {", $T14().$Box($thisType.projection.M31), ":", $T14().$Box($thisType.projection.M32), ":", $T14().$Box($thisType.projection.M33), ":", $T14().$Box($thisType.projection.M34), "}\n{M41:", $T14().$Box($thisType.projection.M41), " M42:", $T14().$Box($thisType.projection.M42), " M43:", $T14().$Box($thisType.projection.M43), " M44:", $T14().$Box($thisType.projection.M44), "}  {", $T14().$Box($thisType.projection.M41), ":", $T14().$Box($thisType.projection.M42), ":", $T14().$Box($thisType.projection.M43), ":", $T14().$Box($thisType.projection.M44), "}"]));
  }; 

  function Irbis_MenuUpdate () {
    if (!$thisType.console) {
      $thisType.menu.Update(this);
    }
  }; 

  function Irbis_MoveConsole () {
    $thisType.consoleMoveTimer = +$thisType.consoleMoveTimer - Math.fround($thisType.elapsedTime);
    if ($thisType.console) {
      $thisType.consoleRect.Y = (($S04().CallStatic($thisType, "Lerp", null, +(-+($thisType.halfResolution.Y)), 0, 1 - +$thisType.consoleMoveTimer)) | 0);
    } else {
      $thisType.consoleRect.Y = (($S04().CallStatic($thisType, "Lerp", null, 0, +(-+($thisType.halfResolution.Y)), 1 - +$thisType.consoleMoveTimer)) | 0);
    }
    if (+$thisType.consoleMoveTimer <= 0) {
      $thisType.consoleMoveTimer = 0;
    }
    $S36().CallVirtual("Update", null, $thisType.consoleWriteline, $S07().Construct(1, ((($thisType.consoleRect.get_Bottom() | 0) - ((10 * +$thisType.screenScale) | 0)) | 0)));
    $S36().CallVirtual("Update", null, $thisType.developerConsole, $S07().Construct(1, ((($thisType.consoleRect.get_Bottom() | 0) - ((20 * +$thisType.screenScale) | 0)) | 0)));
  }; 

  function Irbis_OpenConsole () {
    $thisType.textInputBuffer = $T0A().Empty;
    $thisType.acceptTextInput = $thisType.console = !$thisType.console;
    if ($thisType.consoleTex === null) {
      var tempConsoleTex = (this.get_Content()).Load$b1($T2A())("console texture");
      var tempLocation = $T01().get_Zero().MemberwiseClone();
      if (+((+($thisType.consoleRect.Width) / +(tempConsoleTex.get_Bounds().Width))) > +((+($thisType.consoleRect.Height) / +(tempConsoleTex.get_Bounds().Height)))) {
        var tempScale = +((+($thisType.consoleRect.Width) / +(tempConsoleTex.get_Bounds().Width)));
      } else {
        tempScale = +((+($thisType.consoleRect.Height) / +(tempConsoleTex.get_Bounds().Height)));
      }
      tempLocation.X = -+((((+(tempConsoleTex.get_Bounds().Width) * tempScale) - +($thisType.screenspace.Width)) / 2));
      var renderTarget = $S37().Construct(this.get_GraphicsDevice(), $thisType.consoleRect.Width, $thisType.consoleRect.Height);
      (this.get_GraphicsDevice()).SetRenderTarget(renderTarget);
      (this.get_GraphicsDevice()).Clear($T00().Color$Transparent$value.MemberwiseClone());
      $thisType.spriteBatch.Begin(
        $T42().FrontToBack, 
        $T43().AlphaBlend, 
        $T44().LinearWrap, 
        $T45().None, 
        $T46().CullCounterClockwise, 
        null, 
        $T03().get_Identity().MemberwiseClone()
      );
      $S12().CallVirtual("Draw", null, $thisType.spriteBatch, 
        tempConsoleTex, 
        tempLocation.MemberwiseClone(), 
        null, 
        $T00().Color$White$value.MemberwiseClone(), 
        0, 
        $T01().get_Zero().MemberwiseClone(), 
        tempScale, 
        $T4E().None, 
        0.5
      );
      $thisType.spriteBatch.End();
      (this.get_GraphicsDevice()).SetRenderTarget(null);
      $thisType.consoleTex = renderTarget;
    }
    if ($thisType.jamie !== null) {
      $thisType.jamie.inputEnabled = !$thisType.console;
    }
    $thisType.consoleLine = ((($thisType.developerConsole.lines | 0) + 1) | 0);
    $thisType.consoleMoveTimer = 1 - +$thisType.consoleMoveTimer;
  }; 

  function Irbis_PlayerDeath () {
    if ($thisType.onslaughtMode) {
      if (($thisType.onslaughtSpawner.wave | 0) > ($thisType.savefile.bestOnslaughtWave | 0)) {
        $thisType.savefile.bestOnslaughtWave = ($thisType.onslaughtSpawner.wave | 0);
        $thisType.savefile.bestOnslaughtWaveLevel = $thisType.currentLevel;
      }
    }
    var loselisttimerindex = ($thisType.savefile.loseList.IndexOf($thisType.currentLevel) | 0);
    if (loselisttimerindex >= 0) {
      if (+$thisType.timer > +$thisType.savefile.timerLoseList.get_Item(loselisttimerindex)) {
        $thisType.savefile.timerLoseList.set_Item(loselisttimerindex, $thisType.timer);
      }
    } else {
      $thisType.savefile.loseList.Add($thisType.currentLevel);
      $thisType.savefile.timerLoseList.Add($thisType.timer);
    }
    $thisType.WriteLine("PlayerDeath");
    $thisType.savefile.Save($thisType.autosave);
  }; 

  function Irbis_PlaySong (songName, repeat) {
    var songIndex = ($thisType.musicList.IndexOf(songName) | 0);
    if (songIndex >= 0) {
      $T71().set_Volume(+(((+$thisType.masterAudioLevel * +$thisType.musicLevel) / 10000)));
      $T71().Play($thisType.music.get_Item(songIndex));
      $T71().set_IsRepeating(repeat);
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function Irbis_PointParser (value) {
    return $T1C().get_Zero();
  }; 

  function Irbis_PrintDebugInfo () {
    $thisType.debuginfo.Update(("      DEBUG MODE. " + $thisType.versionID.toUpperCase() + " v" + $thisType.versionNo), true);
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n DeltaTime:", $T14().$Box($thisType.get_DeltaTime())));
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n       FPS:", $T14().__Type__.__PublicInterface__.$ToString(+((1 / +$thisType.get_DeltaTime())), "0000.0", null)));
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n  smartFPS:", $T2E().__Type__.__PublicInterface__.$ToString($thisType.smartFPS.get_Framerate(), "0000.0", null)));
    if ($thisType.meanFPS !== null) {
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n   meanFPS:", $T2E().__Type__.__PublicInterface__.$ToString($thisType.meanFPS.get_Framerate(), "0000.0", null)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n    minFPS:", $T2E().__Type__.__PublicInterface__.$ToString($thisType.minFPS, "0000.0", null)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n    maxFPS:", $T2E().__Type__.__PublicInterface__.$ToString($thisType.maxFPS, "0000.0", null)));
    }
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n     timer:", this.TimerText($thisType.timer)));
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nnextFrameTimer:", $T14().$Box($thisType.nextFrameTimer)));
    if ($thisType.jamie !== null) {
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n     input:", $thisType.jamie.input, "  isRunning:", $T1E().$Box($thisType.jamie.isRunning)])));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n prevInput:", $thisType.jamie.prevInput));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n\nwallJumpTimer:", $T14().$Box($thisType.jamie.wallJumpTimer)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, "\n\n  player info");
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\nHealth:", $T14().$Box($thisType.jamie.health), "\nShield:", $T14().$Box($thisType.jamie.shield), "\nEnergy:", $T14().$Box($thisType.jamie.energy)])));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n    pos:", $thisType.jamie.position));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n    vel:", $thisType.jamie.velocity));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nbaseVel:", $thisType.jamie.baseVelocity));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n   col:", $thisType.jamie.get_Collider()));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nmaxspeed:", $T14().$Box($thisType.jamie.debugspeed)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\ninvulner:", $T14().$Box($thisType.jamie.invulnerable)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nShielded:", $T1E().$Box($thisType.jamie.shielded)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\ncolliders:", $T0E().$Box($thisType.collisionObjects.get_Count())));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n collided:", $T0E().$Box($thisType.jamie.collided.get_Count())));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n   walled:", $thisType.jamie.get_Walled()));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nattackin:", $thisType.jamie.attacking));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nattackID:", $T0E().$Box($thisType.jamie.attackID)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nactivity:", $thisType.jamie.activity));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n          animation:", $T0E().$Box($thisType.jamie.currentAnimation)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nanimationSourceRect:", $thisType.jamie.animationSourceRect));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n    animationNoLoop:", $T1E().$Box($thisType.jamie.animationNoLoop)));
    }
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\ncurrentLevel:", $thisType.currentLevel));
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n onslaught:", $T1E().$Box($thisType.onslaughtMode)));
    if (!(!$thisType.onslaughtMode || ($thisType.onslaughtSpawner === null))) {
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n      wave:", $T0E().$Box($thisType.onslaughtSpawner.wave)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nspawntimer:", $T14().$Box($thisType.onslaughtSpawner.timeUntilNextSpawn)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n   enemies:", $T0E().$Box($thisType.onslaughtSpawner.enemiesLeftThisWave)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nmaxenemies:", $T0E().$Box($thisType.onslaughtSpawner.maxEnemies)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n   ehealth:", $T14().$Box($thisType.onslaughtSpawner.enemyHealth)));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n   edamage:", $T14().$Box($thisType.onslaughtSpawner.enemyDamage)));
    }
    if ($thisType.framebyframe) {
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nFrame-by-frame mode:", $T1E().$Box($thisType.framebyframe)));
    }
    if (($thisType.enemyList.get_Count() | 0) > 0) {
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n\nTotal of ", $T0E().$Box($thisType.enemyList.get_Count()), " enemies"));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, "\nEnemy Info:");
      var avghp = 0;

      for (var i = ((($thisType.enemyList.get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        avghp += +$IM05().Call($thisType.enemyList.get_Item(i), null);
      }
      avghp = +((avghp / +($thisType.enemyList.get_Count())));
      $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n  avg health: ", $T14().$Box(avghp)));
      if ($T74().op_Equality(JSIL.GetType($thisType.enemyList.get_Item(0)), $T75().__Type__)) {
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n\n   Lizard Activity:", $T75().$Cast($thisType.enemyList.get_Item(0)).activity));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n  melee activities:", $T0E().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).meleeActivitiesInARow)));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n     ActiveAttacks:", ($T75().$Cast($thisType.enemyList.get_Item(0))).get_ActiveAttacks()));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n          velocity:", ($T75().$Cast($thisType.enemyList.get_Item(0))).get_Velocity()));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n         direction:", $T75().$Cast($thisType.enemyList.get_Item(0)).direction));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n              roll:", $T0E().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).state[1]), " cooldown:", $T14().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).cooldown[1])])));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n             swipe:", $T0E().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).state[2]), " cooldown:", $T14().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).cooldown[2])])));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n              bury:", $T0E().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).state[4]), " cooldown:", $T14().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).cooldown[4])])));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n            wander:", $T0E().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).state[0]), " cooldown:", $T14().$Box($T75().$Cast($thisType.enemyList.get_Item(0)).cooldown[0])])));
        $S34().CallVirtual("Update", null, $thisType.debuginfo, "\n");
      }

      for (i = 0; i < ($thisType.enemyList.get_Count() | 0); i = ((i + 1) | 0)) {
        $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["\n enemy: ", JSIL.GetType($thisType.enemyList.get_Item(i)), "\nhealth: ", $T14().$Box($IM05().Call($thisType.enemyList.get_Item(i), null)), "\n  stun: ", $T14().$Box($IM06().Call($thisType.enemyList.get_Item(i), null))])));
      }
    }
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\n    Camera:", $thisType.camera));
    $S34().CallVirtual("Update", null, $thisType.debuginfo, JSIL.ConcatString("\nmainCamera:", $thisType.mainCamera));
  }; 

  function Irbis_PrintVersion () {
    $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["    Project: Irbis (", $thisType.versionTy, ")\n    ", $thisType.versionID, " v", $thisType.versionNo])));
  }; 

  function Irbis_QueueThread (callBack) {
    $T77().QueueUserWorkItem(callBack);
    $S38().CallStatic($T12(), "Increment", null, /* ref */ new JSIL.MemberReference($thisType, "pendingThreads"));
  }; 

  function Irbis_QueueThreadNoWait (callBack) {
    $T77().QueueUserWorkItem(callBack);
  }; 

  function Irbis_Quit () {
    $thisType.Crash = false;
    if (($thisType.debug | 0) > 0) {
      $thisType.ExportConsole();
    }
    this.Exit();
  }; 

  function Irbis_RandomInt (maxValue) {
    return $thisType.RAND.Next(maxValue);
  }; 

  function Irbis_RemoveFromPrintList (printStatement) {

  $loop0: 
    for (var i = 0; i < ($thisType.printList.get_Count() | 0); i = ((i + 1) | 0)) {
      if ($thisType.printList.get_Item(i).statement == printStatement) {
        $thisType.printList.RemoveAt(i);
        break $loop0;
      }
    }
  }; 

  function Irbis_ResizeTexture (TextureToResize, Scale, PointClamp) {
    var renderTarget = $S37().Construct($thisType.game.get_GraphicsDevice(), ((+(+((TextureToResize.get_Bounds()).get_Size().X) / +Scale)) | 0), ((+(+((TextureToResize.get_Bounds()).get_Size().Y) / +Scale)) | 0));
    $thisType.game.get_GraphicsDevice().SetRenderTarget(renderTarget);
    $thisType.game.get_GraphicsDevice().Clear($T00().Color$Transparent$value.MemberwiseClone());
    if (PointClamp) {
      $thisType.spriteBatch.Begin(
        $T42().FrontToBack, 
        $T43().AlphaBlend, 
        $T44().PointClamp, 
        $T45().None, 
        $T46().CullCounterClockwise, 
        null, 
        $T03().get_Identity().MemberwiseClone()
      );
    } else {
      $thisType.spriteBatch.Begin(
        $T42().FrontToBack, 
        $T43().AlphaBlend, 
        $T44().LinearClamp, 
        $T45().None, 
        $T46().CullCounterClockwise, 
        null, 
        $T03().get_Identity().MemberwiseClone()
      );
    }
    $S39().CallVirtual("Draw", null, $thisType.spriteBatch, TextureToResize, $S02().Construct(0, 0, ((+(+((TextureToResize.get_Bounds()).get_Size().X) / +Scale)) | 0), ((+(+((TextureToResize.get_Bounds()).get_Size().Y) / +Scale)) | 0)), $T00().Color$White$value.MemberwiseClone());
    $thisType.spriteBatch.End();
    $thisType.game.get_GraphicsDevice().SetRenderTarget(null);
    return renderTarget;
  }; 

  function Irbis_ReturnCamera$10 (duration) {
    if (+duration > 0) {
      $thisType.cameraReturnTime = +duration;
    }
  }; 

  function Irbis_ReturnCamera$11 () {
    $thisType.cameraReturnTime = +$thisType.cameraReturnTime - +$thisType.get_DeltaTime();
    $thisType.camera.X = +$S04().CallStatic($thisType, "Lerp", null, $thisType.camera.X, $thisType.mainCamera.X, +$thisType.cameraLerpSpeed * +$thisType.get_DeltaTime());
    $thisType.camera.Y = +$S04().CallStatic($thisType, "Lerp", null, $thisType.camera.Y, $thisType.mainCamera.Y, +$thisType.cameraLerpSpeed * +$thisType.get_DeltaTime());
  }; 

  function Irbis_SaveLevel (levelname) {
    var $temp00;
    var thisLevel = new ($T20())(true);
    var squareSpawns = $S3A().Construct();
    var squareTextures = $S0C().Construct();
    var squareDepths = $S3B().Construct();

    for (var i = 0; i < ($thisType.squareList.get_Count() | 0); i = ((i + 1) | 0)) {
      squareSpawns.Add((($thisType.squareList.get_Item(i)).get_Position().MemberwiseClone()).ToPoint().MemberwiseClone());
      squareDepths.Add($thisType.squareList.get_Item(i).depth);
      squareTextures.Add($thisType.squareList.get_Item(i).texture.GraphicsResource$Name$value);
    }
    var BackgroundSquares = $S3A().Construct();
    var backgroundTextures = $S0C().Construct();
    var backgroundSquareDepths = $S3B().Construct();

    for (i = 0; i < ($thisType.backgroundSquareList.get_Count() | 0); i = ((i + 1) | 0)) {
      BackgroundSquares.Add($thisType.backgroundSquareList.get_Item(i).initialPosition.MemberwiseClone());
      backgroundTextures.Add($thisType.backgroundSquareList.get_Item(i).texture.GraphicsResource$Name$value);
      backgroundSquareDepths.Add($thisType.backgroundSquareList.get_Item(i).depth);
    }
    thisLevel.set_SquareSpawnPoints(squareSpawns);
    thisLevel.squareDepths = squareDepths;
    thisLevel.squareTextures = squareTextures;
    thisLevel.set_BackgroundSquares(BackgroundSquares);
    thisLevel.backgroundTextures = backgroundTextures;
    thisLevel.backgroundSquareDepths = backgroundSquareDepths;
    thisLevel.levelName = $thisType.currentLevel;
    if ($thisType.onslaughtSpawner !== null) {
      var vendingMachineLocations = $S3A().Construct();
      var vendingMachineTypes = $S3C().Construct();
      var vendingMachineTextures = $S0C().Construct();

      for (var a$0 = $thisType.onslaughtSpawner.vendingMachineList._items, i$0 = 0, l$0 = ($thisType.onslaughtSpawner.vendingMachineList._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var v = a$0[i$0];
        vendingMachineTextures.Add((v.vendingTex).toString());
        vendingMachineLocations.Add((v.displayLocation).ToPoint().MemberwiseClone());
        vendingMachineTypes.Add(v.type);
      }
      thisLevel.set_VendingMachineLocations($T69().prototype.ToArray.call(vendingMachineLocations));
      thisLevel.set_VendingMachineTextures($T3B().prototype.ToArray.call(vendingMachineTextures));
      thisLevel.set_VendingMachineTypes($T79().prototype.ToArray.call(vendingMachineTypes));
      $thisType.WriteLine(JSIL.ConcatString("vendingMachineLocations count: ", $T0E().$Box(vendingMachineLocations.get_Count())));
      $thisType.WriteLine(JSIL.ConcatString("vendingMachineTextures count: ", $T0E().$Box(vendingMachineTextures.get_Count())));
      $thisType.WriteLine(JSIL.ConcatString("vendingMachineTypes count: ", $T0E().$Box(vendingMachineTypes.get_Count())));
    } else {
      thisLevel.set_VendingMachineLocations(JSIL.Array.New($T1C(), 0));
      thisLevel.set_VendingMachineTextures(JSIL.Array.New($T0A(), 0));
      thisLevel.set_VendingMachineTypes(JSIL.Array.New($T1F(), 0));
    }
    thisLevel.isOnslaught = $thisType.onslaughtMode;
    (thisLevel.PlayerSpawn = $thisType.initialPos.MemberwiseClone());
    (thisLevel.BossSpawn = this.bossSpawn.MemberwiseClone());
    thisLevel.bossName = this.bossName;
    thisLevel.set_EnemySpawnPoints(this.enemySpawnPoints);
    thisLevel.Save((".\\levels\\" + levelname + ".lvl"));
    $thisType.WriteLine((".\\levels\\" + levelname + ".lvl saved"));
    $T09().WriteLine((".\\levels\\" + levelname + ".lvl saved"));
  }; 

  function Irbis_SetResolution (newResolution) {
    $thisType.resolution = newResolution.MemberwiseClone();
    $thisType.tempResolution = newResolution.MemberwiseClone();
    $thisType.halfResolution.X = ((($thisType.resolution.X | 0) / 2) | 0);
    $thisType.halfResolution.Y = ((($thisType.resolution.Y | 0) / 2) | 0);
    $thisType.consoleRect = $S02().Construct(0, -$thisType.halfResolution.Y, $thisType.resolution.X, $thisType.halfResolution.Y);
    $thisType.zeroScreenspace = $S06().Construct($T1C().get_Zero(), $thisType.resolution);
    if ($thisType.consoleWriteline !== null) {
      $S2F().CallVirtual("Update", null, $thisType.developerConsole, $thisType.resolution.X);
      $S2F().CallVirtual("Update", null, $thisType.consoleWriteline, $thisType.resolution.X);
    }
    $thisType.graphics.set_PreferredBackBufferHeight($thisType.resolution.Y);
    $thisType.graphics.set_PreferredBackBufferWidth($thisType.resolution.X);
    $thisType.game.get_GraphicsDevice().SetRenderTarget(null);
  }; 

  function Irbis_SetScreenScale (newScale) {
    if (+newScale > 0) {
      $thisType.screenScale = +newScale;
    } else if (+$thisType.screenScale <= 0) {
      $thisType.screenScale = +((+($thisType.resolution.X) / 480));
    }
    if ($thisType.bars !== null) {
      $thisType.bars = new ($T22())($thisType.game.get_Content().Load$b1($T2A())("bar health"), $thisType.game.get_Content().Load$b1($T2A())("bar shield"), $thisType.game.get_Content().Load$b1($T2A())("bar energy"), $thisType.game.get_Content().Load$b1($T2A())("bar potion fill 1"), $thisType.game.get_Content().Load$b1($T2A())("bar enemy fill"), $thisType.game.get_Content().Load$b1($T2A())("shieldBar"), $thisType.game.get_Content().Load$b1($T2A())("bars"), $thisType.game.get_Content().Load$b1($T2A())("bar enemy"), JSIL.Array.New($T2A(), [$thisType.game.get_Content().Load$b1($T2A())("bar potion 1"), $thisType.game.get_Content().Load$b1($T2A())("bar potion 2"), $thisType.game.get_Content().Load$b1($T2A())("bar potion 3")]));
    }
    if (+(((+(+$thisType.screenScale / 2)) | 0)) === +((+$thisType.screenScale / 2))) {
      $thisType.textScale = ((+(+$thisType.screenScale / 2)) | 0);
    } else {
      $thisType.textScale = ((((+(+$thisType.screenScale / 2)) | 0) + 1) | 0);
    }
    $thisType.maxButtonsOnScreen = ((+(+($thisType.resolution.Y) / (50 * +($thisType.textScale)))) | 0);
  }; 

  function Irbis_SideClosest (rectangle1, rectangle2) {
    var Closest = $T5F().Top;
    var ClosestDistance = 2147483647;
    var temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Bottom(), 
      rectangle2.get_Bottom()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Bottom;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Bottom(), 
      rectangle2.get_Top()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Bottom;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Left(), 
      rectangle2.get_Left()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Left;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Left(), 
      rectangle2.get_Right()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Left;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Right(), 
      rectangle2.get_Right()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Right;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Right(), 
      rectangle2.get_Left()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Right;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Top(), 
      rectangle2.get_Top()
    ) | 0);
    if (temp < ClosestDistance) {
      ClosestDistance = temp;
      Closest = $T5F().Top;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Top(), 
      rectangle2.get_Bottom()
    ) | 0);
    if (temp < ClosestDistance) {
      Closest = $T5F().Top;
    }
    return Closest;
  }; 

  function Irbis_SummonBoss (Boss, Location) {
    if (!$T0A().IsNullOrEmpty(Boss)) {
      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["Summoning boss name:", Boss, " at location:", Location])));
      var text = (Boss.trim().toLowerCase());
      if (text !== null) {
        if (text == "lizard") {
          var tempLizardGuy = new ($T75())((this.get_Content()).Load$b1($T2A())("Lizard"), Location.MemberwiseClone(), 999, 50, 500, null, 0.45);
          $thisType.enemyList.Add(tempLizardGuy);
          $thisType.collisionObjects.Add(tempLizardGuy);
        }
      }
    }
  }; 

  function Irbis_SummonGenericEnemy$12 () {
    if (((this.enemySpawnPoints).get_Count() | 0) > 0) {
      var spawnpoint = ((+$thisType.RAND.NextDouble() * +((this.enemySpawnPoints).get_Count())) | 0);
      var tempEnemy = new ($T7A())(JSIL.ConcatString("Enemy ", $T0E().$Box(((($thisType.enemyList.get_Count() | 0) + 1) | 0))), this.enemy0Tex, (this.enemySpawnPoints).get_Item(spawnpoint).MemberwiseClone(), 100, 10, 200, 0.4);
      $thisType.enemyList.Add(tempEnemy);
      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["enemy spawned at ", (this.enemySpawnPoints).get_Item(spawnpoint), ". health:100 damage:10 speed:300. timer:", $T2E().$Box($thisType.get_Timer())])));
    } else {
      $T09().WriteLine("Error, no spawn points");
    }
  }; 

  function Irbis_SummonGenericEnemy$13 (health, damage, speed) {
    if (((this.enemySpawnPoints).get_Count() | 0) > 0) {
      var spawnpoint = ((+$thisType.RAND.NextDouble() * +((this.enemySpawnPoints).get_Count())) | 0);
      var tempEnemy = new ($T7A())(JSIL.ConcatString("Enemy ", $T0E().$Box(((($thisType.enemyList.get_Count() | 0) + 1) | 0))), this.enemy0Tex, (this.enemySpawnPoints).get_Item(spawnpoint).MemberwiseClone(), health, damage, speed, 0.4);
      $thisType.enemyList.Add(tempEnemy);
      $thisType.WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["enemy spawned at ", (this.enemySpawnPoints).get_Item(spawnpoint), ". health:", $T14().$Box(health), " damage:", $T14().$Box(damage), " speed:", $T14().$Box(speed), ". timer:", $T2E().$Box($thisType.get_Timer())])));
    } else {
      $thisType.WriteLine("Error, no spawn points");
    }
  }; 

  function Irbis_TextEntered (sender, e) {
    if (!((this.onTextEntered === null) || !$thisType.acceptTextInput)) {
      this.onTextEntered(sender, e);
    }
  }; 

  function Irbis_TimerText (timer) {
    return ($T0E().__Type__.__PublicInterface__.$ToString(((+(+timer / 60)) | 0), "00", null) + ":" + $T2E().__Type__.__PublicInterface__.$ToString((+timer % 60), $thisType.timerAccuracy, null));
  }; 

  function Irbis_UnidirectionalDistance$14 (float1, float2) {
    return Math.abs((+float1 - +float2));
  }; 

  function Irbis_UnidirectionalDistance$15 (int1, int2) {
    return Math.abs((((int1 | 0) - (int2 | 0)) | 0));
  }; 

  function Irbis_UnidirectionalDistance$16 (rectangle1, rectangle2, X) {
    if (X) {
      var result = ($thisType.XDistance(rectangle1.MemberwiseClone(), rectangle2.MemberwiseClone()) | 0);
    } else {
      result = ($thisType.YDistance(rectangle1.MemberwiseClone(), rectangle2.MemberwiseClone()) | 0);
    }
    return result;
  }; 

  function Irbis_UnloadContent () {
  }; 

  function Irbis_Update (gameTime) {
    $thisType.pendingThreads = 0;
    $thisType.doneEvent = new ($T5A())(false);
    $thisType.keyboardState = $T7B().GetState();
    $thisType.mouseState = $T7C().GetState().MemberwiseClone();
    if ($thisType.useMultithreading) {
      $thisType.QueueThread($T61().New(this, null, new JSIL.MethodPointerInfo($thisType, "DebugUpdate", $S3E(), false, false)));
    } else {
      this.DebugUpdate(null);
    }
    $thisType.smartFPS.Update((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds());
    $thisType.elapsedTime = +(gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds();
    $thisType.deltaTime = Math.fround($thisType.elapsedTime) * +$thisType.timeScale;
    if (!($thisType.sceneIsMenu || $thisType.acceptTextInput)) {
      this.LevelUpdate(gameTime);
    } else {
      $thisType.mouseState = $T7C().GetState().MemberwiseClone();
      if ($thisType.levelEditor) {
        if ($thisType.useMultithreading) {
          $thisType.QueueThread($T61().New(this, null, new JSIL.MethodPointerInfo($thisType, "LevelEditor", $S3F(), false, false)));
        } else {
          this.LevelEditor(null);
        }
        if (!(!$thisType.GetKeyDown($T1D().Escape) && !$thisType.GetKeyDown($T1D().Pause))) {
          this.LoadMenu(0, 0, false);
          $thisType.levelEditor = false;
        }
      } else {
        this.MenuUpdate();
      }
      $thisType.previousMouseState = $thisType.mouseState.MemberwiseClone();
    }
    if ($thisType.GetKeyDown($T1D().OemTilde)) {
      var arg_153_0 = $thisType.sceneIsMenu;
      this.OpenConsole();
    }
    if (+$thisType.consoleMoveTimer > 0) {
      this.MoveConsole();
    }
    if (!(!$thisType.acceptTextInput || !$thisType.console)) {
      this.UpdateConsole();
    }
    if (($thisType.debug | 0) > 3) {
      if ($thisType.mouseState.get_LeftButton() === $T56().Pressed) {

        for (var i = 0; i < ($thisType.debugrays.length | 0); i = ((i + 1) | 0)) {
          $thisType.debugrays[i] = new ($T04())($S1F().CallStatic($T01(), "op_Division", null, $thisType.mouseState.get_Position().MemberwiseClone().ToVector2().MemberwiseClone(), $thisType.screenScale).MemberwiseClone(), ($thisType.debugrays[i]).get_Direction().MemberwiseClone());
        }
      }
      $thisType.shadows.Clear();

      for (i = 0; i < ($thisType.debugrays.length | 0); i = ((i + 1) | 0)) {
        var tempvector = $S40().CallVirtual("Intersect", null, $thisType.debugrays[i], $thisType.debugshapes).MemberwiseClone();
        if ($T01().op_Inequality(tempvector, $T01().get_Zero())) {
          $thisType.shadows.Add(tempvector.MemberwiseClone());
        }
      }
      $thisType.shadowShape.set_Vertices($T27().prototype.ToArray.call($thisType.shadows));
    }
    $thisType.previousMouseState = $thisType.mouseState.MemberwiseClone();
    $thisType.previousKeyboardState = $thisType.keyboardState.MemberwiseClone();
    if (($thisType.pendingThreads | 0) <= 0) {
      $thisType.doneEvent.Set();
    }
    $thisType.doneEvent.WaitOne();
    $T08().prototype.Update.call(this, gameTime);
  }; 

  function Irbis_UpdateConsole () {
    $thisType.consoleWriteline.Update($thisType.textInputBuffer, true);
    if (!(!$thisType.GetKeyDown($T1D().Down) || (($thisType.developerConsole.lines | 0) < ((($thisType.consoleLine | 0) + 1) | 0)))) {
      $thisType.consoleLineChangeTimer = 0;
      $thisType.consoleLine = ((($thisType.consoleLine | 0) + 1) | 0);
      $thisType.textInputBuffer = $thisType.developerConsole.GetLine($thisType.consoleLine);
    }
    if (!(!$thisType.GetKeyDown($T1D().Up) || (((($thisType.consoleLine | 0) - 1) | 0) < 0))) {
      $thisType.consoleLineChangeTimer = 0;
      $thisType.consoleLine = ((($thisType.consoleLine | 0) - 1) | 0);
      $thisType.textInputBuffer = $thisType.developerConsole.GetLine($thisType.consoleLine);
    }
    if (!(!$thisType.keyboardState.IsKeyDown($T1D().Up) && !$thisType.keyboardState.IsKeyDown($T1D().Down))) {
      $thisType.consoleLineChangeTimer = +$thisType.consoleLineChangeTimer + +$thisType.get_DeltaTime();
    }
    if (+$thisType.consoleLineChangeTimer >= 0.5) {
      if (!(!$thisType.keyboardState.IsKeyDown($T1D().Up) || (((($thisType.consoleLine | 0) - 1) | 0) < 0))) {
        $thisType.consoleLine = ((($thisType.consoleLine | 0) - 1) | 0);
        $thisType.textInputBuffer = $thisType.developerConsole.GetLine($thisType.consoleLine);
      }
      if (!(!$thisType.keyboardState.IsKeyDown($T1D().Down) || (($thisType.developerConsole.lines | 0) < ((($thisType.consoleLine | 0) + 1) | 0)))) {
        $thisType.consoleLine = ((($thisType.consoleLine | 0) + 1) | 0);
        $thisType.textInputBuffer = $thisType.developerConsole.GetLine($thisType.consoleLine);
      }
      $thisType.consoleLineChangeTimer = +$thisType.consoleLineChangeTimer - 0.05;
    }
    if (!(!$thisType.keyboardState.IsKeyDown($T1D().Enter) || $thisType.previousKeyboardState.IsKeyDown($T1D().Enter))) {
      $thisType.consoleWriteline.Update($T0A().Empty, true);
      this.ConsoleParser($thisType.textInputBuffer);
      $thisType.textInputBuffer = $T0A().Empty;
    }
    if (!(!$thisType.GetKeyDown($T1D().Escape) && !$thisType.GetKeyDown($T1D().Pause))) {
      this.OpenConsole();
    }
  }; 

  function Irbis_UpdateEnemyHealthBar (threadContext, $exception) {
    var $temp00;
    try {
      if (($thisType.enemyList.get_Count() | 0) > 0) {
        var closest = $thisType.enemyList.get_Item(0);
        var closestSqrDistance = 3.40282347E+38;
        try {

          for (var a$0 = $thisType.enemyList._items, i$0 = 0, l$0 = ($thisType.enemyList._size | 0); i$0 < l$0; ($temp00 = i$0, 
              i$0 = ((i$0 + 1) | 0), 
              $temp00)) {
            var e = a$0[i$0];
            var thisEnemysSqrDistance = +$S0F().CallStatic($thisType, "DistanceSquared", null, 
              $thisType.jamie.get_Collider().MemberwiseClone(), 
              $IM09().Call(e, null).MemberwiseClone()
            );
            if (thisEnemysSqrDistance < closestSqrDistance) {
              closestSqrDistance = thisEnemysSqrDistance;
              closest = e;
            }
          }
        } catch ($exception) {
          if ($T80().$Is($exception)) {
            $thisType.WriteLine("caught: InvalidOperationException");
            $T09().WriteLine("caught: InvalidOperationException");
          } else {
            throw $exception;
          }
        }
        if (closestSqrDistance <= +$thisType.minSqrDetectDistance) {
          $thisType.displayEnemyHealth = $thisType.jamie.combat = true;
          $thisType.jamie.Combat();
          $T22().enemyHealthBar.maxValue = +$IM0A().Call(closest, null);
          $T22().enemyHealthBar.UpdateValue($IM05().Call(closest, null));
          $T22().$name.Update($IM0B().Call(closest, null), true);
        } else {
          $thisType.displayEnemyHealth = $thisType.jamie.combat = false;
        }
      } else {
        $thisType.displayEnemyHealth = $thisType.jamie.combat = false;
      }
    } finally {
      if (($S05().CallStatic($T12(), "Decrement", null, /* ref */ new JSIL.MemberReference($thisType, "pendingThreads")) | 0) <= 0) {
        $thisType.doneEvent.Set();
      }
    }
  }; 

  function Irbis_Use () {
    return !(!(($thisType.keyboardState.IsKeyDown($thisType.shockwaveKey) && 
          !$thisType.previousKeyboardState.IsKeyDown($thisType.shockwaveKey)) || 
        ($thisType.keyboardState.IsKeyDown($thisType.altShockwaveKey) && 
          !$thisType.previousKeyboardState.IsKeyDown($thisType.altShockwaveKey)) || 
        ($thisType.keyboardState.IsKeyDown($thisType.attackKey) && 
          !$thisType.previousKeyboardState.IsKeyDown($thisType.attackKey)) || 
        ($thisType.keyboardState.IsKeyDown($thisType.altAttackKey) && 
          !$thisType.previousKeyboardState.IsKeyDown($thisType.altAttackKey)) || 
        ($thisType.keyboardState.IsKeyDown($thisType.jumpKey) && 
          !$thisType.previousKeyboardState.IsKeyDown($thisType.jumpKey))) && (!$thisType.keyboardState.IsKeyDown($thisType.altJumpKey) || 
        $thisType.previousKeyboardState.IsKeyDown($thisType.altJumpKey)));
  }; 

  function Irbis_Write (line) {
    $thisType.developerConsole.Write(line);
  }; 

  function Irbis_WriteLine$17 (line) {
    $thisType.developerConsole.WriteLine(line);
    $thisType.consoleLine = ((($thisType.developerConsole.lines | 0) + 1) | 0);
  }; 

  function Irbis_WriteLine$18 () {
    $thisType.developerConsole.WriteLine();
    $thisType.consoleLine = ((($thisType.developerConsole.lines | 0) + 1) | 0);
  }; 

  function Irbis_XDistance (rectangle1, rectangle2) {
    var Shortest = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Left(), 
      rectangle2.get_Right()
    ) | 0);
    var temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle2.get_Left(), 
      rectangle1.get_Right()
    ) | 0);
    if (temp < Shortest) {
      Shortest = temp;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle2.get_Left(), 
      rectangle1.get_Left()
    ) | 0);
    if (temp < Shortest) {
      Shortest = temp;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle2.get_Right(), 
      rectangle1.get_Right()
    ) | 0);
    if (temp < Shortest) {
      Shortest = temp;
    }
    return Shortest;
  }; 

  function Irbis_YDistance (rectangle1, rectangle2) {
    var Shortest = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle1.get_Top(), 
      rectangle2.get_Bottom()
    ) | 0);
    var temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle2.get_Top(), 
      rectangle1.get_Bottom()
    ) | 0);
    if (temp < Shortest) {
      Shortest = temp;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle2.get_Top(), 
      rectangle1.get_Top()
    ) | 0);
    if (temp < Shortest) {
      Shortest = temp;
    }
    temp = ($S3D().CallStatic($thisType, "UnidirectionalDistance", null, 
      rectangle2.get_Bottom(), 
      rectangle1.get_Bottom()
    ) | 0);
    if (temp < Shortest) {
      Shortest = temp;
    }
    return Shortest;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "Irbis.Irbis", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Irbis__ctor
    );

    $.Method({Static:true , Public:true }, "AddPlayerEnchant", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.EnchantType")), 
      Irbis_AddPlayerEnchant
    );

    $.Method({Static:false, Public:false}, "Camera", 
      JSIL.MethodSignature.Action($.Object), 
      Irbis_Camera
    );

    $.Method({Static:true , Public:true }, "CameraShake", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      Irbis_CameraShake$00
    );

    $.Method({Static:true , Public:false}, "CameraShake", 
      JSIL.MethodSignature.Return($.Single), 
      Irbis_CameraShake$01
    );

    $.Method({Static:true , Public:true }, "CameraSwing", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      Irbis_CameraSwing$02
    );

    $.Method({Static:true , Public:false}, "CameraSwing", 
      JSIL.MethodSignature.Return($.Single), 
      Irbis_CameraSwing$03
    );

    $.Method({Static:false, Public:false}, "CleanConsole", 
      JSIL.MethodSignature.Void, 
      Irbis_CleanConsole
    );

    $.Method({Static:false, Public:true }, "ClearLevel", 
      JSIL.MethodSignature.Void, 
      Irbis_ClearLevel
    );

    $.Method({Static:false, Public:true }, "ClearUI", 
      JSIL.MethodSignature.Void, 
      Irbis_ClearUI
    );

    $.Method({Static:false, Public:true }, "ConsoleParser", 
      JSIL.MethodSignature.Action($.String), 
      Irbis_ConsoleParser
    );

    $.Method({Static:false, Public:true }, "ConvertOldLevelFilesToNew", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_ConvertOldLevelFilesToNew
    );

    $.Method({Static:false, Public:true }, "Credits", 
      JSIL.MethodSignature.Return($.String), 
      Irbis_Credits
    );

    $.Method({Static:false, Public:true }, "Debug", 
      JSIL.MethodSignature.Action($.Int32), 
      Irbis_Debug
    );

    $.Method({Static:false, Public:false}, "DebugUpdate", 
      JSIL.MethodSignature.Action($.Object), 
      Irbis_DebugUpdate
    );

    $.Method({Static:true , Public:true }, "Directions", 
      new JSIL.MethodSignature($asm00.TypeRef("Irbis.Direction"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_Directions$04
    );

    $.Method({Static:true , Public:true }, "Directions", 
      new JSIL.MethodSignature($asm00.TypeRef("Irbis.Direction"), [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Irbis_Directions$05
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Irbis_Distance$06
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_Distance$07
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Irbis_Distance$08
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Irbis_DistanceSquared$09
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_DistanceSquared$0A
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Irbis_DistanceSquared$0B
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Irbis_Draw
    );

    $.Method({Static:false, Public:true }, "EnableLevelEditor", 
      JSIL.MethodSignature.Void, 
      Irbis_EnableLevelEditor
    );

    $.Method({Static:true , Public:true }, "ExportConsole", 
      JSIL.MethodSignature.Void, 
      Irbis_ExportConsole
    );

    $.Method({Static:true , Public:true }, "ExportString", 
      JSIL.MethodSignature.Action($.String), 
      Irbis_ExportString
    );

    $.Method({Static:false, Public:true }, "FizzBuzz", 
      JSIL.MethodSignature.Action($.Int32), 
      Irbis_FizzBuzz
    );

    $.Method({Static:true , Public:false}, "GenerateCameraShakeTarget", 
      JSIL.MethodSignature.Void, 
      Irbis_GenerateCameraShakeTarget
    );

    $.Method({Static:true , Public:true }, "get_DeltaTime", 
      JSIL.MethodSignature.Return($.Single), 
      Irbis_get_DeltaTime
    );

    $.Method({Static:true , Public:true }, "get_GetAttackKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetAttackKey
    );

    $.Method({Static:true , Public:true }, "get_GetAttackKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetAttackKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetAttackKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetAttackKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetDownKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetDownKey
    );

    $.Method({Static:true , Public:true }, "get_GetDownKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetDownKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetDownKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetDownKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetEnterKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetEnterKey
    );

    $.Method({Static:true , Public:true }, "get_GetEnterKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetEnterKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetEnterKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetEnterKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetEscapeKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetEscapeKey
    );

    $.Method({Static:true , Public:true }, "get_GetEscapeKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetEscapeKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetEscapeKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetEscapeKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetJumpKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetJumpKey
    );

    $.Method({Static:true , Public:true }, "get_GetJumpKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetJumpKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetJumpKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetJumpKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetKeyboardState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")), 
      Irbis_get_GetKeyboardState
    );

    $.Method({Static:true , Public:true }, "get_GetLeftKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetLeftKey
    );

    $.Method({Static:true , Public:true }, "get_GetLeftKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetLeftKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetLeftKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetLeftKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetLeftMouseDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetLeftMouseDown
    );

    $.Method({Static:true , Public:true }, "get_GetMouseState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Irbis_get_GetMouseState
    );

    $.Method({Static:true , Public:true }, "get_GetPotionKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetPotionKey
    );

    $.Method({Static:true , Public:true }, "get_GetPotionKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetPotionKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetPotionKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetPotionKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetPreviousKeyboardState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")), 
      Irbis_get_GetPreviousKeyboardState
    );

    $.Method({Static:true , Public:true }, "get_GetPreviousMouseState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Irbis_get_GetPreviousMouseState
    );

    $.Method({Static:true , Public:true }, "get_GetRightKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetRightKey
    );

    $.Method({Static:true , Public:true }, "get_GetRightKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetRightKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetRightKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetRightKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetRollKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetRollKey
    );

    $.Method({Static:true , Public:true }, "get_GetRollKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetRollKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetRollKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetRollKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetShieldKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetShieldKey
    );

    $.Method({Static:true , Public:true }, "get_GetShieldKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetShieldKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetShieldKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetShieldKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetShockwaveKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetShockwaveKey
    );

    $.Method({Static:true , Public:true }, "get_GetShockwaveKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetShockwaveKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetShockwaveKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetShockwaveKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetUpKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetUpKey
    );

    $.Method({Static:true , Public:true }, "get_GetUpKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetUpKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetUpKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetUpKeyUp
    );

    $.Method({Static:true , Public:true }, "get_GetUseKey", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetUseKey
    );

    $.Method({Static:true , Public:true }, "get_GetUseKeyDown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetUseKeyDown
    );

    $.Method({Static:true , Public:true }, "get_GetUseKeyUp", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_GetUseKeyUp
    );

    $.Method({Static:true , Public:true }, "get_RandomBool", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_get_RandomBool
    );

    $.Method({Static:true , Public:true }, "get_RandomFloat", 
      JSIL.MethodSignature.Return($.Single), 
      Irbis_get_RandomFloat
    );

    $.Method({Static:true , Public:true }, "get_Timer", 
      JSIL.MethodSignature.Return($.Double), 
      Irbis_get_Timer
    );

    $.Method({Static:true , Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      Irbis_GetKey
    );

    $.Method({Static:true , Public:false}, "GetKeyDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      Irbis_GetKeyDown
    );

    $.Method({Static:true , Public:false}, "GetKeyUp", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      Irbis_GetKeyUp
    );

    $.Method({Static:true , Public:true }, "GetLevelChapterAndMap", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$.String]), 
      Irbis_GetLevelChapterAndMap
    );

    $.Method({Static:false, Public:false}, "HandleInput", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Microsoft.Xna.Framework.TextInputEventArgs")]), 
      Irbis_HandleInput
    );

    $.Method({Static:false, Public:true }, "Help", 
      JSIL.MethodSignature.Return($.String), 
      Irbis_Help
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Irbis_Initialize
    );

    $.Method({Static:false, Public:true }, "Invocation", 
      JSIL.MethodSignature.Return($.String), 
      Irbis_Invocation
    );

    $.Method({Static:true , Public:true }, "IsDefaultLevelFormat", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      Irbis_IsDefaultLevelFormat
    );

    $.Method({Static:true , Public:true }, "IsTouching", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_IsTouching$0C
    );

    $.Method({Static:true , Public:true }, "IsTouching", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm00.TypeRef("Irbis.Side")
        ]), 
      Irbis_IsTouching$0D
    );

    $.Method({Static:true , Public:true }, "KillEnemy", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.IEnemy")), 
      Irbis_KillEnemy
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Irbis_Lerp$0E
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single
        ]), 
      Irbis_Lerp$0F
    );

    $.Method({Static:false, Public:true }, "LevelEditor", 
      JSIL.MethodSignature.Action($.Object), 
      Irbis_LevelEditor
    );

    $.Method({Static:false, Public:false}, "LevelUpdate", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Irbis_LevelUpdate
    );

    $.Method({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature($asm00.TypeRef("PlayerSettings"), [$.String]), 
      Irbis_Load
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Irbis_LoadContent
    );

    $.Method({Static:true , Public:true }, "LoadEnchantDescriptions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      Irbis_LoadEnchantDescriptions
    );

    $.Method({Static:true , Public:true }, "LoadEnchantIcons", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])), 
      Irbis_LoadEnchantIcons
    );

    $.Method({Static:false, Public:true }, "LoadLevel", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean]), 
      Irbis_LoadLevel
    );

    $.Method({Static:false, Public:true }, "LoadMenu", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      Irbis_LoadMenu
    );

    $.Method({Static:true , Public:false}, "LoadMusic", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_LoadMusic
    );

    $.Method({Static:false, Public:false}, "LoadScene", 
      JSIL.MethodSignature.Action($.Int32), 
      Irbis_LoadScene
    );

    $.Method({Static:true , Public:true }, "LoadTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [$.String]), 
      Irbis_LoadTexture
    );

    $.Method({Static:true , Public:false}, "MatrixPrinter", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Irbis_MatrixPrinter
    );

    $.Method({Static:false, Public:false}, "MenuUpdate", 
      JSIL.MethodSignature.Void, 
      Irbis_MenuUpdate
    );

    $.Method({Static:false, Public:false}, "MoveConsole", 
      JSIL.MethodSignature.Void, 
      Irbis_MoveConsole
    );

    $.Method({Static:false, Public:false}, "OpenConsole", 
      JSIL.MethodSignature.Void, 
      Irbis_OpenConsole
    );

    $.Method({Static:true , Public:true }, "PlayerDeath", 
      JSIL.MethodSignature.Void, 
      Irbis_PlayerDeath
    );

    $.Method({Static:true , Public:true }, "PlaySong", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean]), 
      Irbis_PlaySong
    );

    $.Method({Static:true , Public:false}, "PointParser", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$.String]), 
      Irbis_PointParser
    );

    $.Method({Static:false, Public:true }, "PrintDebugInfo", 
      JSIL.MethodSignature.Void, 
      Irbis_PrintDebugInfo
    );

    $.Method({Static:false, Public:true }, "PrintVersion", 
      JSIL.MethodSignature.Void, 
      Irbis_PrintVersion
    );

    $.Method({Static:true , Public:false}, "QueueThread", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.WaitCallback")), 
      Irbis_QueueThread
    );

    $.Method({Static:true , Public:false}, "QueueThreadNoWait", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.WaitCallback")), 
      Irbis_QueueThreadNoWait
    );

    $.Method({Static:false, Public:true }, "Quit", 
      JSIL.MethodSignature.Void, 
      Irbis_Quit
    );

    $.Method({Static:true , Public:true }, "RandomInt", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Irbis_RandomInt
    );

    $.Method({Static:true , Public:true }, "RemoveFromPrintList", 
      JSIL.MethodSignature.Action($.String), 
      Irbis_RemoveFromPrintList
    );

    $.Method({Static:true , Public:true }, "ResizeTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Single, 
          $.Boolean
        ]), 
      Irbis_ResizeTexture
    );

    $.Method({Static:true , Public:false}, "ReturnCamera", 
      JSIL.MethodSignature.Action($.Single), 
      Irbis_ReturnCamera$10
    );

    $.Method({Static:true , Public:false}, "ReturnCamera", 
      JSIL.MethodSignature.Void, 
      Irbis_ReturnCamera$11
    );

    $.Method({Static:false, Public:true }, "SaveLevel", 
      JSIL.MethodSignature.Action($.String), 
      Irbis_SaveLevel
    );

    $.Method({Static:true , Public:true }, "SetResolution", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")), 
      Irbis_SetResolution
    );

    $.Method({Static:true , Public:true }, "SetScreenScale", 
      JSIL.MethodSignature.Action($.Single), 
      Irbis_SetScreenScale
    );

    $.Method({Static:true , Public:true }, "SideClosest", 
      new JSIL.MethodSignature($asm00.TypeRef("Irbis.Side"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_SideClosest
    );

    $.Method({Static:false, Public:true }, "SummonBoss", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Irbis_SummonBoss
    );

    $.Method({Static:false, Public:true }, "SummonGenericEnemy", 
      JSIL.MethodSignature.Void, 
      Irbis_SummonGenericEnemy$12
    );

    $.Method({Static:false, Public:true }, "SummonGenericEnemy", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Irbis_SummonGenericEnemy$13
    );

    $.Method({Static:false, Public:false}, "TextEntered", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Microsoft.Xna.Framework.TextInputEventArgs")]), 
      Irbis_TextEntered
    );

    $.Method({Static:false, Public:true }, "TimerText", 
      new JSIL.MethodSignature($.String, [$.Double]), 
      Irbis_TimerText
    );

    $.Method({Static:true , Public:true }, "UnidirectionalDistance", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single]), 
      Irbis_UnidirectionalDistance$14
    );

    $.Method({Static:true , Public:true }, "UnidirectionalDistance", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]), 
      Irbis_UnidirectionalDistance$15
    );

    $.Method({Static:true , Public:true }, "UnidirectionalDistance", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $.Boolean
        ]), 
      Irbis_UnidirectionalDistance$16
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      Irbis_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Irbis_Update
    );

    $.Method({Static:false, Public:false}, "UpdateConsole", 
      JSIL.MethodSignature.Void, 
      Irbis_UpdateConsole
    );

    $.Method({Static:true , Public:false}, "UpdateEnemyHealthBar", 
      JSIL.MethodSignature.Action($.Object), 
      Irbis_UpdateEnemyHealthBar
    );

    $.Method({Static:true , Public:true }, "Use", 
      JSIL.MethodSignature.Return($.Boolean), 
      Irbis_Use
    );

    $.Method({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($.String), 
      Irbis_Write
    );

    $.Method({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Irbis_WriteLine$17
    );

    $.Method({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Void, 
      Irbis_WriteLine$18
    );

    $.Method({Static:true , Public:true }, "XDistance", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_XDistance
    );

    $.Method({Static:true , Public:true }, "YDistance", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Irbis_YDistance
    );

    $.Field({Static:true , Public:false}, "versionNo", $.String, "0.2.0.7");

    $.Field({Static:true , Public:false}, "versionID", $.String, "beta");

    $.Field({Static:true , Public:false}, "versionTy", $.String, "debug");

    $.Field({Static:true , Public:true }, "debug", $.Int32, 0);

    $.Field({Static:true , Public:true }, "Crash", $.Boolean, true);

    $.Field({Static:true , Public:false}, "debuginfo", $asm00.TypeRef("Print"));

    $.Field({Static:true , Public:false}, "smartFPS", $asm00.TypeRef("SmartFramerate"));

    $.Field({Static:true , Public:true }, "framebyframe", $.Boolean);

    $.Field({Static:true , Public:true }, "nextframe", $.Boolean);

    $.Field({Static:true , Public:false}, "meanFPS", $asm00.TypeRef("TotalMeanFramerate"));

    $.Field({Static:true , Public:false}, "minFPS", $.Double);

    $.Field({Static:true , Public:false}, "minFPStime", $.Double);

    $.Field({Static:true , Public:false}, "maxFPS", $.Double);

    $.Field({Static:true , Public:false}, "maxFPStime", $.Double);

    $.Field({Static:true , Public:false}, "recordFPS", $.Boolean);

    $.Field({Static:true , Public:false}, "framedropfactor", $.Int32, 3);

    $.Field({Static:false, Public:false}, "onTextEntered", $asm02.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Microsoft.Xna.Framework.TextInputEventArgs")]));

    $.Field({Static:true , Public:true }, "acceptTextInput", $.Boolean);

    $.Field({Static:true , Public:true }, "textInputBuffer", $.String);

    $.Field({Static:true , Public:false}, "consoleWriteline", $asm00.TypeRef("Print"));

    $.Field({Static:true , Public:false}, "developerConsole", $asm00.TypeRef("Print"));

    $.Field({Static:true , Public:true }, "console", $.Boolean);

    $.Field({Static:true , Public:false}, "consoleLine", $.Int32);

    $.Field({Static:true , Public:false}, "consoleLineChangeTimer", $.Single);

    $.Field({Static:true , Public:false}, "consoleMoveTimer", $.Single);

    $.Field({Static:true , Public:false}, "consoleRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:true , Public:false}, "consoleRectColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:true , Public:false}, "consoleTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:false}, "deltaTime", $.Single);

    $.Field({Static:true , Public:false}, "timer", $.Double);

    $.Field({Static:true , Public:false}, "elapsedTime", $.Double);

    $.Field({Static:true , Public:false}, "timeScale", $.Single, 1);

    $.Field({Static:true , Public:true }, "graphics", $asm01.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"));

    $.Field({Static:true , Public:false}, "spriteBatch", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"));

    $.Field({Static:true , Public:false}, "autosave", $.String);

    $.Field({Static:true , Public:true }, "savefile", $asm00.TypeRef("SaveFile"));

    $.Field({Static:true , Public:true }, "isMenuScrollable", $.Boolean);

    $.Field({Static:true , Public:true }, "maxButtonsOnScreen", $.Int32);

    $.Field({Static:true , Public:true }, "levelListCounter", $.Int32);

    $.Field({Static:true , Public:true }, "currentLevel", $.String);

    $.Field({Static:true , Public:false}, "backgroundSquareList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Square")]));

    $.Field({Static:true , Public:true }, "collisionObjects", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")]));

    $.Field({Static:true , Public:true }, "sList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Square")]));

    $.Field({Static:true , Public:true }, "squareList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Square")]));

    $.Field({Static:true , Public:true }, "buttonList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Button")]));

    $.Field({Static:true , Public:true }, "enemyList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.IEnemy")]));

    $.Field({Static:true , Public:true }, "printList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Print")]));

    $.Field({Static:true , Public:true }, "sliderList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("UIElementSlider")]));

    $.Field({Static:true , Public:true }, "levelList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true }, "jamie", $asm00.TypeRef("Player"));

    $.Field({Static:true , Public:true }, "initialPos", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:true }, "onslaughtMode", $.Boolean);

    $.Field({Static:true , Public:true }, "onslaughtSpawner", $asm00.TypeRef("OnslaughtSpawner"));

    $.Field({Static:true , Public:false}, "onslaughtDisplay", $asm00.TypeRef("Print"));

    $.Field({Static:true , Public:true }, "vendingMachineUseDistanceSqr", $.Int32);

    $.Field({Static:true , Public:false}, "camera", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "mainCamera", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "screenSpacePlayerPos", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "background", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Field({Static:true , Public:false}, "foreground", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Field({Static:true , Public:false}, "UIground", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Field({Static:true , Public:true }, "boundingBox", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:true , Public:true }, "screenspace", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:true , Public:true }, "zeroScreenspace", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:true , Public:true }, "screenScale", $.Single);

    $.Field({Static:true , Public:true }, "textScale", $.Int32);

    $.Field({Static:true , Public:true }, "resolution", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:true , Public:true }, "cameraLerp", $.Boolean);

    $.Field({Static:true , Public:true }, "cameraLerpSetting", $.Boolean);

    $.Field({Static:true , Public:true }, "cameraLerpSpeed", $.Single);

    $.Field({Static:true , Public:true }, "cameraShakeSetting", $.Boolean);

    $.Field({Static:true , Public:false}, "cameraShakeDuration", $.Single);

    $.Field({Static:true , Public:false}, "cameraShakeMagnitude", $.Single);

    $.Field({Static:true , Public:false}, "cameraSwingDuration", $.Single);

    $.Field({Static:true , Public:false}, "cameraSwingMaxDuration", $.Single);

    $.Field({Static:true , Public:false}, "cameraSwingMagnitude", $.Single);

    $.Field({Static:true , Public:false}, "cameraShakeLerpTime", $.Single);

    $.Field({Static:true , Public:false}, "cameraShakePercentage", $.Single);

    $.Field({Static:true , Public:false}, "cameraShakeLerpTimeMax", $.Single);

    $.Field({Static:true , Public:false}, "cameraReturnTime", $.Single);

    $.Field({Static:true , Public:false}, "cameraShakeTargetLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "cameraShakePrevLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:true }, "swingDuration", $.Single);

    $.Field({Static:true , Public:true }, "swingMagnitude", $.Single);

    $.Field({Static:true , Public:false}, "cameraSwingHeading", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:true }, "cameraSwingSetting", $.Boolean);

    $.Field({Static:true , Public:true }, "menu", $asm00.TypeRef("Menu"));

    $.Field({Static:true , Public:false}, "menuTex", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]));

    $.Field({Static:true , Public:true }, "menuSelection", $.Int32);

    $.Field({Static:true , Public:true }, "listenForNewKeybind", $.Boolean);

    $.Field({Static:true , Public:true }, "resetRequired", $.Boolean);

    $.Field({Static:true , Public:true }, "levelLoaded", $.Int32);

    $.Field({Static:true , Public:true }, "scene", $.Int32);

    $.Field({Static:true , Public:true }, "sceneIsMenu", $.Boolean);

    $.Field({Static:true , Public:true }, "levelEditor", $.Boolean);

    $.Field({Static:false, Public:false}, "selectedBlock", $.Int32);

    $.Field({Static:true , Public:true }, "vendingMachineMenu", $asm00.TypeRef("VendingMenu"));

    $.Field({Static:true , Public:true }, "AIenabled", $.Boolean);

    $.Field({Static:false, Public:false}, "enemy0Tex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "bossSpawn", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "bossName", $.String);

    $.Field({Static:false, Public:true }, "enemySpawnPoints", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:true , Public:true }, "font", $asm00.TypeRef("Font"));

    $.Field({Static:true , Public:true }, "bars", $asm00.TypeRef("Bars"));

    $.Field({Static:true , Public:true }, "timerDisplay", $asm00.TypeRef("Print"));

    $.Field({Static:true , Public:true }, "timerAccuracy", $.String);

    $.Field({Static:true , Public:true }, "minSqrDetectDistance", $.Single);

    $.Field({Static:true , Public:true }, "displayEnemyHealth", $.Boolean);

    $.Field({Static:true , Public:true }, "spriteFont", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:true , Public:true }, "spriteFont2", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:true , Public:true }, "vendingMenu", $.Int32);

    $.Field({Static:true , Public:true }, "halfResolution", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:true , Public:true }, "tempResolution", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:true , Public:true }, "masterAudioLevel", $.Single);

    $.Field({Static:true , Public:true }, "musicLevel", $.Single);

    $.Field({Static:true , Public:true }, "soundEffectsLevel", $.Single);

    $.Field({Static:false, Public:true }, "randomTimer", $.Single);

    $.Field({Static:true , Public:true }, "sliderPressed", $.Int32);

    $.Field({Static:true , Public:false}, "keyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Field({Static:true , Public:false}, "previousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Field({Static:true , Public:false}, "mouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Field({Static:true , Public:false}, "previousMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Field({Static:true , Public:true }, "attackKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altAttackKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "shockwaveKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altShockwaveKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "shieldKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altShieldKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "jumpKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altJumpKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "upKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altUpKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "downKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altDownKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "leftKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altLeftKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "rightKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altRightKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "potionKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altPotionKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "rollKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altRollKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "useKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:true }, "altUseKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:true , Public:false}, "threadCount", $.Int32);

    $.Field({Static:true , Public:false}, "useMultithreading", $.Boolean, false);

    $.Field({Static:true , Public:true }, "doneEvent", $asm02.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:true , Public:true }, "pendingThreads", $.Int32);

    $.Field({Static:true , Public:false}, "listLock", $.Object);

    $.Field({Static:true , Public:true }, "gravity", $.Single);

    $.Field({Static:true , Public:false}, "RAND", $asm02.TypeRef("System.Random"));

    $.Field({Static:true , Public:true }, "nullTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:true }, "largeNullTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:true }, "defaultTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:true , Public:true }, "game", $asm01.TypeRef("Microsoft.Xna.Framework.Game"));

    $.Field({Static:true , Public:true }, "testTree", $asm00.TypeRef("BinaryTree`1", [$.Single]));

    $.Field({Static:true , Public:false}, "nextFrameTimer", $.Single);

    $.Field({Static:true , Public:false}, "basicEffect", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect"));

    $.Field({Static:true , Public:false}, "projection", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Field({Static:true , Public:false}, "debugrays", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Ray")]), function ($pi) {
        return JSIL.Array.New($asm00.Ray, 50);
      });

    $.Field({Static:true , Public:false}, "debuglines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Line")]), function ($pi) {
        return JSIL.Array.New($asm00.Line, 5);
      });

    $.Field({Static:true , Public:false}, "debugshapes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Shape")]), function ($pi) {
        return JSIL.Array.New($asm00.Shape, 4);
      });

    $.Field({Static:true , Public:false}, "shadowShape", $asm00.TypeRef("Shape"));

    $.Field({Static:true , Public:false}, "shadows", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:true , Public:true }, "tooltipGenerator", $asm00.TypeRef("TooltipGenerator"));

    $.Field({Static:false, Public:false}, "worldSpaceMouseLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:true , Public:true }, "music", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]));

    $.Field({Static:true , Public:true }, "musicList", $asm02.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:true }, "logos", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]));

    $.Field({Static:true , Public:true }, "testRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));


    function Irbis__cctor () {
      $thisType.consoleRect = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.consoleRectColor = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.savefile = new $asm00.SaveFile();
      $thisType.initialPos = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.camera = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.mainCamera = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.screenSpacePlayerPos = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.background = new $asm01.Microsoft.Xna.Framework.Matrix();
      $thisType.foreground = new $asm01.Microsoft.Xna.Framework.Matrix();
      $thisType.UIground = new $asm01.Microsoft.Xna.Framework.Matrix();
      $thisType.boundingBox = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.screenspace = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.zeroScreenspace = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.resolution = new $asm01.Microsoft.Xna.Framework.Point();
      $thisType.cameraShakeTargetLocation = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.cameraShakePrevLocation = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.cameraSwingHeading = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.font = new $asm00.Font();
      $thisType.halfResolution = new $asm01.Microsoft.Xna.Framework.Point();
      $thisType.tempResolution = new $asm01.Microsoft.Xna.Framework.Point();
      $thisType.keyboardState = new $asm01.Microsoft.Xna.Framework.Input.KeyboardState();
      $thisType.previousKeyboardState = new $asm01.Microsoft.Xna.Framework.Input.KeyboardState();
      $thisType.mouseState = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.previousMouseState = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.projection = new $asm01.Microsoft.Xna.Framework.Matrix();
      $thisType.shadowShape = new $asm00.Shape();
      $thisType.testRectangle = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.versionNo = "0.2.0.7";
      $thisType.versionID = "beta";
      $thisType.versionTy = "debug";
      $thisType.debug = 0;
      $thisType.Crash = true;
      $thisType.framedropfactor = 3;
      $thisType.consoleRectColor = $S00().Construct(31, 29, 37, 255);
      $thisType.timeScale = 1;
      $thisType.initialPos = $S01().Construct(156, 93);
      $thisType.useMultithreading = false;
      $thisType.listLock = new ($T02())();
      $thisType.projection = $T03().get_Identity().MemberwiseClone();
      $thisType.debugrays = JSIL.Array.New($T04(), 50);
      $thisType.debuglines = JSIL.Array.New($T05(), 5);
      $thisType.debugshapes = JSIL.Array.New($T06(), 4);
      $thisType.testRectangle = $S02().Construct(300, 500, 0, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Irbis__cctor
    );

    $.Property({Static:true , Public:true }, "DeltaTime", $.Single);

    $.Property({Static:true , Public:true }, "Timer", $.Double);

    $.Property({Static:true , Public:true }, "GetKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Property({Static:true , Public:true }, "GetMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Property({Static:true , Public:true }, "GetPreviousMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Property({Static:true , Public:true }, "GetPreviousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Property({Static:true , Public:true }, "GetEscapeKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetUseKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetEnterKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetAttackKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetShockwaveKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetShieldKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetJumpKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetUpKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetDownKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetLeftKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetRightKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetPotionKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetRollKey", $.Boolean);

    $.Property({Static:true , Public:true }, "GetEscapeKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetUseKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetEnterKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetAttackKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetShockwaveKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetShieldKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetJumpKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetUpKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetDownKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetLeftKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetRightKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetPotionKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetRollKeyDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetLeftMouseDown", $.Boolean);

    $.Property({Static:true , Public:true }, "GetEscapeKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetUseKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetEnterKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetAttackKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetShockwaveKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetShieldKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetJumpKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetUpKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetDownKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetLeftKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetRightKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetPotionKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "GetRollKeyUp", $.Boolean);

    $.Property({Static:true , Public:true }, "RandomBool", $.Boolean);

    $.Property({Static:true , Public:true }, "RandomFloat", $.Single);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Irbis.Irbis+AttackEventDelegate */ 

JSIL.MakeDelegate("Irbis.Irbis+AttackEventDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Boolean"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Attacking")]));

/* delegate Irbis.Irbis+ShockwaveEventDelegate */ 

JSIL.MakeDelegate("Irbis.Irbis+ShockwaveEventDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Boolean"), [
      $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm02.TypeRef("System.Int32"), 
      $asm02.TypeRef("System.Int32"), $asm02.TypeRef("System.Single")
    ]));

/* struct Level */ 

(function Level$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Single))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Irbis.VendingType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Irbis.VendingType))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm02.System.Int32))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.System.Exception)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.IO.FileStream)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.IO.FileMode)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.System.Runtime.Serialization.SerializationException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.System.Console)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.System.IO.Stream)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Single), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Point), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.IO.FileStream, [$asm02.System.String, $asm02.System.IO.FileMode]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Runtime.Serialization.Formatters.Binary.BinaryFormatter, null))) ();
  };


  function Level__ctor (construct) {
    this.squareSpawnPointsX = $S00().Construct();
    this.squareSpawnPointsY = $S00().Construct();
    this.squareTextures = $S01().Construct();
    this.backgroundSquaresX = $S00().Construct();
    this.backgroundSquaresY = $S00().Construct();
    this.backgroundTextures = $S01().Construct();
    this.backgroundSquareDepths = $S02().Construct();
    this.squareDepths = $S02().Construct();
    this.levelName = $T04().Empty;
    this.enemySpawnPointsX = $S02().Construct();
    this.enemySpawnPointsY = $S02().Construct();
    this.isOnslaught = false;
    this.playerSpawnX = 0;
    this.playerSpawnY = 0;
    this.bossSpawnX = 0;
    this.bossSpawnY = 0;
    this.vendingMachineTextures = JSIL.Array.New($T04(), 0);
    this.vendingMachineLocationsX = JSIL.Array.New($T05(), 0);
    this.vendingMachineLocationsY = JSIL.Array.New($T05(), 0);
    this.vendingMachineTypes = JSIL.Array.New($T06(), 0);
    this.bossName = $T04().Empty;
  }; 

  function Level_AssignLocalVariables (level) {
    this.squareSpawnPointsX = level.squareSpawnPointsX;
    this.squareSpawnPointsY = level.squareSpawnPointsY;
    this.squareTextures = level.squareTextures;
    this.squareDepths = level.squareDepths;
    $T07().WriteLine(JSIL.ConcatString("                  squares: ", $T05().$Box((this.squareTextures).get_Count())));
    this.backgroundSquaresX = level.backgroundSquaresX;
    this.backgroundSquaresY = level.backgroundSquaresY;
    this.backgroundTextures = level.backgroundTextures;
    this.backgroundSquareDepths = level.backgroundSquareDepths;
    $T07().WriteLine(JSIL.ConcatString("       background squares: ", $T05().$Box((this.backgroundSquareDepths).get_Count())));
    this.levelName = level.levelName;
    $T07().WriteLine(JSIL.ConcatString("               level name: ", this.levelName));
    this.enemySpawnPointsX = level.enemySpawnPointsX;
    this.enemySpawnPointsY = level.enemySpawnPointsY;
    $T07().WriteLine(JSIL.ConcatString("       enemy spawn points: ", $T05().$Box((this.get_EnemySpawnPoints()).get_Count())));
    this.isOnslaught = level.isOnslaught;
    $T07().WriteLine(JSIL.ConcatString("              isOnslaught: ", $T00().$Box(this.isOnslaught)));
    this.playerSpawnX = +level.playerSpawnX;
    this.playerSpawnY = +level.playerSpawnY;
    $T07().WriteLine(JSIL.ConcatString("             player spawn: ", this.get_PlayerSpawn()));
    this.bossSpawnX = +level.bossSpawnX;
    this.bossSpawnY = +level.bossSpawnY;
    this.bossName = level.bossName;
    $T07().WriteLine(JSIL.ConcatString("               boss spawn: ", this.get_BossSpawn()));
    this.vendingMachineTextures = level.vendingMachineTextures;
    this.vendingMachineTypes = level.vendingMachineTypes;
    this.vendingMachineLocationsX = level.vendingMachineLocationsX;
    this.vendingMachineLocationsY = level.vendingMachineLocationsY;
    if (!(((this.vendingMachineTextures.length | 0) !== (this.vendingMachineTypes.length | 0)) || 
        ((this.vendingMachineTextures.length | 0) !== (this.vendingMachineLocationsX.length | 0)) || ((this.vendingMachineTextures.length | 0) !== (this.vendingMachineLocationsY.length | 0)))) {
      $T07().WriteLine(JSIL.ConcatString("         vending Machines: ", $T05().$Box(this.vendingMachineTextures.length)));
    } else {
      $T07().WriteLine("error loading vending machines, improper array lengths");
    }
  }; 

  function Level_get_BackgroundSquares () {
    var bgSquares = $S03().Construct();

    for (var i = 0; i < ((this.backgroundSquaresX).get_Count() | 0); i = ((i + 1) | 0)) {
      bgSquares.Add($S04().Construct((this.backgroundSquaresX).get_Item(i), (this.backgroundSquaresY).get_Item(i)));
    }
    return bgSquares;
  }; 

  function Level_get_BossSpawn () {
    return $S05().Construct(this.bossSpawnX, this.bossSpawnY);
  }; 

  function Level_get_EnemySpawnPoints () {
    var enemySpawns = $S06().Construct();

    for (var i = 0; i < ((this.enemySpawnPointsX).get_Count() | 0); i = ((i + 1) | 0)) {
      enemySpawns.Add($S05().Construct((this.enemySpawnPointsX).get_Item(i), (this.enemySpawnPointsY).get_Item(i)));
    }
    return enemySpawns;
  }; 

  function Level_get_PlayerSpawn () {
    return $S05().Construct(this.playerSpawnX, this.playerSpawnY);
  }; 

  function Level_get_SquareSpawnPoints () {
    var squareSpawns = $S03().Construct();

    for (var i = 0; i < ((this.squareSpawnPointsX).get_Count() | 0); i = ((i + 1) | 0)) {
      squareSpawns.Add($S04().Construct((this.squareSpawnPointsX).get_Item(i), (this.squareSpawnPointsY).get_Item(i)));
    }
    return squareSpawns;
  }; 

  function Level_get_VendingMachineLocations () {
    var vendingMachines = JSIL.Array.New($T0D(), this.vendingMachineLocationsX.length);

    for (var i = 0; i < (this.vendingMachineLocationsX.length | 0); i = ((i + 1) | 0)) {
      vendingMachines[i] = $S04().Construct(this.vendingMachineLocationsX[i], this.vendingMachineLocationsY[i]);
    }
    return vendingMachines;
  }; 

  function Level_get_VendingMachineTextures () {
    return this.vendingMachineTextures;
  }; 

  function Level_get_VendingMachineTypes () {
    return this.vendingMachineTypes;
  }; 

  function Level_Load (filename, $exception) {
    var thisLevel = new $thisType(true);
    $T07().WriteLine(("loading " + filename + "..."));
    var stream = $S07().Construct(filename, $T12().Open);
    try {
      try {
        var formatter = $S08().Construct();
        thisLevel = $thisType.$Cast(formatter.Deserialize(stream)).MemberwiseClone();
        this.AssignLocalVariables(thisLevel);
        $T07().WriteLine("load successful.");
      } catch ($exception) {
        if ($T14().$Is($exception)) {
          var e = $exception;
          $T15().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T07().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T07().WriteLine();
      stream.Close();
    }
  }; 

  function Level_Save (filename, $exception) {
    $T07().WriteLine(("saving " + filename + "..."));
    var formatter = $S08().Construct();
    var stream = $S07().Construct(filename, $T12().Create);
    try {
      try {
        formatter.Serialize(stream, this);
        $T07().WriteLine("save successful.");
      } catch ($exception) {
        if ($T14().$Is($exception)) {
          var e = $exception;
          $T15().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T07().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T07().WriteLine();
      stream.Close();
    }
  }; 

  function Level_set_BackgroundSquares (value) {
    var $temp00;
    (this.backgroundSquaresX).Clear();
    (this.backgroundSquaresY).Clear();

    for (var a$0 = value._items, i$0 = 0, l$0 = (value._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var P = a$0[i$0].MemberwiseClone();
      (this.backgroundSquaresX).Add(P.X);
      (this.backgroundSquaresY).Add(P.Y);
    }
  }; 

  function Level_set_BossSpawn (value) {
    this.bossSpawnX = +value.X;
    this.bossSpawnY = +value.Y;
  }; 

  function Level_set_EnemySpawnPoints (value) {
    var $temp00;
    (this.enemySpawnPointsX).Clear();
    (this.enemySpawnPointsY).Clear();

    for (var a$0 = value._items, i$0 = 0, l$0 = (value._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var v2 = a$0[i$0].MemberwiseClone();
      (this.enemySpawnPointsX).Add(v2.X);
      (this.enemySpawnPointsY).Add(v2.Y);
    }
  }; 

  function Level_set_PlayerSpawn (value) {
    this.playerSpawnX = +value.X;
    this.playerSpawnY = +value.Y;
  }; 

  function Level_set_SquareSpawnPoints (value) {
    var $temp00;
    (this.squareSpawnPointsX).Clear();
    (this.squareSpawnPointsY).Clear();

    for (var a$0 = value._items, i$0 = 0, l$0 = (value._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var P = a$0[i$0].MemberwiseClone();
      (this.squareSpawnPointsX).Add(P.X);
      (this.squareSpawnPointsY).Add(P.Y);
    }
  }; 

  function Level_set_VendingMachineLocations (value) {
    this.vendingMachineLocationsX = JSIL.Array.New($T05(), value.length);
    this.vendingMachineLocationsY = JSIL.Array.New($T05(), value.length);

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      this.vendingMachineLocationsX[i] = (value[i].X | 0);
      this.vendingMachineLocationsY[i] = (value[i].Y | 0);
    }
  }; 

  function Level_set_VendingMachineTextures (value) {
    this.vendingMachineTextures = value;
  }; 

  function Level_set_VendingMachineTypes (value) {
    this.vendingMachineTypes = value;
  }; 

  function Level_toString () {
    var returnstring = (JSIL.ConcatString("squares: ", $T05().$Box((this.squareTextures).get_Count())));

    for (var i = 0; i < ((this.squareTextures).get_Count() | 0); i = ((i + 1) | 0)) {
      var obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T17(), [obj, "\nsquare[", $T05().$Box(i), "] tex: ", (this.squareTextures).get_Item(i)])));
      obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T17(), [obj, "\nsquare[", $T05().$Box(i), "] pos: {X:", $T05().$Box((this.squareSpawnPointsX).get_Item(i)), " Y:", $T05().$Box((this.squareSpawnPointsY).get_Item(i)), "}"])));
    }
    returnstring = (JSIL.ConcatString(returnstring, "\nEnemy Spawn Points: ", $T05().$Box((this.get_EnemySpawnPoints()).get_Count())));

    for (i = 0; i < ((this.get_EnemySpawnPoints()).get_Count() | 0); i = ((i + 1) | 0)) {
      obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T17(), [obj, "\nenemy[", $T05().$Box(i), "] pos: ", (this.get_EnemySpawnPoints()).get_Item(i)])));
    }
    returnstring = (JSIL.ConcatString(returnstring, "\nVending Machine Locations: ", $T05().$Box(this.get_VendingMachineLocations().length)));

    for (i = 0; i < (this.get_VendingMachineLocations().length | 0); i = ((i + 1) | 0)) {
      obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T17(), [obj, "\nvendingMachineLocations[", $T05().$Box(i), "]: ", this.get_VendingMachineLocations()[i]])));
    }
    returnstring = (JSIL.ConcatString(returnstring, "\nVending Machine Textures: ", $T05().$Box(this.get_VendingMachineTextures().length)));

    for (i = 0; i < (this.get_VendingMachineTextures().length | 0); i = ((i + 1) | 0)) {
      obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T17(), [obj, "\nVendingMachineTextures[", $T05().$Box(i), "]: ", this.get_VendingMachineTextures()[i]])));
    }
    returnstring = (JSIL.ConcatString(returnstring, "\nVending Machine Types: ", $T05().$Box(this.get_VendingMachineTypes().length)));

    for (i = 0; i < (this.get_VendingMachineTypes().length | 0); i = ((i + 1) | 0)) {
      obj = returnstring;
      returnstring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T17(), [obj, "\nVendingMachineTypes[", $T05().$Box(i), "]: ", this.get_VendingMachineTypes()[i]])));
    }
    return returnstring;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Level", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      Level__ctor
    );

    $.Method({Static:false, Public:false}, "AssignLocalVariables", 
      JSIL.MethodSignature.Action($.Type), 
      Level_AssignLocalVariables
    );

    $.Method({Static:false, Public:true }, "get_BackgroundSquares", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      Level_get_BackgroundSquares
    );

    $.Method({Static:false, Public:true }, "get_BossSpawn", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Level_get_BossSpawn
    );

    $.Method({Static:false, Public:true }, "get_EnemySpawnPoints", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      Level_get_EnemySpawnPoints
    );

    $.Method({Static:false, Public:true }, "get_PlayerSpawn", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Level_get_PlayerSpawn
    );

    $.Method({Static:false, Public:true }, "get_SquareSpawnPoints", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      Level_get_SquareSpawnPoints
    );

    $.Method({Static:false, Public:true }, "get_VendingMachineLocations", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      Level_get_VendingMachineLocations
    );

    $.Method({Static:false, Public:true }, "get_VendingMachineTextures", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      Level_get_VendingMachineTextures
    );

    $.Method({Static:false, Public:true }, "get_VendingMachineTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Irbis.VendingType")])), 
      Level_get_VendingMachineTypes
    );

    $.Method({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.String), 
      Level_Load
    );

    $.Method({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($.String), 
      Level_Save
    );

    $.Method({Static:false, Public:true }, "set_BackgroundSquares", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      Level_set_BackgroundSquares
    );

    $.Method({Static:false, Public:true }, "set_BossSpawn", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Level_set_BossSpawn
    );

    $.Method({Static:false, Public:true }, "set_EnemySpawnPoints", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      Level_set_EnemySpawnPoints
    );

    $.Method({Static:false, Public:true }, "set_PlayerSpawn", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Level_set_PlayerSpawn
    );

    $.Method({Static:false, Public:true }, "set_SquareSpawnPoints", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      Level_set_SquareSpawnPoints
    );

    $.Method({Static:false, Public:true }, "set_VendingMachineLocations", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")])), 
      Level_set_VendingMachineLocations
    );

    $.Method({Static:false, Public:true }, "set_VendingMachineTextures", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      Level_set_VendingMachineTextures
    );

    $.Method({Static:false, Public:true }, "set_VendingMachineTypes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Irbis.VendingType")])), 
      Level_set_VendingMachineTypes
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Level_toString
    );

    $.Field({Static:false, Public:false}, "squareSpawnPointsX", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "squareSpawnPointsY", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "squareTextures", $asm02.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:true }, "squareDepths", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:false}, "backgroundSquaresX", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "backgroundSquaresY", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "backgroundTextures", $asm02.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:true }, "backgroundSquareDepths", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:true }, "levelName", $.String);

    $.Field({Static:false, Public:false}, "enemySpawnPointsX", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:false}, "enemySpawnPointsY", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:true }, "isOnslaught", $.Boolean);

    $.Field({Static:false, Public:false}, "playerSpawnX", $.Single);

    $.Field({Static:false, Public:false}, "playerSpawnY", $.Single);

    $.Field({Static:false, Public:false}, "bossSpawnX", $.Single);

    $.Field({Static:false, Public:false}, "bossSpawnY", $.Single);

    $.Field({Static:false, Public:false}, "vendingMachineTextures", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "vendingMachineTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Irbis.VendingType")]));

    $.Field({Static:false, Public:false}, "vendingMachineLocationsX", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "vendingMachineLocationsY", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "bossName", $.String);

    $.Property({Static:false, Public:true }, "VendingMachineLocations", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Property({Static:false, Public:true }, "VendingMachineTextures", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "VendingMachineTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Irbis.VendingType")]));

    $.Property({Static:false, Public:true }, "SquareSpawnPoints", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Property({Static:false, Public:true }, "BackgroundSquares", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]));

    $.Property({Static:false, Public:true }, "PlayerSpawn", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "BossSpawn", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "EnemySpawnPoints", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Menu */ 

(function Menu$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Button))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Button)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Print))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Square))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Square)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Font)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.UIElementSlider))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.UIElementSlider)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.System.Console)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.System.IO.Directory)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.PlayerSettings)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.System.Char)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadButtons)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Media.MediaPlayer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Button, [
        $asm01.Microsoft.Xna.Framework.Rectangle, $asm00.Irbis.Direction, 
        $asm02.System.String, $asm02.System.String, 
        $asm01.Microsoft.Xna.Framework.Color, $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, 
        $asm00.Font, $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Boolean, $asm02.System.Boolean, 
        $asm02.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.String")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Button, [
        $asm01.Microsoft.Xna.Framework.Rectangle, $asm00.Irbis.Direction, 
        $asm00.Irbis.Side, $asm02.System.String, 
        $asm02.System.String, $asm01.Microsoft.Xna.Framework.Color, 
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm02.System.Boolean, $asm02.System.Single
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Square, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Color, 
        $asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point, 
        $asm02.System.Single, $asm02.System.Boolean, 
        $asm02.System.Boolean, $asm02.System.Nullable$b1.Of($asm02.System.Single)
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.Irbis.Irbis, $asm02.System.String]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Input.GamePadState, [$asm01.Microsoft.Xna.Framework.PlayerIndex]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")))) ();
  };


  function Menu__ctor () {
    this.exists = true;
  }; 

  function Menu_Create (scene) {
    var tempLP = new ($T01())(), tempDP = new ($T01())();
    switch (scene) {
      case 0: 
        (tempLP = tempLP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempLP, 0, Math.imul(5, Math.imul(50, $T02().textScale))));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "New game", ">NEW GAME", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(0).bounds.Y | 0) + ($T02().buttonList.get_Item(0).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Continue", ">CONTINUE", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(1).bounds.Y | 0) + ($T02().buttonList.get_Item(1).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Options", ">OPTIONS", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(2).bounds.Y | 0) + ($T02().buttonList.get_Item(2).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Exit();", ">EXIT();", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        break;

      case 1: 
        (tempLP = tempLP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempLP, 0, Math.imul(6, Math.imul(50, $T02().textScale))));
        if (!$T02().resetRequired) {
          var op11t = $S02().Construct(((($T02().resolution.X | 0) - 32) | 0), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().resolution.X | 0) - 32) | 0), ((($T02().resolution.Y | 0) - 26) | 0)), $T06().Right, 0.5);
          $S04().CallVirtual("Update", null, op11t, "For even more options and details, view the playerSettings.ini file");
          $T02().printList.Add(op11t);
        }
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Controls", ">Controls", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(0).bounds.Y | 0) + ($T02().buttonList.get_Item(0).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Camera", ">Camera", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(1).bounds.Y | 0) + ($T02().buttonList.get_Item(1).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Video", ">Video", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(2).bounds.Y | 0) + ($T02().buttonList.get_Item(2).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Audio", ">Audio", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(((+($T02().resolution.X) * 0.625) | 0), ((($T02().buttonList.get_Item(3).bounds.Y | 0) + ($T02().buttonList.get_Item(3).bounds.Height | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(50, $T02().textScale)), $T06().Left, "Misc", ">Misc", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bBack", "<\x1bBack", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        break;

      case 2: 
        (tempLP = tempLP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempLP, 0, Math.imul(6, Math.imul(50, $T02().textScale))));
        (tempDP = tempDP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempDP, Math.imul(80, $T02().textScale), Math.imul(24, $T02().textScale)));
        $T02().listenForNewKeybind = false;
        $T02().buttonList.Add($S00().Construct($S01().Construct((((+($T02().resolution.X) * 0.75) - +(40 * ($T02().textScale | 0))) | 0), ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) + 20) | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().attackKey.toString(), (">" + $T02().attackKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(0).bounds.Y | 0) + ($T02().buttonList.get_Item(0).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().jumpKey.toString(), (">" + $T02().jumpKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(1).bounds.Y | 0) + ($T02().buttonList.get_Item(1).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().rollKey.toString(), (">" + $T02().rollKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(2).bounds.Y | 0) + ($T02().buttonList.get_Item(2).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().potionKey.toString(), (">" + $T02().potionKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(3).bounds.Y | 0) + ($T02().buttonList.get_Item(3).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().shieldKey.toString(), (">" + $T02().shieldKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(4).bounds.Y | 0) + ($T02().buttonList.get_Item(4).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().shockwaveKey.toString(), (">" + $T02().shockwaveKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(5).bounds.Y | 0) + ($T02().buttonList.get_Item(5).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().upKey.toString(), (">" + $T02().upKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(6).bounds.Y | 0) + ($T02().buttonList.get_Item(6).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().downKey.toString(), (">" + $T02().downKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(7).bounds.Y | 0) + ($T02().buttonList.get_Item(7).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().leftKey.toString(), (">" + $T02().leftKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(8).bounds.Y | 0) + ($T02().buttonList.get_Item(8).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().rightKey.toString(), (">" + $T02().rightKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(0).bounds.X, ((($T02().buttonList.get_Item(9).bounds.Y | 0) + ($T02().buttonList.get_Item(9).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().useKey.toString(), (">" + $T02().useKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct((((+($T02().resolution.X) * 0.75) + +(40 * ($T02().textScale | 0))) | 0), $T02().buttonList.get_Item(0).bounds.Y, tempDP.X, tempDP.Y), $T06().Forward, $T02().altAttackKey.toString(), (">" + $T02().altAttackKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(0).bounds.Y | 0) + ($T02().buttonList.get_Item(0).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altJumpKey.toString(), (">" + $T02().altJumpKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(1).bounds.Y | 0) + ($T02().buttonList.get_Item(1).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altRollKey.toString(), (">" + $T02().altRollKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(2).bounds.Y | 0) + ($T02().buttonList.get_Item(2).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altPotionKey.toString(), (">" + $T02().altPotionKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(3).bounds.Y | 0) + ($T02().buttonList.get_Item(3).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altShieldKey.toString(), (">" + $T02().altShieldKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(4).bounds.Y | 0) + ($T02().buttonList.get_Item(4).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altShockwaveKey.toString(), (">" + $T02().altShockwaveKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(5).bounds.Y | 0) + ($T02().buttonList.get_Item(5).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altUpKey.toString(), (">" + $T02().altUpKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(6).bounds.Y | 0) + ($T02().buttonList.get_Item(6).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altDownKey.toString(), (">" + $T02().altDownKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(7).bounds.Y | 0) + ($T02().buttonList.get_Item(7).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altLeftKey.toString(), (">" + $T02().altLeftKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(8).bounds.Y | 0) + ($T02().buttonList.get_Item(8).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altRightKey.toString(), (">" + $T02().altRightKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct($T02().buttonList.get_Item(11).bounds.X, ((($T02().buttonList.get_Item(9).bounds.Y | 0) + ($T02().buttonList.get_Item(9).bounds.Height | 0)) | 0), tempDP.X, tempDP.Y), $T06().Forward, $T02().altUseKey.toString(), (">" + $T02().altUseKey.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bSave", "<\x1bSave", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(((($T02().buttonList.get_Item(22).bounds.X | 0) + ($T02().buttonList.get_Item(22).bounds.Width | 0)) | 0), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(100, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bCancel", "<\x1bCancel", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));

        for (var i = 1; i < 11; i = ((i + 1) | 0)) {
          if (i < 11) {
            $T02().sList.Add($S06().Construct($T02().nullTex, $S07().Construct(223, 227, 236), $S03().Construct(((($T02().buttonList.get_Item(i).bounds.X | 0) - Math.imul(5, $T02().textScale)) | 0), $T02().buttonList.get_Item(i).bounds.Y), $S03().Construct(Math.imul(200, $T02().textScale), $T02().textScale), $T02().screenScale, false, true, 0.1));
            $T02().sList.Add($S06().Construct($T02().nullTex, $S07().Construct(27, 28, 32), $S03().Construct(((((($T02().buttonList.get_Item(i).bounds.X | 0) - Math.imul(5, $T02().textScale)) | 0) + ($T02().textScale | 0)) | 0), ((($T02().buttonList.get_Item(i).bounds.Y | 0) + ($T02().textScale | 0)) | 0)), $S03().Construct(Math.imul(200, $T02().textScale), $T02().textScale), $T02().screenScale, false, true, 0.09));
          }
        }
        var op201t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(($T02().buttonList.get_Item(0).bounds).get_Center().X, ((($T02().buttonList.get_Item(0).bounds.Y | 0) - ($T02().buttonList.get_Item(0).bounds.Height | 0)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op201t, "Key");
        $T02().printList.Add(op201t);
        var op202t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(($T02().buttonList.get_Item(11).bounds).get_Center().X, ((($T02().buttonList.get_Item(11).bounds.Y | 0) - ($T02().buttonList.get_Item(11).bounds.Height | 0)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op202t, "Alt.");
        $T02().printList.Add(op202t);
        var op21t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(0).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(0).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op21t, "Attack");
        $T02().printList.Add(op21t);
        var op22t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(1).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(1).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op22t, "Jump");
        $T02().printList.Add(op22t);
        var op23t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(2).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(2).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op23t, "Roll");
        $T02().printList.Add(op23t);
        var op24t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(3).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(3).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op24t, "Potion");
        $T02().printList.Add(op24t);
        var op25t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(4).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(4).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op25t, "Shield");
        $T02().printList.Add(op25t);
        var op26t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(5).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(5).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op26t, "Shockwave");
        $T02().printList.Add(op26t);
        var op27t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(6).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(6).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op27t, "Up");
        $T02().printList.Add(op27t);
        var op28t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(7).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(7).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op28t, "Down");
        $T02().printList.Add(op28t);
        var op29t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(8).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(8).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op29t, "Left");
        $T02().printList.Add(op29t);
        var op210t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(9).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(9).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op210t, "Right");
        $T02().printList.Add(op210t);
        var op211t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(((($T02().buttonList.get_Item(10).bounds.X | 0) - Math.imul(10, $T02().textScale)) | 0), ((($T02().buttonList.get_Item(10).bounds.Y | 0) + Math.imul($T02().font.charHeight, $T02().textScale)) | 0)), $T06().Right, 0.5);
        $S04().CallVirtual("Update", null, op211t, "Use");
        $T02().printList.Add(op211t);
        break;

      case 3: 
        var BB = $S02().Construct($T02().boundingBox.Width, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value.MemberwiseClone(), false, $S03().Construct($T02().boundingBox.get_Center().X, $T02().boundingBox.get_Center().Y), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, BB, "Bounding Box");
        $T02().printList.Add(BB);
        $T02().listenForNewKeybind = false;
        (tempLP = tempLP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempLP, ((+($T02().resolution.X) * 0.75) | 0), Math.imul(6, Math.imul(50, $T02().textScale))));
        var op31t = $S02().Construct(Math.imul(200, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op31t, "Bounding Box (anchor)");
        $T02().printList.Add(op31t);
        var op31at = $S02().Construct(Math.imul(12, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct((((tempLP.X | 0) - Math.imul(60, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(22, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op31at, "X:");
        $T02().printList.Add(op31at);
        var op31bt = $S02().Construct(Math.imul(12, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, (((tempLP.Y | 0) + Math.imul(22, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op31bt, "Y:");
        $T02().printList.Add(op31bt);
        var op32t = $S02().Construct(Math.imul(200, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(50, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op32t, "Bounding Box (Width/Height)");
        $T02().printList.Add(op32t);
        var op32at = $S02().Construct(Math.imul(12, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct((((tempLP.X | 0) - Math.imul(60, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(72, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op32at, "X:");
        $T02().printList.Add(op32at);
        var op32bt = $S02().Construct(Math.imul(12, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(72, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op32bt, "Y:");
        $T02().printList.Add(op32bt);
        var op33t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(100, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op33t, "Camera Lerp");
        $T02().printList.Add(op33t);
        var op34t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(150, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op34t, "Lerp Speed");
        $T02().printList.Add(op34t);
        var op35t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(200, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op35t, "Camera Shake");
        $T02().printList.Add(op35t);
        var arg_22E9_0 = $T02().buttonList;
        var arg_22E4_0 = $S01().Construct((((tempLP.X | 0) - Math.imul(30, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(15, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale));
        var num = ($T02().boundingBox.get_Center().X | 0);
        var arg_22E4_2 = ((num).toString());
        num = ($T02().boundingBox.get_Center().X | 0);
        arg_22E9_0.Add($S00().Construct(arg_22E4_0.MemberwiseClone(), $T06().Forward, arg_22E4_2, (">" + (num).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        var arg_23A3_0 = $T02().buttonList;
        var arg_239E_0 = $S01().Construct((((tempLP.X | 0) + Math.imul(30, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(15, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale));
        num = ($T02().boundingBox.get_Center().Y | 0);
        var arg_239E_2 = ((num).toString());
        num = ($T02().boundingBox.get_Center().Y | 0);
        arg_23A3_0.Add($S00().Construct(arg_239E_0.MemberwiseClone(), $T06().Forward, arg_239E_2, (">" + (num).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) - Math.imul(30, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(65, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, ($T02().boundingBox.Width).toString(), (">" + ($T02().boundingBox.Width).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) + Math.imul(30, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(65, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, ($T02().boundingBox.Height).toString(), (">" + ($T02().boundingBox.Height).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(115, $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, $T02().cameraLerpSetting.toString(), (">" + $T02().cameraLerpSetting.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(165, $T02().textScale)) | 0), Math.imul(25, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, ($T02().cameraLerpSpeed).toString(), (">" + ($T02().cameraLerpSpeed).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(215, $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, $T02().cameraShakeSetting.toString(), (">" + $T02().cameraShakeSetting.toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bSave", "<\x1bSave", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(((($T02().buttonList.get_Item(7).bounds.X | 0) + ($T02().buttonList.get_Item(7).bounds.Width | 0)) | 0), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(100, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bCancel", "<\x1bCancel", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        break;

      case 4: 
        $T02().listenForNewKeybind = false;
        (tempLP = tempLP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempLP, ((+($T02().resolution.X) * 0.75) | 0), Math.imul(5, Math.imul(50, $T02().textScale))));
        var arg_282D_0 = Math.imul(100, $T02().textScale);
        var arg_282D_1 = $T02().font.MemberwiseClone();
        var arg_282D_2 = $T07().Color$White$value;
        var arg_2822_0 = (tempLP.X | 0);
        var arg_2822_1 = ((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0);
        var arg_2821_0 = ($T02().textScale | 0);
        var op41t = $S02().Construct(arg_282D_0, arg_282D_1.MemberwiseClone(), arg_282D_2.MemberwiseClone(), false, $S03().Construct(arg_2822_0, arg_2822_1), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op41t, "Display");
        $T02().printList.Add(op41t);
        var op42t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(50, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op42t, "Window Scale");
        $T02().printList.Add(op42t);
        var op42at = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct((((tempLP.X | 0) - Math.imul(25, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(72, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op42at, "x");
        $T02().printList.Add(op42at);
        var op43t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(100, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op43t, "Resolution");
        $T02().printList.Add(op43t);
        var op43at = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct((((tempLP.X | 0) - Math.imul(60, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(122, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op43at, "X:");
        $T02().printList.Add(op43at);
        var op43bt = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(122, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op43bt, "Y:");
        $T02().printList.Add(op43bt);
        var op46t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(150, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op46t, "vSync");
        $T02().printList.Add(op46t);
        $T02().sList.Add($S06().Construct($T02().nullTex, $S07().Construct(223, 227, 236), $S03().Construct(((($T02().resolution.X | 0) - (((tempLP.X | 0) + 83) | 0)) | 0), ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) - 73) | 0)) | 0)), $S03().Construct(65, 1), $T02().screenScale, false, true, 0.5));
        $T02().sList.Add($S06().Construct($T02().nullTex, $S07().Construct(27, 28, 32), $S03().Construct(((($T02().resolution.X | 0) - (((tempLP.X | 0) + 82) | 0)) | 0), ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) - 74) | 0)) | 0)), $S03().Construct(65, 1), $T02().screenScale, false, true, 0.5));
        $T02().sList.Add($S06().Construct($T02().nullTex, $S07().Construct(223, 227, 236), $S03().Construct(((($T02().resolution.X | 0) - (((tempLP.X | 0) - 25) | 0)) | 0), ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) - 73) | 0)) | 0)), $S03().Construct(69, 1), $T02().screenScale, false, true, 0.5));
        $T02().sList.Add($S06().Construct($T02().nullTex, $S07().Construct(27, 28, 32), $S03().Construct(((($T02().resolution.X | 0) - (((tempLP.X | 0) - 26) | 0)) | 0), ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) - 74) | 0)) | 0)), $S03().Construct(69, 1), $T02().screenScale, false, true, 0.5));
        if ($T02().graphics.get_IsFullScreen()) {
          $T02().sList.get_Item(0).drawTex = $T02().sList.get_Item(1).drawTex = false;
          $T02().sList.get_Item(2).drawTex = $T02().sList.get_Item(3).drawTex = true;
        } else {
          $T02().sList.get_Item(0).drawTex = $T02().sList.get_Item(1).drawTex = true;
          $T02().sList.get_Item(2).drawTex = $T02().sList.get_Item(3).drawTex = false;
        }
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) - Math.imul(60, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(15, $T02().textScale)) | 0), Math.imul(80, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, "windowed", ">windowed<", $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) + Math.imul(60, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(15, $T02().textScale)) | 0), Math.imul(80, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, "fullscreen", ">fullscreen<", $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, false, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(65, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, "", ">  <", $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) - Math.imul(30, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(115, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, ($T02().tempResolution.X).toString(), (">" + ($T02().tempResolution.X).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) + Math.imul(30, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(115, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, ($T02().tempResolution.Y).toString(), (">" + ($T02().tempResolution.Y).toString() + "<"), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, true, 0.5));
        $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(165, $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(20, $T02().textScale)), $T06().Forward, $T02().graphics.get_SynchronizeWithVerticalRetrace().toString(), (">" + $T02().graphics.get_SynchronizeWithVerticalRetrace().toString() + "<"), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, true, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bSave", "<\x1bSave", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(((($T02().buttonList.get_Item(6).bounds.X | 0) + ($T02().buttonList.get_Item(6).bounds.Width | 0)) | 0), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(100, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bCancel", "<\x1bCancel", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        break;

      case 5: 
        $T02().sliderPressed = -1;
        $T02().listenForNewKeybind = false;
        (tempLP = tempLP.MemberwiseClone(), 
          $T01().prototype._ctor.call(tempLP, ((+($T02().resolution.X) * 0.75) | 0), Math.imul(4, Math.imul(50, $T02().textScale))));
        var op52t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op52t, "Master");
        $T02().printList.Add(op52t);
        var op53t = $S02().Construct(Math.imul(100, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(50, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op53t, "Music");
        $T02().printList.Add(op53t);
        var op54t = $S02().Construct(Math.imul(200, $T02().textScale), $T02().font.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), false, $S03().Construct(tempLP.X, ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(100, $T02().textScale)) | 0)), $T06().Forward, 0.5);
        $S04().CallVirtual("Update", null, op54t, "Sound Effects");
        $T02().printList.Add(op54t);
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) - Math.imul(170, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(15, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, $T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null), JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null)), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, true, 0.5));
        $T02().sliderList.Add(new ($T14())($T06().Left, $S01().Construct((((tempLP.X | 0) - Math.imul(115, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(14, $T02().textScale)) | 0), Math.imul(250, $T02().textScale), Math.imul(20, $T02().textScale)), $T01().get_Zero().MemberwiseClone(), 100, $S07().Construct(166, 30, 30), $T07().Color$White$value.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), $T07().Color$Red$value.MemberwiseClone(), $T02().nullTex, null, null, true, null, false, 0.9, 0.899, 0.901, 0.902));
        ($T02().sliderList.get_Item(0)).UpdateValue($T02().masterAudioLevel);
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) - Math.imul(170, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(65, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, $T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null), JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null)), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, true, 0.5));
        $T02().sliderList.Add(new ($T14())($T06().Left, $S01().Construct((((tempLP.X | 0) - Math.imul(115, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(64, $T02().textScale)) | 0), Math.imul(250, $T02().textScale), Math.imul(20, $T02().textScale)), $T01().get_Zero().MemberwiseClone(), 100, $S07().Construct(255, 170, 0), $T07().Color$White$value.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), $T07().Color$Red$value.MemberwiseClone(), $T02().nullTex, null, null, true, null, false, 0.9, 0.899, 0.901, 0.902));
        ($T02().sliderList.get_Item(1)).UpdateValue($T02().musicLevel);
        $T02().buttonList.Add($S00().Construct($S01().Construct((((tempLP.X | 0) - Math.imul(170, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(115, $T02().textScale)) | 0), Math.imul(40, $T02().textScale), Math.imul(16, $T02().textScale)), $T06().Forward, $T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null), JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null)), $S07().Construct(223, 227, 236), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, true, 0.5));
        $T02().sliderList.Add(new ($T14())($T06().Left, $S01().Construct((((tempLP.X | 0) - Math.imul(115, $T02().textScale)) | 0), ((((($T02().resolution.Y | 0) - (tempLP.Y | 0)) | 0) + Math.imul(114, $T02().textScale)) | 0), Math.imul(250, $T02().textScale), Math.imul(20, $T02().textScale)), $T01().get_Zero().MemberwiseClone(), 100, $S07().Construct(0, 234, 255), $T07().Color$White$value.MemberwiseClone(), $T07().Color$White$value.MemberwiseClone(), $T07().Color$Red$value.MemberwiseClone(), $T02().nullTex, null, null, true, null, false, 0.9, 0.899, 0.901, 0.902));
        ($T02().sliderList.get_Item(2)).UpdateValue($T02().soundEffectsLevel);
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bSave", "<\x1bSave", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(((($T02().buttonList.get_Item(3).bounds.X | 0) + ($T02().buttonList.get_Item(3).bounds.Width | 0)) | 0), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(100, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bCancel", "<\x1bCancel", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        break;

      case 6: 
        $T15().WriteLine("Coming soon!\nHit escape to go back");
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bSave", "<\x1bSave", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().buttonList.Add($S05().Construct($S01().Construct(((($T02().buttonList.get_Item(0).bounds.X | 0) + ($T02().buttonList.get_Item(0).bounds.Width | 0)) | 0), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(100, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bCancel", "<\x1bCancel", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        break;

      case 7: 
        $T02().buttonList.Add($S05().Construct($S01().Construct(Math.imul($T02().font.charHeight, $T02().textScale), ((($T02().resolution.Y | 0) - Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)) | 0), Math.imul(50, $T02().textScale), Math.imul(Math.imul($T02().font.charHeight, 2), $T02().textScale)), $T06().Left, $T0A().Left, "\x1bBack", "<\x1bBack", $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
        $T02().levelList = $T16().GetFiles(".\\levels");
        $T02().levelListCounter = 0;
        var tempLevelList = $S08().Construct();
        var levelList = $T02().levelList;

        for (var k = 0; k < (levelList.length | 0); k = ((k + 1) | 0)) {
          var s = levelList[k];
          tempLevelList.Add(s);
        }

        for (i = 0; i < (tempLevelList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (!(!(System.String.StartsWith(tempLevelList.get_Item(i), ".\\levels\\")) || !(System.String.EndsWith(tempLevelList.get_Item(i), ".lvl")))) {
            tempLevelList.set_Item(i, tempLevelList.get_Item(i).substr(9));
            tempLevelList.set_Item(i, tempLevelList.get_Item(i).substr(0, (((tempLevelList.get_Item(i).length | 0) - 4) | 0)));
          } else {
            tempLevelList.RemoveAt(i);
          }
        }
        $T02().levelList = $T17().prototype.ToArray.call(tempLevelList);
        $T02().WriteLine(JSIL.ConcatString("level files formatted properly:", $T00().$Box($T02().levelList.length)));
        if (($T02().levelList.length | 0) > ($T02().maxButtonsOnScreen | 0)) {
          (tempLP = tempLP.MemberwiseClone(), 
            $T01().prototype._ctor.call(tempLP, ((+($T02().resolution.X) * 0.625) | 0), Math.imul(((($T02().maxButtonsOnScreen | 0) + 1) | 0), Math.imul(25, $T02().textScale))));
          $T02().isMenuScrollable = true;
        } else if (($T02().levelList.length | 0) < 10) {
          (tempLP = tempLP.MemberwiseClone(), 
            $T01().prototype._ctor.call(tempLP, ((+($T02().resolution.X) * 0.625) | 0), Math.imul(11, Math.imul(25, $T02().textScale))));
          $T02().isMenuScrollable = false;
        } else {
          (tempLP = tempLP.MemberwiseClone(), 
            $T01().prototype._ctor.call(tempLP, ((+($T02().resolution.X) * 0.625) | 0), Math.imul(((($T02().levelList.length | 0) + 1) | 0), Math.imul(25, $T02().textScale))));
          $T02().isMenuScrollable = false;
        }

        for (i = 0; i < ($T02().levelList.length | 0); i = ((i + 1) | 0)) {
          var nextLevel = $T02().levelList[i];
          var nextLevelLocation = i;

          for (var j = i; j < ($T02().levelList.length | 0); j = ((j + 1) | 0)) {
            if (!(nextLevel == $T02().levelList[j])) {
              if ($T02().IsDefaultLevelFormat($T02().levelList[j])) {
                var tempPoint = $T02().GetLevelChapterAndMap($T02().levelList[j]);
                if ($T02().IsDefaultLevelFormat(nextLevel)) {
                  if (!((($T02().GetLevelChapterAndMap($T02().levelList[j]).X | 0) >= ($T02().GetLevelChapterAndMap(nextLevel).X | 0)) || (($T02().GetLevelChapterAndMap($T02().levelList[j]).Y | 0) >= ($T02().GetLevelChapterAndMap(nextLevel).Y | 0)))) {
                    nextLevel = $T02().levelList[j];
                    nextLevelLocation = j;
                  } else if (!((($T02().GetLevelChapterAndMap($T02().levelList[j]).X | 0) !== ($T02().GetLevelChapterAndMap(nextLevel).X | 0)) || (($T02().GetLevelChapterAndMap($T02().levelList[j]).Y | 0) !== ($T02().GetLevelChapterAndMap(nextLevel).Y | 0)))) {
                    if (0 >= ($T0C().Compare($T02().levelList[j], nextLevel) | 0)) {
                      nextLevel = $T02().levelList[j];
                      nextLevelLocation = j;
                    }
                  }
                } else {
                  nextLevel = $T02().levelList[j];
                  nextLevelLocation = j;
                }
              } else if (!$T02().IsDefaultLevelFormat(nextLevel)) {
                if (0 >= ($T0C().Compare($T02().levelList[j], nextLevel) | 0)) {
                  nextLevel = $T02().levelList[j];
                  nextLevelLocation = j;
                }
              }
            }
          }
          if (nextLevelLocation >= 0) {
            $T02().levelList[nextLevelLocation] = $T02().levelList[i];
            $T02().levelList[i] = nextLevel;
          }
        }
        levelList = $T02().levelList;

        for (k = 0; k < (levelList.length | 0); k = ((k + 1) | 0)) {
          s = levelList[k];
          $T15().WriteLine(s);
        }
        if (($T02().levelList.length | 0) > ($T02().maxButtonsOnScreen | 0)) {

          for (i = 0; i < ($T02().maxButtonsOnScreen | 0); i = ((i + 1) | 0)) {
            $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) - Math.imul(Math.imul(25, i), $T02().textScale)) | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(25, $T02().textScale)), $T06().Forward, $T02().levelList[i], JSIL.ConcatString(">", $T02().levelList[i]), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
          }
        } else {

          for (i = 0; i < ($T02().levelList.length | 0); i = ((i + 1) | 0)) {
            $T02().buttonList.Add($S00().Construct($S01().Construct(tempLP.X, ((($T02().resolution.Y | 0) - (((tempLP.Y | 0) - Math.imul(Math.imul(25, i), $T02().textScale)) | 0)) | 0), ((+(+($T02().resolution.X) / 4)) | 0), Math.imul(25, $T02().textScale)), $T06().Forward, $T02().levelList[i], JSIL.ConcatString(">", $T02().levelList[i]), $T07().Color$Magenta$value.MemberwiseClone(), $T02().nullTex, $T02().font.MemberwiseClone(), $T07().Color$Magenta$value, false, false, 0.5));
          }
        }
        break;

      default: 
        $T15().WriteLine(JSIL.ConcatString("Error. Scene ID ", $T00().$Box(scene), " is not in LoadMenu list"));
        break;

    }
  }; 

  function Menu_get_Exists () {
    return this.exists;
  }; 

  function Menu_Update (game) {
    var floatResult = new JSIL.BoxedVariable(0);
    switch ($T02().scene) {
      case 0: 

        for (var i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                $T02().get_GetMouseState(), 
                $T02().get_GetPreviousMouseState()
              ))) {
            $T02().menuSelection = i;
          }
        }

        for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (i === ($T02().menuSelection | 0)) {
            $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
          } else {
            ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
          }
        }
        if (!(!$T02().get_GetDownKeyDown() && !$T02().get_GetRightKeyDown())) {
          $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
        }
        if (!(!$T02().get_GetUpKeyDown() && !$T02().get_GetLeftKeyDown())) {
          $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
        }
        if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
          $T02().menuSelection = 0;
        }
        if (($T02().menuSelection | 0) < 0) {
          $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
        }
        if (!(!$T02().Use() && !$T02().buttonList.get_Item($T02().menuSelection).Pressed(
              $T02().get_GetMouseState(), 
              $T02().get_GetPreviousMouseState()
            ))) {
          switch ($T02().menuSelection) {
            case 0: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    New Game");
              game.LoadMenu(7, 1, false);
              break;

            case 1: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Continue");
              $T02().sceneIsMenu = false;
              if ($T02().jamie === null) {
                $T02().levelEditor = true;
                var result = true;
                return result;
              }
              if (($T02().levelLoaded | 0) > 0) {
                if (($T02().debug | 0) <= 0) {
                  game.set_IsMouseVisible(false);
                }
              } else {
                $T02().WriteLine(JSIL.ConcatString("    loading ", $T02().savefile.lastPlayedLevel));
                game.LoadLevel($T02().savefile.lastPlayedLevel, true);
              }
              break;

            case 2: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Options");
              game.LoadMenu(1, 0, false);
              break;

            case 3: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Quit();");
              game.Quit();
              break;

            default: 
              $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
              break;

          }
        }
        if ($T02().get_GetEscapeKeyDown()) {
          if (($T02().levelLoaded | 0) > 0) {
            $T02().buttonList.Clear();
            $T02().WriteLine("    Continue");
            $T02().sceneIsMenu = false;
            if (($T02().debug | 0) <= 0) {
              game.set_IsMouseVisible(false);
            }
          } else {
            game.Quit();
          }
        }
        break;

      case 1: 

        for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                $T02().get_GetMouseState(), 
                $T02().get_GetPreviousMouseState()
              ))) {
            $T02().menuSelection = i;
          }
        }

        for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (i === ($T02().menuSelection | 0)) {
            $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
          } else {
            ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
          }
        }
        if (!(!$T02().get_GetDownKeyDown() && !$T02().get_GetRightKeyDown())) {
          $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
        }
        if (!(!$T02().get_GetUpKeyDown() && !$T02().get_GetLeftKeyDown())) {
          $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
        }
        if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
          $T02().menuSelection = 0;
        }
        if (($T02().menuSelection | 0) < 0) {
          $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
        }
        if (!(!$T02().buttonList.get_Item($T02().menuSelection).Pressed(
              $T02().get_GetMouseState(), 
              $T02().get_GetPreviousMouseState()
            ) && !$T02().Use())) {
          switch ($T02().menuSelection) {
            case 0: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Controls");
              game.LoadMenu(2, 0, false);
              break;

            case 1: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Camera");
              game.LoadMenu(3, 0, false);
              break;

            case 2: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Video");
              game.LoadMenu(4, 0, false);
              break;

            case 3: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Audio");
              game.LoadMenu(5, 0, false);
              break;

            case 4: 
              $T02().buttonList.Clear();
              $T02().WriteLine("    Misc");
              game.LoadMenu(6, 0, false);
              break;

            case 5: 
              game.LoadMenu(0, 2, false);
              break;

            default: 
              $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
              break;

          }
        }
        if ($T02().get_GetEscapeKeyDown()) {
          game.LoadMenu(0, 2, false);
        }
        break;

      case 2: 
        if ($T02().listenForNewKeybind) {
          $T02().buttonList.get_Item($T02().menuSelection).Update("_");
          if ($T02().get_GetEscapeKeyDown()) {
            $T02().listenForNewKeybind = false;
          } else if (!((($T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys().length | 0) <= 0) || (($T02().get_GetPreviousKeyboardState().MemberwiseClone().GetPressedKeys().length | 0) > 0))) {
            switch ($T02().menuSelection) {
              case 0: 
                $T02().attackKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 1: 
                $T02().jumpKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 2: 
                $T02().rollKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 3: 
                $T02().potionKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 4: 
                $T02().shieldKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 5: 
                $T02().shockwaveKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 6: 
                $T02().upKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 7: 
                $T02().downKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 8: 
                $T02().leftKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 9: 
                $T02().rightKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 10: 
                $T02().useKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 11: 
                $T02().altAttackKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 12: 
                $T02().altJumpKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 13: 
                $T02().altRollKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 14: 
                $T02().altPotionKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 15: 
                $T02().altShieldKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 16: 
                $T02().altShockwaveKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 17: 
                $T02().altUpKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 18: 
                $T02().altDownKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 19: 
                $T02().altLeftKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 20: 
                $T02().altRightKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              case 21: 
                $T02().altUseKey = $T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0];
                break;

              default: 
                $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                break;

            }
            $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T02().get_GetKeyboardState().MemberwiseClone().GetPressedKeys()[0]).toString();
            $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + $T02().buttonList.get_Item($T02().menuSelection).originalStatement + "<"));
            $T02().listenForNewKeybind = false;
          }
        } else {

          for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
            if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                  $T02().get_GetMouseState(), 
                  $T02().get_GetPreviousMouseState()
                ))) {
              $T02().menuSelection = i;
            }
            if (i === ($T02().menuSelection | 0)) {
              $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
            } else {
              ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
            }
          }
          if ($T02().get_GetDownKeyDown()) {
            if (($T02().menuSelection | 0) === 10) {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 11) | 0);
            }
            $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
          }
          if ($T02().get_GetRightKeyDown()) {
            if (($T02().menuSelection | 0) < 11) {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 11) | 0);
            } else if (($T02().menuSelection | 0) < 22) {
              $T02().menuSelection = ((($T02().menuSelection | 0) - 11) | 0);
            } else {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
            }
          }
          if ($T02().get_GetUpKeyDown()) {
            $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
          }
          if ($T02().get_GetLeftKeyDown()) {
            if (($T02().menuSelection | 0) < 11) {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 11) | 0);
            } else if (($T02().menuSelection | 0) < 22) {
              $T02().menuSelection = ((($T02().menuSelection | 0) - 11) | 0);
            } else {
              $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
            }
          }
          if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
            $T02().menuSelection = 0;
          }
          if (($T02().menuSelection | 0) < 0) {
            $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
          }
          if (!(!$T02().buttonList.get_Item($T02().menuSelection).Pressed(
                $T02().get_GetMouseState(), 
                $T02().get_GetPreviousMouseState()
              ) && !$T02().Use())) {
            switch ($T02().menuSelection) {
              case 22: 
                $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
                game.LoadMenu(1, 0, false);
                break;

              case 23: 
                game.LoadMenu(1, 0, false);
                break;

              default: 
                $T02().listenForNewKeybind = true;
                break;

            }
          }
          if ($T02().get_GetEscapeKeyDown()) {
            $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
            game.LoadMenu(1, 0, false);
          }
        }
        break;

      case 3: 
        if ($T02().listenForNewKeybind) {
          if ($T02().get_GetEscapeKeyDown()) {
            $T02().listenForNewKeybind = false;
            $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).originalStatement, true);
          }
          if (($T02().menuSelection | 0) === 5) {

            while (($T02().textInputBuffer.length | 0) > 0) {
              if (!(!$T1E().IsDigit($T02().textInputBuffer[0]) || (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) >= 8))) {
                $T02().buttonList.get_Item($T02().menuSelection).Update(($T02().textInputBuffer[0]).toString(), false);
              }
              $T02().textInputBuffer = ($T02().textInputBuffer.substr(1));
            }
          } else {

            while (($T02().textInputBuffer.length | 0) > 0) {
              if (!(!$T1E().IsDigit($T02().textInputBuffer[0]) || (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) >= 8))) {
                $T02().buttonList.get_Item($T02().menuSelection).Update(($T02().textInputBuffer[0]).toString(), false);
              }
              $T02().textInputBuffer = ($T02().textInputBuffer.substr(1));
            }
          }
          if (!((($S0A().CallStatic($T21(), "GetState", null, $T22().One).GamePadState$Buttons$value).get_Start() !== $T23().Pressed) && !$T02().get_GetEnterKeyDown())) {

            var $label0 = 0;
          $labelgroup0: 
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */ 
                  $T02().acceptTextInput = false;
                  $T02().listenForNewKeybind = false;
                  switch ($T02().menuSelection) {
                    case 0: 
                      if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                        $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                      } else {
                        $T02().boundingBox.X = ((($T00().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) | 0) - ((($T02().boundingBox.Width | 0) / 2) | 0)) | 0);
                        var arg_F62_0 = $T02().buttonList.get_Item($T02().menuSelection);
                        var num = ($T02().boundingBox.get_Center().X | 0);
                        arg_F62_0.originalStatement = ((num).toString());
                        var arg_F9D_0 = $T02().buttonList.get_Item($T02().menuSelection);
                        num = ($T02().boundingBox.get_Center().X | 0);
                        arg_F9D_0.highlightStatement = ((">" + (num).toString() + "<"));
                      }
                      break $labelgroup0;

                    case 1: 
                      if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                        $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                      } else {
                        $T02().boundingBox.Y = ((($T00().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) | 0) - ((($T02().boundingBox.Height | 0) / 2) | 0)) | 0);
                        var arg_1051_0 = $T02().buttonList.get_Item($T02().menuSelection);
                        num = ($T02().boundingBox.get_Center().Y | 0);
                        arg_1051_0.originalStatement = ((num).toString());
                        var arg_108C_0 = $T02().buttonList.get_Item($T02().menuSelection);
                        num = ($T02().boundingBox.get_Center().Y | 0);
                        arg_108C_0.highlightStatement = ((">" + (num).toString() + "<"));
                      }
                      break $labelgroup0;

                    case 2: 
                      if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                        $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                      } else {
                        var oldCenter = $T02().boundingBox.get_Center().MemberwiseClone();
                        $T02().boundingBox.Width = ($T00().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) | 0);
                        $T02().boundingBox.X = (((oldCenter.X | 0) - ((($T02().boundingBox.Width | 0) / 2) | 0)) | 0);
                        $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (($T02().boundingBox.Width).toString());
                        $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + ($T02().boundingBox.Width).toString() + "<"));
                      }
                      break $labelgroup0;

                    case 3: 
                      if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                        $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                      } else {
                        oldCenter = $T02().boundingBox.get_Center().MemberwiseClone();
                        $T02().boundingBox.Height = ($T00().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) | 0);
                        $T02().boundingBox.Y = (((oldCenter.Y | 0) - ((($T02().boundingBox.Height | 0) / 2) | 0)) | 0);
                        $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (($T02().boundingBox.Height).toString());
                        $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + ($T02().boundingBox.Height).toString() + "<"));
                      }
                      break $labelgroup0;

                    case 5: 
                      if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                        $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                      } else {
                        $T02().cameraLerpSpeed = +$T10().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement);
                        $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (($T02().cameraLerpSpeed).toString());
                        $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + ($T02().cameraLerpSpeed).toString() + "<"));
                      }
                      break $labelgroup0;

                  }
                  $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                  break $labelgroup0;

              }
            }
            /* Original label IL_1365 */ 
            $S0B().CallVirtual("Update", null, $T02().printList.get_Item(0), $S03().Construct($T02().boundingBox.get_Center().X, $T02().boundingBox.get_Center().Y));
          }
        } else {

          for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
            if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                  $T02().get_GetMouseState(), 
                  $T02().get_GetPreviousMouseState()
                ))) {
              $T02().menuSelection = i;
            }
          }

          for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
            if (i === ($T02().menuSelection | 0)) {
              $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
            } else {
              ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
            }
          }
          if ($T02().get_GetDownKeyDown()) {
            if (!((($T02().menuSelection | 0) < 0) || (($T02().menuSelection | 0) > 2))) {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 2) | 0);
            } else {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
            }
          }
          if ($T02().get_GetRightKeyDown()) {
            $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
          }
          if ($T02().get_GetUpKeyDown()) {
            if (!((($T02().menuSelection | 0) < 1) || (($T02().menuSelection | 0) > 3))) {
              $T02().menuSelection = ((($T02().menuSelection | 0) - 2) | 0);
            } else {
              $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
            }
          }
          if ($T02().get_GetLeftKeyDown()) {
            $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
          }
          if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
            $T02().menuSelection = 0;
          }
          if (($T02().menuSelection | 0) < 0) {
            $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
          }
          if (!(!$T02().buttonList.get_Item($T02().menuSelection).Pressed(
                $T02().get_GetMouseState(), 
                $T02().get_GetPreviousMouseState()
              ) && !$T02().Use())) {
            switch ($T02().menuSelection) {
              case 0: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 1: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 2: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 3: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 4: 
                $T02().cameraLerpSetting = !$T02().cameraLerpSetting;
                $T02().buttonList.get_Item($T02().menuSelection).originalStatement = $T02().cameraLerpSetting.toString();
                $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + $T02().cameraLerpSetting.toString() + "<"));
                break;

              case 5: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 6: 
                $T02().cameraShakeSetting = !$T02().cameraShakeSetting;
                $T02().buttonList.get_Item($T02().menuSelection).originalStatement = $T02().cameraShakeSetting.toString();
                $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + $T02().cameraShakeSetting.toString() + "<"));
                break;

              case 7: 
                $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
                game.LoadMenu(1, 1, false);
                break;

              case 8: 
                game.LoadMenu(1, 1, false);
                break;

              default: 
                $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                break;

            }
          }
          if ($T02().get_GetEscapeKeyDown()) {
            $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
            game.LoadMenu(1, 1, false);
          }
        }
        break;

      case 4: 
        if ($T02().listenForNewKeybind) {
          if ($T02().get_GetEscapeKeyDown()) {
            $T02().listenForNewKeybind = false;
            $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).originalStatement, true);
          }
          if (($T02().menuSelection | 0) === 2) {

            while (($T02().textInputBuffer.length | 0) > 0) {
              if (!((!$T1E().IsDigit($T02().textInputBuffer[0]) && 
                    !($T02().textInputBuffer[0]).Equals(".")) || (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) >= 8))) {
                $T02().buttonList.get_Item($T02().menuSelection).Update(($T02().textInputBuffer[0]).toString(), false);
              }
              $T02().textInputBuffer = ($T02().textInputBuffer.substr(1));
            }
          } else {

            while (($T02().textInputBuffer.length | 0) > 0) {
              if (!(!$T1E().IsDigit($T02().textInputBuffer[0]) || (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) >= 8))) {
                $T02().buttonList.get_Item($T02().menuSelection).Update(($T02().textInputBuffer[0]).toString(), false);
              }
              $T02().textInputBuffer = ($T02().textInputBuffer.substr(1));
            }
          }
          if (!((($S0A().CallStatic($T21(), "GetState", null, $T22().One).GamePadState$Buttons$value).get_Start() !== $T23().Pressed) && !$T02().get_GetEnterKeyDown())) {
            $T02().acceptTextInput = false;
            $T02().listenForNewKeybind = false;
            switch ($T02().menuSelection) {
              case 2: 
                if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                  $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                } else {
                  if (+$T10().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) > 100) {
                    $T02().SetScreenScale(100);
                  } else {
                    $T02().SetScreenScale($T10().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement));
                  }
                  $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (($T02().screenScale).toString());
                  $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + ($T02().screenScale).toString() + "<"));
                  if (!$T02().resetRequired) {
                    $T02().graphics.set_PreferredBackBufferHeight($T02().resolution.Y);
                    $T02().graphics.set_PreferredBackBufferWidth($T02().resolution.X);
                    $T02().graphics.ApplyChanges();
                  }
                }
                break;

              case 3: 
                if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                  $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                } else {
                  $T02().tempResolution.X = ($T00().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) | 0);
                  $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (($T02().tempResolution.X).toString());
                  $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + ($T02().tempResolution.X).toString() + "<"));
                  $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
                  $T02().resetRequired = true;
                  game.LoadMenu(4, 8, false);
                }
                break;

              case 4: 
                if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                  $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                } else {
                  $T02().tempResolution.Y = ($T00().Parse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement) | 0);
                  $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (($T02().tempResolution.Y).toString());
                  $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + ($T02().tempResolution.Y).toString() + "<"));
                  $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
                  $T02().resetRequired = true;
                  game.LoadMenu(4, 9, false);
                }
                break;

              default: 
                $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                break;

            }
          }
        } else {
          if ($T02().get_GetEscapeKeyDown()) {
            $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
            game.LoadMenu(1, 2, false);
          }

          for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
            if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                  $T02().get_GetMouseState(), 
                  $T02().get_GetPreviousMouseState()
                ))) {
              $T02().menuSelection = i;
            }
          }

          for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
            if (i === ($T02().menuSelection | 0)) {
              $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
            } else {
              ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
            }
          }
          if ($T02().get_GetDownKeyDown()) {
            if (!((($T02().menuSelection | 0) < 0) || (($T02().menuSelection | 0) > 1))) {
              $T02().menuSelection = 2;
            } else if (($T02().menuSelection | 0) === 2) {
              $T02().menuSelection = 3;
            } else if (!((($T02().menuSelection | 0) < 3) || (($T02().menuSelection | 0) > 4))) {
              $T02().menuSelection = 5;
            } else {
              $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
            }
          }
          if ($T02().get_GetRightKeyDown()) {
            $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
          }
          if ($T02().get_GetUpKeyDown()) {
            if (!((($T02().menuSelection | 0) < 0) || (($T02().menuSelection | 0) > 1))) {
              $T02().menuSelection = 7;
            } else if (($T02().menuSelection | 0) === 2) {
              $T02().menuSelection = 0;
            } else if (!((($T02().menuSelection | 0) < 3) || (($T02().menuSelection | 0) > 4))) {
              $T02().menuSelection = 2;
            } else if (($T02().menuSelection | 0) === 5) {
              $T02().menuSelection = 3;
            } else {
              $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
            }
          }
          if ($T02().get_GetLeftKeyDown()) {
            $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
          }
          if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
            $T02().menuSelection = 0;
          }
          if (($T02().menuSelection | 0) < 0) {
            $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
          }
          if (!(!$T02().buttonList.get_Item($T02().menuSelection).Pressed(
                $T02().get_GetMouseState(), 
                $T02().get_GetPreviousMouseState()
              ) && !$T02().Use())) {
            switch ($T02().menuSelection) {
              case 0: 
                $T02().graphics.set_IsFullScreen(false);
                $T02().buttonList.get_Item(0).buttonStatement = $T02().buttonList.get_Item(0).highlightStatement;
                $T02().buttonList.get_Item(1).buttonStatement = $T02().buttonList.get_Item(1).originalStatement;
                $T02().sList.get_Item(0).drawTex = $T02().sList.get_Item(1).drawTex = true;
                $T02().sList.get_Item(2).drawTex = $T02().sList.get_Item(3).drawTex = false;
                break;

              case 1: 
                $T02().buttonList.get_Item(0).buttonStatement = $T02().buttonList.get_Item(0).originalStatement;
                $T02().buttonList.get_Item(1).buttonStatement = $T02().buttonList.get_Item(1).highlightStatement;
                $T02().sList.get_Item(0).drawTex = $T02().sList.get_Item(1).drawTex = false;
                $T02().sList.get_Item(2).drawTex = $T02().sList.get_Item(3).drawTex = true;
                break;

              case 2: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 3: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 4: 
                $T02().acceptTextInput = true;
                $T02().listenForNewKeybind = true;
                $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                break;

              case 5: 
                $T02().graphics.set_SynchronizeWithVerticalRetrace(game.IsFixedTimeStep = !game.get_IsFixedTimeStep());
                $T02().buttonList.get_Item($T02().menuSelection).originalStatement = (game.get_IsFixedTimeStep()).toString();
                $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = ((">" + (game.get_IsFixedTimeStep()).toString() + "<"));
                break;

              case 6: 
                $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
                game.LoadMenu(1, 2, false);
                break;

              case 7: 
                game.LoadMenu(1, 2, false);
                break;

              default: 
                $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                break;

            }
          }
        }
        break;

      case 5: 
        if ($T02().listenForNewKeybind) {
          if ($T02().get_GetEscapeKeyDown()) {
            $T02().listenForNewKeybind = false;
            $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).originalStatement, true);
          }
          if (($T02().menuSelection | 0) === 5) {

            while (($T02().textInputBuffer.length | 0) > 0) {
              if (!((!$T1E().IsDigit($T02().textInputBuffer[0]) && 
                    !($T02().textInputBuffer[0]).Equals(".")) || (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) >= 8))) {
                $T02().buttonList.get_Item($T02().menuSelection).Update(($T02().textInputBuffer[0]).toString(), false);
              }
              $T02().textInputBuffer = ($T02().textInputBuffer.substr(1));
            }
          } else {

            while (($T02().textInputBuffer.length | 0) > 0) {
              if (!((!$T1E().IsDigit($T02().textInputBuffer[0]) && 
                    !($T02().textInputBuffer[0]).Equals(".")) || (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) >= 8))) {
                $T02().buttonList.get_Item($T02().menuSelection).Update(($T02().textInputBuffer[0]).toString(), false);
              }
              $T02().textInputBuffer = ($T02().textInputBuffer.substr(1));
            }
          }
          if (!((($S0A().CallStatic($T21(), "GetState", null, $T22().One).GamePadState$Buttons$value).get_Start() !== $T23().Pressed) && !$T02().get_GetEnterKeyDown())) {
            $T02().acceptTextInput = false;
            $T02().listenForNewKeybind = false;
            switch ($T02().menuSelection) {
              case 0: 
                if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                  $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                } else {
                  if ($T10().TryParse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement, /* ref */ floatResult)) {
                    if (+floatResult.get() > 100) {
                      $T02().masterAudioLevel = 100;
                    } else {
                      $T02().masterAudioLevel = +floatResult.get();
                    }
                  } else {
                    $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                  }
                  $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null));
                  $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null)));
                  $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().masterAudioLevel);
                  $T24().set_Volume(+(((+$T02().masterAudioLevel * +$T02().musicLevel) / 10000)));
                }
                break;

              case 1: 
                if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                  $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                } else {
                  if ($T10().TryParse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement, /* ref */ floatResult)) {
                    if (+floatResult.get() > 100) {
                      $T02().musicLevel = 100;
                    } else {
                      $T02().musicLevel = +floatResult.get();
                    }
                  } else {
                    $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                  }
                  $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null));
                  $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null)));
                  $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().musicLevel);
                  $T24().set_Volume(+(((+$T02().masterAudioLevel * +$T02().musicLevel) / 10000)));
                }
                break;

              case 2: 
                if (($T02().buttonList.get_Item($T02().menuSelection).buttonStatement.length | 0) <= 0) {
                  $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                } else {
                  if ($T10().TryParse($T02().buttonList.get_Item($T02().menuSelection).buttonStatement, /* ref */ floatResult)) {
                    if (+floatResult.get() > 100) {
                      $T02().soundEffectsLevel = 100;
                    } else {
                      $T02().soundEffectsLevel = +floatResult.get();
                    }
                  } else {
                    $T02().buttonList.get_Item($T02().menuSelection).buttonStatement = $T02().buttonList.get_Item($T02().menuSelection).originalStatement;
                  }
                  $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null));
                  $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null)));
                  $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().soundEffectsLevel);
                }
                break;

              default: 
                $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                break;

            }
          }
        } else {
          if ($T02().get_GetEscapeKeyDown()) {
            $T02().sliderList.Clear();
            $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
            game.LoadMenu(1, 3, false);
          }
          if (($T02().sliderPressed | 0) < 0) {

            for (i = 0; i < ($T02().sliderList.get_Count() | 0); i = ((i + 1) | 0)) {
              if (!(!($T02().sliderList.get_Item(i)).Pressed($T02().get_GetMouseState()) || ($T02().get_GetPreviousMouseState().get_LeftButton() === $T23().Pressed))) {
                $T02().sliderPressed = i;
              }
            }
          } else if ($T02().get_GetMouseState().get_LeftButton() !== $T23().Pressed) {
            $T02().sliderPressed = -1;
          }
          switch ($T02().sliderPressed) {
            case 0: 
              $T02().masterAudioLevel = +((+(($T02().get_GetMouseState().get_X() | 0) - ($T02().sliderList.get_Item($T02().menuSelection).bounds.get_Left() | 0)) / +($T02().sliderList.get_Item($T02().menuSelection).bounds.Width))) * 100;
              if (+$T02().masterAudioLevel >= 100) {
                $T02().masterAudioLevel = 100;
              } else if (+$T02().masterAudioLevel <= 0) {
                $T02().masterAudioLevel = 0;
              }
              $T02().buttonList.get_Item($T02().sliderPressed).originalStatement = $T02().buttonList.get_Item($T02().sliderPressed).buttonStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0.0", null));
              $T02().buttonList.get_Item($T02().sliderPressed).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null)));
              $T02().buttonList.get_Item($T02().sliderPressed).Update($T02().buttonList.get_Item($T02().sliderPressed).buttonStatement);
              $T02().sliderList.get_Item($T02().sliderPressed).UpdateValue($T02().masterAudioLevel);
              $T24().set_Volume(+(((+$T02().masterAudioLevel * +$T02().musicLevel) / 10000)));
              break;

            case 1: 
              $T02().musicLevel = +((+(($T02().get_GetMouseState().get_X() | 0) - ($T02().sliderList.get_Item($T02().menuSelection).bounds.get_Left() | 0)) / +($T02().sliderList.get_Item($T02().menuSelection).bounds.Width))) * 100;
              if (+$T02().musicLevel >= 100) {
                $T02().musicLevel = 100;
              } else if (+$T02().musicLevel <= 0) {
                $T02().musicLevel = 0;
              }
              $T02().buttonList.get_Item($T02().sliderPressed).originalStatement = $T02().buttonList.get_Item($T02().sliderPressed).buttonStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0.0", null));
              $T02().buttonList.get_Item($T02().sliderPressed).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0.0", null)));
              $T02().buttonList.get_Item($T02().sliderPressed).Update($T02().buttonList.get_Item($T02().sliderPressed).buttonStatement);
              $T02().sliderList.get_Item($T02().sliderPressed).UpdateValue($T02().musicLevel);
              $T24().set_Volume(+(((+$T02().masterAudioLevel * +$T02().musicLevel) / 10000)));
              break;

            case 2: 
              $T02().soundEffectsLevel = +((+(($T02().get_GetMouseState().get_X() | 0) - ($T02().sliderList.get_Item($T02().menuSelection).bounds.get_Left() | 0)) / +($T02().sliderList.get_Item($T02().menuSelection).bounds.Width))) * 100;
              if (+$T02().soundEffectsLevel >= 100) {
                $T02().soundEffectsLevel = 100;
              } else if (+$T02().soundEffectsLevel <= 0) {
                $T02().soundEffectsLevel = 0;
              }
              $T02().buttonList.get_Item($T02().sliderPressed).originalStatement = $T02().buttonList.get_Item($T02().sliderPressed).buttonStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0.0", null));
              $T02().buttonList.get_Item($T02().sliderPressed).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0.0", null)));
              $T02().buttonList.get_Item($T02().sliderPressed).Update($T02().buttonList.get_Item($T02().sliderPressed).buttonStatement);
              $T02().sliderList.get_Item($T02().sliderPressed).UpdateValue($T02().soundEffectsLevel);
              break;

            default: 

              for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
                if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                      $T02().get_GetMouseState(), 
                      $T02().get_GetPreviousMouseState()
                    ))) {
                  $T02().menuSelection = i;
                }
                if (i < ($T02().sliderList.get_Count() | 0)) {
                  if (!(!($T02().sliderList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                        $T02().get_GetMouseState(), 
                        $T02().get_GetPreviousMouseState()
                      ))) {
                    $T02().menuSelection = i;
                  }
                }
              }
              if ($T02().get_GetDownKeyDown()) {
                $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
              }
              if ($T02().get_GetRightKeyDown()) {
                switch ($T02().menuSelection) {
                  case 0: 
                    $T02().masterAudioLevel = +$T02().masterAudioLevel + 5;
                    if (+$T02().masterAudioLevel >= 100) {
                      $T02().masterAudioLevel = 100;
                    }
                    $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null));
                    $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null)));
                    $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().masterAudioLevel);
                    break;

                  case 1: 
                    $T02().musicLevel = +$T02().musicLevel + 5;
                    if (+$T02().musicLevel >= 100) {
                      $T02().musicLevel = 100;
                    }
                    $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null));
                    $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null)));
                    $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().musicLevel);
                    break;

                  case 2: 
                    $T02().soundEffectsLevel = +$T02().soundEffectsLevel + 5;
                    if (+$T02().soundEffectsLevel >= 100) {
                      $T02().soundEffectsLevel = 100;
                    }
                    $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null));
                    $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null)));
                    $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().soundEffectsLevel);
                    break;

                }
                $T24().set_Volume(+(((+$T02().masterAudioLevel * +$T02().musicLevel) / 10000)));
              }
              if ($T02().get_GetUpKeyDown()) {
                $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
              }
              if ($T02().get_GetLeftKeyDown()) {
                switch ($T02().menuSelection) {
                  case 0: 
                    $T02().masterAudioLevel = +$T02().masterAudioLevel - 5;
                    if (+$T02().masterAudioLevel <= 0) {
                      $T02().masterAudioLevel = 0;
                    }
                    $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null));
                    $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().masterAudioLevel, "0", null)));
                    $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().masterAudioLevel);
                    break;

                  case 1: 
                    $T02().musicLevel = +$T02().musicLevel - 5;
                    if (+$T02().musicLevel <= 0) {
                      $T02().musicLevel = 0;
                    }
                    $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null));
                    $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().musicLevel, "0", null)));
                    $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().musicLevel);
                    break;

                  case 2: 
                    $T02().soundEffectsLevel = +$T02().soundEffectsLevel - 5;
                    if (+$T02().soundEffectsLevel <= 0) {
                      $T02().soundEffectsLevel = 0;
                    }
                    $T02().buttonList.get_Item($T02().menuSelection).originalStatement = ($T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null));
                    $T02().buttonList.get_Item($T02().menuSelection).highlightStatement = (JSIL.ConcatString(">", $T10().__Type__.__PublicInterface__.$ToString($T02().soundEffectsLevel, "0", null)));
                    $T02().sliderList.get_Item($T02().menuSelection).UpdateValue($T02().soundEffectsLevel);
                    break;

                }
                $T24().set_Volume(+(((+$T02().masterAudioLevel * +$T02().musicLevel) / 10000)));
              }
              if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
                $T02().menuSelection = 0;
              }
              if (($T02().menuSelection | 0) < 0) {
                $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
              }

              for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
                if (i === ($T02().menuSelection | 0)) {
                  $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
                } else {
                  ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
                }
              }
              if (!(!$T02().buttonList.get_Item($T02().menuSelection).Pressed(
                    $T02().get_GetMouseState(), 
                    $T02().get_GetPreviousMouseState()
                  ) && !$T02().Use())) {
                switch ($T02().menuSelection) {
                  case 0: 
                    $T02().acceptTextInput = true;
                    $T02().listenForNewKeybind = true;
                    $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                    break;

                  case 1: 
                    $T02().acceptTextInput = true;
                    $T02().listenForNewKeybind = true;
                    $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                    break;

                  case 2: 
                    $T02().acceptTextInput = true;
                    $T02().listenForNewKeybind = true;
                    $T02().buttonList.get_Item($T02().menuSelection).Update("", true);
                    break;

                  case 3: 
                    $T02().sliderList.Clear();
                    $S09().CallStatic($T1D(), "Save", null, game, ".\\content\\playerSettings.ini");
                    game.LoadMenu(1, 3, false);
                    break;

                  case 4: 
                    $T02().sliderList.Clear();
                    game.LoadMenu(1, 3, false);
                    break;

                  default: 
                    $T02().WriteLine(JSIL.ConcatString("Error. Menu item ", $T00().$Box($T02().menuSelection), " does not exist."));
                    break;

                }
              }
              break;

          }
        }
        break;

      case 6: 
        if ($T02().get_GetEscapeKeyDown()) {
          game.LoadMenu(1, 4, false);
        }
        break;

      case 7: 

        for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (!(!($T02().buttonList.get_Item(i)).Contains($T02().get_GetMouseState()) || !$T19().op_Inequality(
                $T02().get_GetMouseState(), 
                $T02().get_GetPreviousMouseState()
              ))) {
            $T02().menuSelection = i;
          }
        }

        for (i = 0; i < ($T02().buttonList.get_Count() | 0); i = ((i + 1) | 0)) {
          if (i === ($T02().menuSelection | 0)) {
            $T02().buttonList.get_Item($T02().menuSelection).Update($T02().buttonList.get_Item($T02().menuSelection).highlightStatement.toUpperCase());
          } else {
            ($T02().buttonList.get_Item(i)).Update($T02().buttonList.get_Item(i).originalStatement);
          }
        }
        if (!((($T02().menuSelection | 0) >= ($T02().levelList.length | 0)) || !$T02().get_GetDownKeyDown())) {
          $T02().menuSelection = ((($T02().menuSelection | 0) + 1) | 0);
        }
        if (!((($T02().menuSelection | 0) <= 1) || !$T02().get_GetUpKeyDown())) {
          $T02().menuSelection = ((($T02().menuSelection | 0) - 1) | 0);
        }
        if ($T02().get_GetRightKeyDown()) {
          if (($T02().menuSelection | 0) === 0) {
            $T02().menuSelection = 2;
          } else {
            $T02().menuSelection = 0;
          }
        }
        if ($T02().get_GetLeftKeyDown()) {
          if (($T02().menuSelection | 0) === 0) {
            $T02().menuSelection = 2;
          } else {
            $T02().menuSelection = 0;
          }
        }
        if ($T02().isMenuScrollable) {
          if (!((($T02().menuSelection | 0) !== 1) || !($T02().buttonList.get_Item(1).originalStatement != $T02().levelList[0]))) {
            $T02().levelListCounter = ((($T02().levelListCounter | 0) - 1) | 0);

            for (i = ((($T02().buttonList.get_Count() | 0) - 1) | 0); i > 0; i = ((i - 1) | 0)) {
              $T02().buttonList.get_Item(i).originalStatement = $T02().buttonList.get_Item(((i - 1) | 0)).originalStatement;
              $T02().buttonList.get_Item(i).highlightStatement = $T02().buttonList.get_Item(((i - 1) | 0)).highlightStatement;
            }
            $T02().buttonList.get_Item(1).originalStatement = $T02().levelList[$T02().levelListCounter];
            $T02().buttonList.get_Item(1).highlightStatement = (JSIL.ConcatString(">", $T02().levelList[$T02().levelListCounter]));
            $T02().menuSelection = 2;
          } else if (!((($T02().menuSelection | 0) < ($T02().maxButtonsOnScreen | 0)) || !($T02().buttonList.get_Item(((($T02().buttonList.get_Count() | 0) - 1) | 0)).originalStatement != $T02().levelList[((($T02().levelList.length | 0) - 1) | 0)]))) {
            $T02().levelListCounter = ((($T02().levelListCounter | 0) + 1) | 0);

            for (i = 1; i < ((($T02().buttonList.get_Count() | 0) - 1) | 0); i = ((i + 1) | 0)) {
              $T02().buttonList.get_Item(i).originalStatement = $T02().buttonList.get_Item(((i + 1) | 0)).originalStatement;
              $T02().buttonList.get_Item(i).highlightStatement = $T02().buttonList.get_Item(((i + 1) | 0)).highlightStatement;
            }
            $T02().buttonList.get_Item(((($T02().buttonList.Count | 0) - 1) | 0)).originalStatement = $T02().levelList[((((($T02().levelListCounter | 0) + ($T02().maxButtonsOnScreen | 0)) | 0) - 1) | 0)];
            $T02().buttonList.get_Item(((($T02().buttonList.Count | 0) - 1) | 0)).highlightStatement = (JSIL.ConcatString(">", $T02().levelList[((((($T02().levelListCounter | 0) + ($T02().maxButtonsOnScreen | 0)) | 0) - 1) | 0)]));
            $T02().menuSelection = ((($T02().maxButtonsOnScreen | 0) - 1) | 0);
          }
          if (!((($T02().get_GetMouseState().get_ScrollWheelValue() | 0) <= ($T02().get_GetPreviousMouseState().get_ScrollWheelValue() | 0)) || !($T02().buttonList.get_Item(1).originalStatement != $T02().levelList[0]))) {
            $T02().levelListCounter = ((($T02().levelListCounter | 0) - 1) | 0);

            for (i = ((($T02().buttonList.get_Count() | 0) - 1) | 0); i > 0; i = ((i - 1) | 0)) {
              $T02().buttonList.get_Item(i).originalStatement = $T02().buttonList.get_Item(((i - 1) | 0)).originalStatement;
              $T02().buttonList.get_Item(i).highlightStatement = $T02().buttonList.get_Item(((i - 1) | 0)).highlightStatement;
            }
            $T02().buttonList.get_Item(1).originalStatement = $T02().levelList[$T02().levelListCounter];
            $T02().buttonList.get_Item(1).highlightStatement = (JSIL.ConcatString(">", $T02().levelList[$T02().levelListCounter]));
          }
          if (!((($T02().get_GetMouseState().get_ScrollWheelValue() | 0) >= ($T02().get_GetPreviousMouseState().get_ScrollWheelValue() | 0)) || !($T02().buttonList.get_Item(((($T02().buttonList.get_Count() | 0) - 1) | 0)).originalStatement != $T02().levelList[((($T02().levelList.length | 0) - 1) | 0)]))) {
            $T02().levelListCounter = ((($T02().levelListCounter | 0) + 1) | 0);

            for (i = 1; i < ((($T02().buttonList.get_Count() | 0) - 1) | 0); i = ((i + 1) | 0)) {
              $T02().buttonList.get_Item(i).originalStatement = $T02().buttonList.get_Item(((i + 1) | 0)).originalStatement;
              $T02().buttonList.get_Item(i).highlightStatement = $T02().buttonList.get_Item(((i + 1) | 0)).highlightStatement;
            }
            $T02().buttonList.get_Item(((($T02().buttonList.Count | 0) - 1) | 0)).originalStatement = $T02().levelList[((((($T02().levelListCounter | 0) + ($T02().maxButtonsOnScreen | 0)) | 0) - 1) | 0)];
            $T02().buttonList.get_Item(((($T02().buttonList.Count | 0) - 1) | 0)).highlightStatement = (JSIL.ConcatString(">", $T02().levelList[((((($T02().levelListCounter | 0) + ($T02().maxButtonsOnScreen | 0)) | 0) - 1) | 0)]));
          }
        }
        if (($T02().menuSelection | 0) >= ($T02().buttonList.get_Count() | 0)) {
          $T02().menuSelection = 0;
        }
        if (($T02().menuSelection | 0) < 0) {
          $T02().menuSelection = ((($T02().buttonList.get_Count() | 0) - 1) | 0);
        }
        if (!(!$T02().buttonList.get_Item($T02().menuSelection).Pressed(
              $T02().get_GetMouseState(), 
              $T02().get_GetPreviousMouseState()
            ) && !$T02().Use())) {
          if (($T02().menuSelection | 0) === 0) {
            game.LoadMenu(0, 0, false);
          } else {
            game.LoadLevel($T02().buttonList.get_Item($T02().menuSelection).originalStatement, true);
          }
        }
        if ($T02().get_GetEscapeKeyDown()) {
          game.LoadMenu(0, 0, false);
        }
        break;

      default: 
        $T02().WriteLine(JSIL.ConcatString("Error. Irbis.Irbis.scene ID ", $T00().$Box($T02().scene), " is not in MenuUpdate list"));
        break;

    }
    result = true;
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Menu", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Menu__ctor
    );

    $.Method({Static:false, Public:true }, "Create", 
      JSIL.MethodSignature.Action($.Int32), 
      Menu_Create
    );

    $.Method({Static:false, Public:true }, "get_Exists", 
      JSIL.MethodSignature.Return($.Boolean), 
      Menu_get_Exists
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Irbis.Irbis")]), 
      Menu_Update
    );

    $.Field({Static:false, Public:false}, "exists", $.Boolean);

    $.Property({Static:false, Public:true }, "Exists", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ObjectCollided */ 

(function ObjectCollided$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Irbis.ICollisionObject)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Irbis.Side)) ();
  };


  function ObjectCollided__ctor (objectCollided, sideCollided) {
    this.collisionObject = objectCollided;
    this.collisionSide = sideCollided;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "ObjectCollided", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Irbis.ICollisionObject"), $asm00.TypeRef("Irbis.Side")]), 
      ObjectCollided__ctor
    );

    $.Field({Static:false, Public:true }, "collisionObject", $asm00.TypeRef("Irbis.ICollisionObject"));

    $.Field({Static:false, Public:true }, "collisionSide", $asm00.TypeRef("Irbis.Side"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Player */ 

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.PlayerSettings)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Wall)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Irbis.Location)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Irbis.Activity)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Irbis.Attacking)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Collided)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Irbis.Irbis_AttackEventDelegate)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.Delegate)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.Threading.Interlocked)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Irbis.Irbis_ShockwaveEventDelegate)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.System.Math)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.ICollisionObject))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Irbis.ICollisionObject)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Irbis.Side)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Bars)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.UIElementDiscreteSlider)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm00.Irbis.IEnemy))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Color, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm00.Enchant), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm01.Microsoft.Xna.Framework.Rectangle]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [
        $asm02.System.Single, $asm02.System.Single, 
        $asm02.System.Single
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Rectangle, $asm00.Irbis.Attacking]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [
        $asm01.Microsoft.Xna.Framework.Point, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Single
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Irbis.ICollisionObject.get_Collider)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Irbis.ICollisionObject.get_Velocity)) ();
  };


  function Player__ctor (t, t3, playerSettings, drawDepth) {
    this.mass = 1;
    this.$name = "jamie";
    this.shieldSourceRect = $S00().Construct(0, 0, 128, 128);
    this.animationSourceRect = $S00().Construct(0, 0, 128, 128);
    this.nextAnimation = -1;
    this.attackAnimation = 0;
    this.prevAttackAnimation = -1;
    this.shieldedColor = $S01().Construct(255, 240, 209);
    this.normalColor = $T04().Color$White$value.MemberwiseClone();
    this.displayRect = $S00().Construct(((this.position.X) | 0), ((this.position.Y) | 0), 128, 128);
    this.animationFrame = $S02().Construct((((+($T06().font.charHeight) * 2) * +($T06().textScale)) | 0), $T06().font.MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), true, $T07().get_Zero(), $T08().Left, (+drawDepth + 0.01));
    this.currentFrame = 0;
    this.currentAnimation = 0;
    this.Load(playerSettings);
    this.baseVelocity = $T09().get_Zero().MemberwiseClone();
    this.stunTime = 0;
    this.isRunning = false;
    this.walled = $T0A().get_Zero().MemberwiseClone();
    this.depth = +drawDepth;
    this.shieldDepth = 0.51;
    this.heading = $T09().get_Zero().MemberwiseClone();
    this.inputEnabled = true;
    this.frameInput = false;
    this.tex = t;
    this.shieldTex = t3;
    this.direction = $T08().Right;
    this.location = $T0B().Air;
    this.activity = $T0C().Idle;
    this.prevAttacking = this.attacking = $T0D().No;
    this.attackID = this.attackIDtracker = 0;
    this.lastAttackID = -1;
    this.climbablePixels = 3;
    this.attackImmediately = false;
    this.interruptAttack = false;
    this.airSpeed = 0.6 * +this.speed;
    this.attackMovementSpeed = 0.3 * +this.speed;
    this.jumpTime = 0;
    this.idleTime = 0;
    this.specialIdleTime = 5;
    this.animationNoLoop = false;
    this.position.X = +this.position.X - +(this.colliderOffset.X);
    this.position.Y = +this.position.Y - +(this.colliderOffset.Y);
    this.hurtVelocity = $S03().Construct(50, -100);
    this.invulnerable = 0;
    this.shieldDepleted = false;
    this.shielded = false;
    this.energyed = false;
    this.potionTime = 0;
    this.attackMovementFrames = 1;
    this.collided = new ($T0E())();
    this.enchantList = $S04().Construct();
    this.rollTimeMax = 0.25;
    this.rollSpeed = 1500;
    this.rollTime = 0;
    this.shieldtimeSinceLastFrame = 0;
    this.collision = true;
    this.noclip = false;
    this.shockwaveEffectiveDistanceSquared = ((+this.shockwaveEffectiveDistance * +this.shockwaveEffectiveDistance) | 0);
    this.PlayerEventsReset();
  }; 

  function Player_add_OnPlayerAttack (value) {
    var attackEventDelegate = this.OnPlayerAttack;

    do {
      var attackEventDelegate2 = attackEventDelegate;
      var value2 = $T11().Combine(attackEventDelegate2, value);
      attackEventDelegate = $T12().CompareExchange$b1($T10())(/* ref */ new JSIL.MemberReference(this, "OnPlayerAttack"), value2, attackEventDelegate2);
    } while (attackEventDelegate !== attackEventDelegate2);
  }; 

  function Player_add_OnPlayerShockwave (value) {
    var shockwaveEventDelegate = this.OnPlayerShockwave;

    do {
      var shockwaveEventDelegate2 = shockwaveEventDelegate;
      var value2 = $T11().Combine(shockwaveEventDelegate2, value);
      shockwaveEventDelegate = $T12().CompareExchange$b1($T13())(/* ref */ new JSIL.MemberReference(this, "OnPlayerShockwave"), value2, shockwaveEventDelegate2);
    } while (shockwaveEventDelegate !== shockwaveEventDelegate2);
  }; 

  function Player_Animate () {
    this.timeSinceLastFrame = +this.timeSinceLastFrame + +$T06().get_DeltaTime();
    if (+this.timeSinceLastFrame >= +this.animationSpeed[this.currentAnimation]) {
      this.currentFrame = (((this.currentFrame | 0) + 1) | 0);
      this.timeSinceLastFrame = +this.timeSinceLastFrame - +this.animationSpeed[this.currentAnimation];
    }
    if (this.attacking !== $T0D().No) {
      this.activity = $T0C().Attacking;
    } else {
      if ($T07().op_Inequality(this.input, $T07().get_Zero())) {
        this.idleTime = 0;
        if ((this.input.X | 0) !== 0) {
          if (((this.walled).get_Bottom() | 0) > 0) {
            this.activity = $T0C().Running;
          } else if (+this.jumpTime > 0) {
            this.activity = $T0C().Jumping;
          } else if (!((+this.velocity.Y <= 0) && (this.activity === $T0C().Jumping))) {
            this.activity = $T0C().Falling;
          }
        } else if (((this.walled).get_Bottom() | 0) <= 0) {
          if (+this.jumpTime > 0) {
            this.activity = $T0C().Jumping;
          } else if (!((+this.velocity.Y <= 0) && (this.activity === $T0C().Jumping))) {
            this.activity = $T0C().Falling;
          }
        }
      } else if (((this.walled).get_Bottom() | 0) <= 0) {
        if (+this.jumpTime > 0) {
          this.activity = $T0C().Jumping;
        } else if (!((+this.velocity.Y <= 0) && (this.activity === $T0C().Jumping))) {
          this.activity = $T0C().Falling;
        }
      } else if (((this.prevWalled).get_Bottom() | 0) <= 0) {
        this.activity = $T0C().Landing;
      } else if (this.activity !== $T0C().Landing) {
        this.activity = $T0C().Idle;
      }
      if (+this.rollTime > 0) {
        this.activity = $T0C().Rolling;
      }
    }
    if (this.activity === $T0C().Idle) {
      this.idleTime = +this.idleTime + +$T06().get_DeltaTime();
      this.specialTime = +this.specialTime + +$T06().get_DeltaTime();
    }
    if ((this.currentFrame | 0) > (this.animationFrames[this.currentAnimation] | 0)) {
      if (this.attacking !== $T0D().No) {
        if (this.attackImmediately) {
          this.attackImmediately = false;
          this.Attack($T0D().Attack1);
        } else {
          this.attacking = $T0D().No;
          this.attackCollider = $T03().get_Empty().MemberwiseClone();
        }
      }
      if (this.animationNoLoop) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var num = (this.currentAnimation | 0);
              if (num !== 0) {
                switch (num) {
                  case 15: 
                    break;

                  case 16: 
                    break;

                  default: 
                    this.SetAnimation();
                    break $labelgroup0;

                }
                this.SetAnimation(3, false);
                this.activity = $T0C().Idle;
              } else {
                this.SetAnimation(1, false);
              }
              break $labelgroup0;

          }
        }
      } else {
        this.SetAnimation();
      }
    } else if (this.previousActivity !== this.activity) {
      this.SetAnimation();
    }
    if ((this.previousAnimation | 0) !== (this.currentAnimation | 0)) {
      this.timeSinceLastFrame = 0;
      this.currentFrame = 0;
    }
    this.animationSourceRect.X = Math.imul(this.animationSourceRect.Width, this.currentFrame);
    this.animationSourceRect.Y = Math.imul(this.animationSourceRect.Height, this.currentAnimation);
    if (this.shielded) {
      this.shieldtimeSinceLastFrame = +this.shieldtimeSinceLastFrame + +$T06().get_DeltaTime();
      if (+this.shieldtimeSinceLastFrame >= +this.shieldAnimationSpeed) {
        this.shieldtimeSinceLastFrame = +this.shieldtimeSinceLastFrame - +this.shieldAnimationSpeed;
        this.currentShieldFrame = (((this.currentShieldFrame | 0) + 1) | 0);
      }
      if (Math.imul(this.currentShieldFrame, 128) >= ((this.shieldTex).get_Width() | 0)) {
        this.currentShieldFrame = 0;
      }
      this.shieldSourceRect.X = Math.imul(this.currentShieldFrame, 128);
      this.renderColor = this.shieldedColor.MemberwiseClone();
    } else {
      this.shieldtimeSinceLastFrame = 0;
      this.renderColor = this.normalColor.MemberwiseClone();
    }
    this.previousAnimation = (this.currentAnimation | 0);
    this.previousActivity = this.activity;
  }; 

  function Player_Attack (attack) {
    this.attacking = attack;
    if (attack !== $T0D().Attack1) {
      this.attackDamage = 0;
    } else {
      this.attackDamage = +this.attack1Damage;
      if (this.direction === $T08().Left) {
        this.attackCollider.X = ((((this.collider).get_Center().X | 0) - (this.attackColliderWidth | 0)) | 0);
        this.attackCollider.Y = ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0);
        this.attackCollider.Width = (this.attackColliderWidth | 0);
        this.attackCollider.Height = (this.attackColliderHeight | 0);
      } else {
        this.attackCollider.X = ((this.collider).get_Center().X | 0);
        this.attackCollider.Y = ((((this.collider).get_Center().Y | 0) - (((this.attackColliderHeight | 0) / 2) | 0)) | 0);
        this.attackCollider.Width = (this.attackColliderWidth | 0);
        this.attackCollider.Height = (this.attackColliderHeight | 0);
      }
      this.OnPlayerAttack(this.attackCollider.MemberwiseClone(), $T0D().Attack1);
    }
  }; 

  function Player_AttackMovement () {
  }; 

  function Player_CalculateMovement () {
    this.displayRect.X = ((this.position.X) | 0);
    this.displayRect.Y = ((this.position.Y) | 0);
    this.collider.X = ((((Math.round(this.position.X)) | 0) + (this.colliderOffset.X | 0)) | 0);
    this.collider.Y = ((((Math.round(this.position.Y)) | 0) + (this.colliderOffset.Y | 0)) | 0);
    (this.collider.Size = this.colliderSize.MemberwiseClone());
  }; 

  function Player_ClearCollision () {
    this.collided = new ($T0E())();
    this.walled = $T0A().get_Zero().MemberwiseClone();
  }; 

  function Player_Collision (colliderList) {
    var $temp00;
    this.amountToMove = this.negAmountToMove = $T09().get_Zero().MemberwiseClone();
    this.testCollider.Width = (this.colliderSize.X | 0);
    this.testCollider.Height = (this.colliderSize.Y | 0);

    for (var a$0 = colliderList._items, i$0 = 0, l$0 = (colliderList._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      if (!(!$T03().op_Inequality(
            $IM00().Call(s, null), 
            $T03().get_Empty()
          ) || 
          !$T03().op_Inequality($IM00().Call(s, null), this.collider) || (+$S05().CallStatic($T06(), "DistanceSquared", null, this.collider.MemberwiseClone(), $IM00().Call(s, null).MemberwiseClone()) > 0))) {
        this.collidedContains = (this.collided).Contains(s);
        if ($T06().IsTouching(this.collider, $IM00().Call(s, null), $T19().Bottom)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T19().Bottom);
            (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) + 1) | 0));
            if (!((+this.negAmountToMove.Y <= +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0))) || ((+this.velocity.Y * +$T06().get_DeltaTime()) < +(-+((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0)))))) {
              this.negAmountToMove.Y = +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0));
            }
          } else if (+this.negAmountToMove.Y > +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0))) {
            this.negAmountToMove.Y = +((($IM00().Call(s, null)).get_Top() | 0) - ((this.collider).get_Bottom() | 0));
          }
        }
        if ($T06().IsTouching(this.collider, $IM00().Call(s, null), $T19().Right)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T19().Right);
            (this.walled).set_Right(((((this.walled).get_Right() | 0) + 1) | 0));
            if (!((+this.negAmountToMove.X <= +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0))) || ((+this.velocity.X * +$T06().get_DeltaTime()) < +(-+((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0)))))) {
              this.negAmountToMove.X = +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0));
            }
          } else if (+this.negAmountToMove.X > +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0))) {
            this.negAmountToMove.X = +((($IM00().Call(s, null)).get_Left() | 0) - ((this.collider).get_Right() | 0));
          }
        }
        if ($T06().IsTouching(this.collider, $IM00().Call(s, null), $T19().Left)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T19().Left);
            (this.walled).set_Left(((((this.walled).get_Left() | 0) + 1) | 0));
            if (!((+this.amountToMove.X >= +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0))) || ((+this.velocity.X * +$T06().get_DeltaTime()) > +(-+((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0)))))) {
              this.amountToMove.X = +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0));
            }
          } else if (+this.amountToMove.X < +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0))) {
            this.amountToMove.X = +((($IM00().Call(s, null)).get_Right() | 0) - ((this.collider).get_Left() | 0));
          }
        }
        if ($T06().IsTouching(this.collider, $IM00().Call(s, null), $T19().Top)) {
          if (!this.collidedContains) {
            (this.collided).Add(s, $T19().Top);
            (this.walled).set_Top(((((this.walled).get_Top() | 0) + 1) | 0));
            if (!((+this.amountToMove.Y >= +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0))) || ((+this.velocity.Y * +$T06().get_DeltaTime()) > +(-+((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0)))))) {
              this.amountToMove.Y = +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0));
            }
          } else if (+this.amountToMove.Y < +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0))) {
            this.amountToMove.Y = +((($IM00().Call(s, null)).get_Bottom() | 0) - ((this.collider).get_Top() | 0));
          }
        }
      }
    }
    if (!((((this.walled).get_Left() | 0) !== 1) || ((this.input.X | 0) >= 0))) {
      var climbamount = ((((this.collider).get_Bottom() | 0) - (($IM00().Call((this.collided.leftCollided).get_Item(0), null)).get_Top() | 0)) | 0);
      if (climbamount <= (this.climbablePixels | 0)) {
        this.position.Y = +this.position.Y - +climbamount;
        this.amountToMove = this.negAmountToMove = $T09().get_Zero().MemberwiseClone();
        $T06().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T1B(), [this, " on ramp, moved ", $T14().$Box(climbamount), " pixels. Timer:", $T16().$Box($T06().get_Timer())])));
      }
    }
    if (!((((this.walled).get_Right() | 0) !== 1) || ((this.input.X | 0) <= 0))) {
      climbamount = ((((this.collider).get_Bottom() | 0) - (($IM00().Call((this.collided.rightCollided).get_Item(0), null)).get_Top() | 0)) | 0);
      if (climbamount <= (this.climbablePixels | 0)) {
        this.position.Y = +this.position.Y - +climbamount;
        this.amountToMove = this.negAmountToMove = $T09().get_Zero().MemberwiseClone();
        $T06().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T1B(), [this, " on ramp, moved ", $T14().$Box(climbamount), " pixels. Timer:", $T16().$Box($T06().get_Timer())])));
      }
    }
    if (+this.amountToMove.X === 0) {
      this.amountToMove.X = +this.negAmountToMove.X;
    } else if (!((+this.negAmountToMove.X === 0) || (-this.negAmountToMove.X >= +this.amountToMove.X))) {
      this.amountToMove.X = +this.negAmountToMove.X;
    }
    if (+this.amountToMove.Y === 0) {
      this.amountToMove.Y = +this.negAmountToMove.Y;
    } else if (!((+this.negAmountToMove.Y === 0) || (-this.negAmountToMove.Y >= +this.amountToMove.Y))) {
      this.amountToMove.Y = +this.negAmountToMove.Y;
    }
    var Y = false;
    var X = false;
    if (!(((Math.abs(this.amountToMove.Y)) > (Math.abs(this.amountToMove.X))) || (+this.amountToMove.Y === 0))) {
      this.testPos.Y = +(((Math.round(this.position.Y)) | 0));
      this.testPos.X = +this.position.X;
      this.testPos.Y = +this.testPos.Y + +this.amountToMove.Y;
      Y = true;
    } else if (+this.amountToMove.X !== 0) {
      this.testPos.X = +(((Math.round(this.position.X)) | 0));
      this.testPos.Y = +this.position.Y;
      this.testPos.X = +this.testPos.X + +this.amountToMove.X;
      X = true;
    }
    this.testCollider.X = ((((this.testPos.X) | 0) + (this.colliderOffset.X | 0)) | 0);
    this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.colliderOffset.Y | 0)) | 0);
    var pass = !(this.collided).Intersects(this.testCollider);
    if (pass) {
      if (Y) {
        this.amountToMove.X = 0;
      } else if (X) {
        this.amountToMove.Y = 0;
      }
    } else if (Y) {
      this.testPos.X = +(((Math.round(this.position.X)) | 0));
      this.testPos.Y = +this.position.Y;
      this.testPos.X = +this.testPos.X + +this.amountToMove.X;
      this.testCollider.X = ((((this.testPos.X) | 0) + (this.colliderOffset.X | 0)) | 0);
      this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.colliderOffset.Y | 0)) | 0);
      pass = !(this.collided).Intersects(this.testCollider);
      if (pass) {
        this.amountToMove.Y = 0;
      }
    } else if (X) {
      this.testPos.Y = +(((Math.round(this.position.Y)) | 0));
      this.testPos.X = +this.position.X;
      this.testPos.Y = +this.testPos.Y + +this.amountToMove.Y;
      this.testCollider.X = ((((this.testPos.X) | 0) + (this.colliderOffset.X | 0)) | 0);
      this.testCollider.Y = ((((this.testPos.Y) | 0) + (this.colliderOffset.Y | 0)) | 0);
      pass = !(this.collided).Intersects(this.testCollider);
      if (pass) {
        this.amountToMove.X = 0;
      }
    }
    if ($T09().op_Inequality(this.amountToMove, $T09().get_Zero())) {
      $T06().WriteLine(JSIL.ConcatString("    amountToMove: ", this.amountToMove));
    }
    this.position = $T09().op_Addition(this.position.MemberwiseClone(), this.amountToMove);
    this.CalculateMovement();

    for (var i = 0; i < ((this.collided.bottomCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T06().IsTouching(this.collider, $IM00().Call((this.collided.bottomCollided).get_Item(i), null), $T19().Bottom)) {
        (this.collided.bottomCollided).RemoveAt(i);
        (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.collided.rightCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T06().IsTouching(this.collider, $IM00().Call((this.collided.rightCollided).get_Item(i), null), $T19().Right)) {
        (this.collided.rightCollided).RemoveAt(i);
        (this.walled).set_Right(((((this.walled).get_Right() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.collided.leftCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T06().IsTouching(this.collider, $IM00().Call((this.collided.leftCollided).get_Item(i), null), $T19().Left)) {
        (this.collided.leftCollided).RemoveAt(i);
        (this.walled).set_Left(((((this.walled).get_Left() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.collided.topCollided).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T06().IsTouching(this.collider, $IM00().Call((this.collided.topCollided).get_Item(i), null), $T19().Top)) {
        (this.collided.topCollided).RemoveAt(i);
        (this.walled).set_Top(((((this.walled).get_Top() | 0) - 1) | 0));
        i = ((i - 1) | 0);
      }
    }
    if (!(!((((this.walled).get_Top() | 0) > 0) && 
          (+this.velocity.Y < 0)) && ((((this.walled).get_Bottom() | 0) <= 0) || 
          (+this.velocity.Y <= 0)))) {
      this.velocity.Y = 0;
      this.position.Y = +(((Math.round(this.position.Y)) | 0));
    }
    if (!(!((((this.walled).get_Left() | 0) > 0) && 
          (+this.velocity.X < 0)) && ((((this.walled).get_Right() | 0) <= 0) || 
          (+this.velocity.X <= 0)))) {
      this.velocity.X = 0;
      this.position.X = +(((Math.round(this.position.X)) | 0));
    }
    if (!((((this.walled).get_Bottom() | 0) > 0) || (+this.jumpTime > 0))) {
      if (this.attacking !== $T0D().No) {
        this.velocity.Y = +this.velocity.Y + ((+((+$T06().gravity / 2)) * +this.mass) * +$T06().get_DeltaTime());
      } else {
        this.velocity.Y = +this.velocity.Y + ((+$T06().gravity * +this.mass) * +$T06().get_DeltaTime());
      }
    }
  }; 

  function Player_Combat () {
    this.combat = true;
    if (this.direction === $T08().Forward) {
      this.direction = $T08().Right;
      this.idleTime = 0;
    }
  }; 

  function Player_Draw (sb) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch ($T06().debug) {
            case 1: 
              break;

            case 2: 
              break;

            case 3: 
              break;

            case 4: 
              break;

            case 5: 
              break;

            default: 
              break $labelgroup0;

          }
          if ($T03().op_Inequality(this.attackCollider, $T03().get_Empty())) {
            $S06().CallStatic($T1F(), "Draw", null, sb, this.attackCollider.MemberwiseClone(), $T04().Color$Magenta$value.MemberwiseClone(), true);
          }
          $S06().CallStatic($T1F(), "Draw", null, sb, this.collider.MemberwiseClone(), $T04().Color$Magenta$value.MemberwiseClone(), true);
          (this.animationFrame).Update((this.currentFrame).toString(), true);
          (this.animationFrame).Draw(sb, ($S07().CallStatic($T09(), "op_Multiply", null, $T09().op_Addition(this.position.MemberwiseClone(), ($T07().op_Subtraction(this.colliderOffset, $S08().Construct(24)).MemberwiseClone()).ToVector2()).MemberwiseClone(), $T06().screenScale).MemberwiseClone()).ToPoint());
          break $labelgroup0;

      }
    }
    /* Original label IL_CD */ 
    $S09().CallVirtual("Draw", null, sb, 
      this.tex, 
      $S07().CallStatic($T09(), "op_Multiply", null, this.position.MemberwiseClone(), $T06().screenScale).MemberwiseClone(), 
      this.animationSourceRect.MemberwiseClone(), 
      this.renderColor.MemberwiseClone(), 
      0, 
      $T09().get_Zero().MemberwiseClone(), 
      $T06().screenScale, 
      $T20().None, 
      this.depth
    );
    if (this.shielded) {
      $S09().CallVirtual("Draw", null, sb, 
        this.shieldTex, 
        $S07().CallStatic($T09(), "op_Multiply", null, $T09().op_Addition(this.position.MemberwiseClone(), this.shieldOffset).MemberwiseClone(), $T06().screenScale).MemberwiseClone(), 
        this.shieldSourceRect.MemberwiseClone(), 
        $T04().Color$White$value.MemberwiseClone(), 
        0, 
        $T09().get_Zero().MemberwiseClone(), 
        $T06().screenScale, 
        $T20().None, 
        +this.depth + 0.001
      );
    }
  }; 

  function Player_get_Collider () {
    return this.collider;
  }; 

  function Player_get_Mass () {
    return this.mass;
  }; 

  function Player_get_Name () {
    return this.$name;
  }; 

  function Player_get_TrueCenter () {
    return $S03().Construct(((+this.position.X + +(this.colliderOffset.X)) + +(((this.colliderSize.X | 0) / 2 | 0))), ((+this.position.Y + +(this.colliderOffset.Y)) + +(((this.colliderSize.Y | 0) / 2 | 0))));
  }; 

  function Player_get_Walled () {
    return this.walled;
  }; 

  function Player_Heal (amount) {
    if ((+this.health + +amount) > +this.maxHealth) {
      this.health = +this.maxHealth;
    } else {
      this.health = +this.health + +amount;
    }
  }; 

  function Player_Hurt (damage) {
    if (+this.invulnerable <= 0) {
      if (this.shielded) {
        if (+damage > +this.shield) {
          this.Heal(+this.shield * +this.shieldHealingPercentage);
          damage -= +this.shield;
          this.shield = 0;
          this.health = +this.health - +damage;
        } else {
          this.Heal(+damage * +this.shieldHealingPercentage);
          this.shield = +this.shield - +damage;
        }
      } else {
        this.health = +this.health - +damage;
      }
      this.invulnerable = +this.invulnerableMaxTime;
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function Player_HurtOnTouch (damage) {
    if (!((+this.invulnerableOnTouch > 0) || (+this.invulnerable > 0))) {
      this.invulnerableOnTouch = 1;
      if (this.shielded) {
        if (+damage > +this.shield) {
          this.Heal(+this.shield * +this.shieldHealingPercentage);
          damage -= +this.shield;
          this.shield = 0;
          this.health = +this.health - +damage;
          var result = true;
        } else {
          this.Heal(+damage * +this.shieldHealingPercentage);
          this.shield = +this.shield - +damage;
          result = false;
        }
      } else {
        this.health = +this.health - +damage;
        result = true;
      }
    } else {
      result = false;
    }
    return result;
  }; 

  function Player_Load (playerSettings) {
    this.attack1Damage = +playerSettings.attack1Damage;
    this.attack2Damage = +playerSettings.attack2Damage;
    this.speed = +playerSettings.speed;
    this.jumpTimeMax = +playerSettings.jumpTimeMax;
    this.idleTimeMax = +playerSettings.idleTimeMax;
    this.colliderOffset = playerSettings.colliderOffset.MemberwiseClone();
    this.colliderSize = playerSettings.colliderSize.MemberwiseClone();
    this.shieldOffset = $S03().Construct(((+(this.colliderOffset.X) + +((+(this.colliderSize.X) / 2))) - +((+(this.shieldSourceRect.Width) / 2))), ((+(this.colliderOffset.Y) + +((+(this.colliderSize.Y) / 2))) - +((+(this.shieldSourceRect.Height) / 2))));
    this.attackColliderWidth = (playerSettings.attackColliderWidth | 0);
    this.attackColliderHeight = (playerSettings.attackColliderHeight | 0);
    this.health = this.maxHealth = +playerSettings.maxHealth;
    this.shield = this.maxShield = +playerSettings.maxShield;
    this.energy = this.maxEnergy = +playerSettings.maxEnergy;
    this.superShockwaveHoldtime = +playerSettings.superShockwaveHoldtime;
    this.walljumpHoldtime = +playerSettings.walljumpHoldtime;
    this.shockwaveEffectiveDistance = +playerSettings.shockwaveEffectiveDistance;
    this.shockwaveStunTime = +playerSettings.shockwaveStunTime;
    this.shockwaveKnockback = playerSettings.shockwaveKnockback.MemberwiseClone();
    this.invulnerableMaxTime = +playerSettings.invulnerableMaxTime;
    this.shieldRechargeRate = +playerSettings.shieldRechargeRate;
    this.energyRechargeRate = +playerSettings.energyRechargeRate;
    this.baseHealing = this.healthRechargeRate = +playerSettings.healthRechargeRate;
    this.potionRechargeRate = +playerSettings.potionRechargeRate;
    this.potions = this.maxNumberOfPotions = (playerSettings.maxNumberOfPotions | 0);
    this.potionRechargeTime = +playerSettings.potionRechargeTime;
    this.shieldHealingPercentage = +playerSettings.shieldHealingPercentage;
    this.energyUsableMargin = +playerSettings.energyUsableMargin;
    this.terminalVelocity = +playerSettings.terminalVelocity;
    this.animationSpeed = playerSettings.animationSpeed;
    this.shieldAnimationSpeed = +playerSettings.shieldAnimationSpeed;
    this.animationFrames = playerSettings.animationFrames;
  }; 

  function Player_Movement () {
    if (this.noclip) {
      if ($T06().get_GetRollKey()) {
        this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * (+this.speed * 0.1), +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
        this.velocity.Y = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.Y, +(this.input.Y) * (-this.speed * 0.1), +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
      } else {
        this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.speed, +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
        this.velocity.Y = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.Y, +(this.input.Y) * -this.speed, +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
      }
    } else {
      if (+this.rollTime > 0) {
        if (this.direction === $T08().Right) {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, this.rollSpeed, +$thisType.movementLerpAir * +$T06().get_DeltaTime());
        } else {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, -this.rollSpeed, +$thisType.movementLerpAir * +$T06().get_DeltaTime());
        }
        this.debugspeed = +this.rollSpeed;
        this.rollTime = +this.rollTime - +$T06().get_DeltaTime();
        if (+this.rollTime <= 0) {
          this.inputEnabled = true;
          this.rollTime = 0;
        }
      } else if (this.attacking !== $T0D().No) {
        this.isRunning = false;
        if (!(((this.currentFrame | 0) > (this.attackMovementFrames | 0)) || (((this.walled).get_Bottom() | 0) <= 0))) {
          if (this.direction === $T08().Right) {
            this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, this.attackMovementSpeed, +$thisType.movementLerpBuildup * +$T06().get_DeltaTime());
          } else if (this.direction === $T08().Left) {
            this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, -this.attackMovementSpeed, +$thisType.movementLerpBuildup * +$T06().get_DeltaTime());
          }
          this.debugspeed = +this.attackMovementSpeed;
        } else if (((this.walled).get_Bottom() | 0) <= 0) {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.attackMovementSpeed, +$thisType.movementLerpBuildup * +$T06().get_DeltaTime());
          this.debugspeed = +this.attackMovementSpeed;
        } else {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, 0, +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
          this.debugspeed = 0;
        }
        if (!((((this.walled).get_Bottom() | 0) <= 0) || 
            (((((((this.walled).get_Left() | 0) + ((this.walled).get_Right() | 0)) | 0) + ((this.walled).get_Top() | 0)) | 0) > 0) || (!((this.direction === $T08().Left) && 
                (((this.collided).get_LeftmostBottomCollision() | 0) > ((this.collider).get_Left() | 0))) && 
              ((this.direction !== $T08().Right) || 
                (((this.collided).get_RightmostBottomCollision() | 0) >= ((this.collider).get_Right() | 0)))))) {
          this.velocity.X = 0;
        }
      } else if ((this.input.X | 0) !== 0) {
        if (((this.walled).get_Bottom() | 0) > 0) {
          this.isRunning = true;
        } else if (!this.isRunning) {
          if (!(!(((this.input.X | 0) > 0) && 
                (+this.velocity.X < 0)) && (((this.input.X | 0) >= 0) || 
                (+this.velocity.X <= 0)))) {
            this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.airSpeed, +$thisType.movementLerpAir * +$T06().get_DeltaTime());
          } else {
            this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.airSpeed, +$thisType.movementLerpBuildup * +$T06().get_DeltaTime());
          }
          this.debugspeed = +this.airSpeed;
        }
        if (!(!this.isRunning || ((this.input.X | 0) !== (this.prevInput.X | 0)))) {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.speed, +$thisType.movementLerpBuildup * +$T06().get_DeltaTime());
          this.debugspeed = +this.speed;
        } else {
          this.isRunning = false;
        }
        if (!(!((((this.walled).get_Left() | 0) > 0) && 
              ((this.input.X | 0) < 0)) && ((((this.walled).get_Right() | 0) <= 0) || 
              ((this.input.X | 0) <= 0)))) {
          this.isRunning = false;
        }
      } else {
        if (((this.walled).get_Bottom() | 0) > 0) {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.speed, +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
          this.debugspeed = +this.speed;
        } else if ((Math.abs(this.velocity.X)) < +this.airSpeed) {
          this.velocity.X = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.X, +(this.input.X) * +this.airSpeed, +$thisType.movementLerpBuildup * +$T06().get_DeltaTime());
          this.debugspeed = +this.airSpeed;
        }
        this.isRunning = false;
      }
      if (!((((this.walled).get_Right() | 0) <= 0) || (+this.velocity.X <= 0))) {
        this.velocity.X = 0;
      }
      if (!((((this.walled).get_Left() | 0) <= 0) || (+this.velocity.X >= 0))) {
        this.velocity.X = 0;
      }
      if (+this.jumpTime > 0) {
        this.velocity.Y = +$S0A().CallStatic($T06(), "Lerp", null, this.velocity.Y, -this.speed, +$thisType.movementLerpSlowdown * +$T06().get_DeltaTime());
      }
      if (!((((this.walled).get_Top() | 0) <= 0) || (+this.velocity.Y >= 0))) {
        this.velocity.Y = 0;
        this.jumpTime = 0;
      }
      if (+this.velocity.X > +this.terminalVelocity) {
        this.velocity.X = +this.terminalVelocity;
      }
      if (+this.velocity.Y > +this.terminalVelocity) {
        this.velocity.Y = +this.terminalVelocity;
      }
      if (+this.velocity.X < -this.terminalVelocity) {
        this.velocity.X = -this.terminalVelocity;
      }
      if (+this.velocity.Y < -this.terminalVelocity) {
        this.velocity.Y = -this.terminalVelocity;
      }
      if (((this.walled).get_Bottom() | 0) > 0) {
        this.baseVelocity = $IM01().Call((this.collided.bottomCollided).get_Item(0), null).MemberwiseClone();
      } else if (((this.walled).get_Bottom() | 0) <= 0) {
        if (!((((this.walled).get_Left() | 0) <= 0) || (((this.walled).get_Right() | 0) > 0))) {
          this.baseVelocity = $IM01().Call((this.collided.leftCollided).get_Item(0), null).MemberwiseClone();
        } else if (!((((this.walled).get_Right() | 0) <= 0) || (((this.walled).get_Left() | 0) > 0))) {
          this.baseVelocity = $IM01().Call((this.collided.rightCollided).get_Item(0), null).MemberwiseClone();
        }
      }
      if (((this.walled).get_Total() | 0) <= 0) {
        this.baseVelocity = $T09().Lerp(
          this.baseVelocity, 
          $T09().get_Zero(), 
          2 * +$T06().get_DeltaTime()
        );
      }
    }
    this.position = $T09().op_Addition(this.position.MemberwiseClone(), $S07().CallStatic($T09(), "op_Multiply", null, 
        $T09().op_Addition(this.baseVelocity.MemberwiseClone(), this.velocity).MemberwiseClone(), 
        $T06().get_DeltaTime()
      ));
  }; 

  function Player_Noclip () {
    this.noclip = !this.noclip;
    this.collision = !this.noclip;
    this.velocity = $T09().get_Zero().MemberwiseClone();
    this.walled = $T0A().get_Zero().MemberwiseClone();
    this.collided = new ($T0E())();
    if (this.noclip) {
      this.speed = +this.speed * 25;
    } else {
      this.speed = +((+this.speed / 25));
    }
  }; 

  function Player_Player_OnPlayerAttack (AttackCollider, Attack) {
    $T06().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T1B(), [this.$name, " attack:", Attack, "\n"])));
    return true;
  }; 

  function Player_Player_OnPlayerShockwave (Origin, RangeSquared, Range, Power) {
    $T06().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T1B(), [this.$name, " origin:", Origin, " rangeSquared:", $T14().$Box(RangeSquared), " power:", $T02().$Box(Power), "\n"])));
    return true;
  }; 

  function Player_PlayerEventsReset () {
    this.OnPlayerAttack = $T10().New(this, null, new JSIL.MethodPointerInfo($thisType, "Player_OnPlayerAttack", $S0B(), false, false));
    this.OnPlayerShockwave = $T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "Player_OnPlayerShockwave", $S0C(), false, false));
  }; 

  function Player_remove_OnPlayerAttack (value) {
    var attackEventDelegate = this.OnPlayerAttack;

    do {
      var attackEventDelegate2 = attackEventDelegate;
      var value2 = $T11().Remove(attackEventDelegate2, value);
      attackEventDelegate = $T12().CompareExchange$b1($T10())(/* ref */ new JSIL.MemberReference(this, "OnPlayerAttack"), value2, attackEventDelegate2);
    } while (attackEventDelegate !== attackEventDelegate2);
  }; 

  function Player_remove_OnPlayerShockwave (value) {
    var shockwaveEventDelegate = this.OnPlayerShockwave;

    do {
      var shockwaveEventDelegate2 = shockwaveEventDelegate;
      var value2 = $T11().Remove(shockwaveEventDelegate2, value);
      shockwaveEventDelegate = $T12().CompareExchange$b1($T13())(/* ref */ new JSIL.MemberReference(this, "OnPlayerShockwave"), value2, shockwaveEventDelegate2);
    } while (shockwaveEventDelegate !== shockwaveEventDelegate2);
  }; 

  function Player_RemoveCollision (collisionObject) {
    if ((this.collided).Remove(collisionObject, $T19().Bottom)) {
      (this.walled).set_Bottom(((((this.walled).get_Bottom() | 0) - 1) | 0));
    }
    if ((this.collided).Remove(collisionObject, $T19().Right)) {
      (this.walled).set_Right(((((this.walled).get_Right() | 0) - 1) | 0));
    }
    if ((this.collided).Remove(collisionObject, $T19().Left)) {
      (this.walled).set_Left(((((this.walled).get_Left() | 0) - 1) | 0));
    }
    if ((this.collided).Remove(collisionObject, $T19().Top)) {
      (this.walled).set_Top(((((this.walled).get_Top() | 0) - 1) | 0));
    }
    return true;
  }; 

  function Player_Respawn (initialPos) {
    this.position = initialPos.MemberwiseClone();
    this.position.X = +this.position.X - +(this.colliderOffset.X);
    this.position.Y = +this.position.Y - +(this.colliderOffset.Y);
    this.velocity = $T09().get_Zero().MemberwiseClone();
    this.CalculateMovement();
    this.health = +this.maxHealth;
    this.energy = +this.maxEnergy;
    this.shield = +this.maxShield;
    this.potions = (this.maxNumberOfPotions | 0);
    if ($T21().potionBar !== null) {
      $T21().potionBar.Update(this.potions);
    }
  }; 

  function Player_SetAnimation$00 () {
    switch ((this.activity).valueOf()) {
      case 0: 
        if (this.direction === $T08().Forward) {
          if (!((+this.idleTime < +this.idleTimeMax) || (+this.idleTimeMax <= 0))) {
            this.idleTime = 0;
            this.SetAnimation(1, false);
          } else {
            this.SetAnimation(1, false);
          }
        } else if (!((+this.idleTime < +this.idleTimeMax) || (+this.idleTimeMax <= 0))) {
          this.idleTime = +this.idleTime - +this.idleTimeMax;
          this.SetAnimation(0, true);
          this.direction = $T08().Forward;
        } else if (+this.specialTime >= +this.specialIdleTime) {
          this.specialTime = +this.specialTime - +this.specialIdleTime;
          var num = ($T06().RandomInt(2) | 0);
          if (num !== 1) {
            this.SetAnimation(5, true);
          } else {
            this.SetAnimation(7, true);
          }
        } else {
          this.SetAnimation(3, false);
        }
        if (!(!this.frameInput && !this.combat)) {
          this.idleTime = 0;
        }
        break;

      case 1: 
        this.SetAnimation(9, false);
        break;

      case 2: 
        this.SetAnimation(11, false);
        break;

      case 3: 
        this.SetAnimation(17, false);
        break;

      case 4: 
        this.SetAnimation(13, false);
        break;

      case 5: 
        this.SetAnimation(15, true);
        break;

      case 6: 

        while ((this.attackAnimation | 0) === (this.prevAttackAnimation | 0)) {
          this.attackAnimation = ($T06().RandomInt(3) | 0);
        }
        switch (this.attackAnimation) {
          case 1: 
            this.SetAnimation(19, true);
            break;

          case 2: 
            this.SetAnimation(21, true);
            break;

          default: 
            this.SetAnimation(17, true);
            break;

        }
        this.prevAttackAnimation = (this.attackAnimation | 0);
        break;

      default: 
        this.SetAnimation(9, false);
        break;

    }
    if ((this.nextAnimation | 0) >= 0) {
      this.SetAnimation(this.nextAnimation, false);
    }
  }; 

  function Player_SetAnimation$01 (animation, noLoop) {
    this.currentAnimation = (animation | 0);
    this.currentFrame = 0;
    this.nextAnimation = -1;
    this.animationNoLoop = noLoop;
    if (this.direction === $T08().Right) {
      this.currentAnimation = (((this.currentAnimation | 0) + 1) | 0);
    }
  }; 

  function Player_Shockwave (player, enemyList) {
    this.Stun(0.25);
    if (+this.superShockwave < +this.superShockwaveHoldtime) {
      this.energy = +this.energy - 30;
      $T06().CameraShake(0.1, 5);
      this.OnPlayerShockwave((this.collider).get_Center().MemberwiseClone(), this.shockwaveEffectiveDistanceSquared, ((this.shockwaveEffectiveDistance) | 0), 1);
    } else {
      this.energy = +this.energy - 50;
      $T06().CameraShake(0.15, 10);
      this.OnPlayerShockwave((this.collider).get_Center().MemberwiseClone(), this.shockwaveEffectiveDistanceSquared, ((this.shockwaveEffectiveDistance) | 0), 2);
    }
    this.superShockwave = 0;
  }; 

  function Player_Stun (duration) {
    this.stunTime = +this.stunTime + +duration;
    this.inputEnabled = false;
  }; 

  function Player_toString () {
    return this.$name;
  }; 

  function Player_Update () {
    this.prevInput = this.input.MemberwiseClone();
    this.prevAttacking = this.attacking;
    this.prevWalled = this.walled.MemberwiseClone();
    this.input = $T07().get_Zero().MemberwiseClone();
    this.frameInput = false;
    if (!(!(((+this.velocity.X >= 0) && 
            $T06().get_GetRightKeyUp()) || 
          ((+this.velocity.X <= 0) && 
            $T06().get_GetLeftKeyUp())) && (!$T06().get_GetRightKeyUp() || 
          !$T06().get_GetLeftKeyUp()))) {
      this.wallJumpTimer = 0;
    }
    if (this.inputEnabled) {
      if ($T06().get_GetLeftKey()) {
        if (!(!((((this.walled).get_Bottom() | 0) > 0) || 
              !(this.walled).get_Horizontal()) && (+this.wallJumpTimer <= +this.walljumpHoldtime))) {
          this.input.X = (((this.input.X | 0) - 1) | 0);
          this.direction = $T08().Left;
        }
        this.wallJumpTimer = +this.wallJumpTimer + +$T06().get_DeltaTime();
      }
      if ($T06().get_GetRightKey()) {
        if (!(!((((this.walled).get_Bottom() | 0) > 0) || 
              !(this.walled).get_Horizontal()) && (+this.wallJumpTimer <= +this.walljumpHoldtime))) {
          this.input.X = (((this.input.X | 0) + 1) | 0);
          this.direction = $T08().Right;
        }
        this.wallJumpTimer = +this.wallJumpTimer + +$T06().get_DeltaTime();
      }
      if (this.direction !== $T08().Forward) {
        if ($T06().get_GetUpKey()) {
          this.input.Y = (((this.input.Y | 0) + 1) | 0);
        }
        if ($T06().get_GetDownKey()) {
          this.input.Y = (((this.input.Y | 0) - 1) | 0);
        }
        if ($T06().get_GetShieldKey()) {
          if (+this.shield <= 0) {
            this.shieldDepleted = true;
            this.shielded = false;
          } else if (!this.shieldDepleted) {
            this.shielded = true;
          }
        } else {
          this.shieldDepleted = this.shielded = false;
        }
        if (!(!$T06().get_GetShockwaveKey() || (+this.energy <= (+this.maxShield * +this.energyUsableMargin)))) {
          this.superShockwave = +this.superShockwave + +$T06().get_DeltaTime();
        } else if (+this.superShockwave > 0) {
          this.Shockwave(this, $T06().enemyList);
          this.interruptAttack = true;
          this.superShockwave = 0;
        }
        if (!(!$T06().get_GetPotionKeyDown() || ((this.potions | 0) <= 0))) {
          this.healthRechargeRate = +this.healthRechargeRate + +this.potionRechargeRate;
          if (+this.potionTime >= +((+this.potionRechargeTime / 2))) {
            this.potionTime = +this.potionTime + +((+this.potionRechargeTime / 2));
          } else {
            this.potionTime = +this.potionRechargeTime;
          }
          this.potions = (((this.potions | 0) - 1) | 0);
          $T21().potionBar.Update(this.potions);
        }
        if ($T06().get_GetJumpKey()) {
          if (!((+this.wallJumpTimer > +this.walljumpHoldtime) || 
              (((this.walled).get_Bottom() | 0) > 0) || 
              !(this.walled).get_Horizontal() || (!$T06().get_GetRightKey() && 
                !$T06().get_GetLeftKey()))) {
            if (((this.walled).get_Left() | 0) > 0) {
              this.velocity.X = +this.speed;
              this.position.X = +this.position.X + 1;
              this.direction = $T08().Right;
              this.input.X = this.prevInput.X = 1;
            } else if (((this.walled).get_Right() | 0) > 0) {
              this.velocity.X = -this.speed;
              this.position.X = +this.position.X - 1;
              this.direction = $T08().Left;
              this.input.X = this.prevInput.X = -1;
            }
            this.wallJumpTimer = 1;
            this.jumpTime = +this.jumpTime + +$T06().get_DeltaTime();
            this.isRunning = true;
          } else if (!((((this.walled).get_Top() | 0) > 0) || (+this.jumpTime >= +this.jumpTimeMax))) {
            if (+this.jumpTime > 0) {
              this.jumpTime = +this.jumpTime + +$T06().get_DeltaTime();
            } else if (((this.walled).get_Bottom() | 0) > 0) {
              this.jumpTime = +this.jumpTime + +$T06().get_DeltaTime();
            }
            this.wallJumpTimer = +this.wallJumpTimer + +$T06().get_DeltaTime();
          } else {
            this.jumpTime = 0;
          }
        } else {
          this.jumpTime = 0;
        }
        if (!(!$T06().get_GetJumpKeyDown() || (((this.walled).get_Bottom() | 0) > 0))) {
          this.interruptAttack = true;
        }
        if (!((+this.rollTime > 0) || 
            (((this.walled).get_Bottom() | 0) <= 0) || !$T06().get_GetRollKeyDown())) {
          this.inputEnabled = false;
          this.rollTime = +this.rollTimeMax;
        }
        if ($T06().get_GetAttackKeyDown()) {
          if (this.attacking === $T0D().No) {
            this.Attack($T0D().Attack1);
          } else {
            this.attackImmediately = true;
          }
        }
      } else {
        this.shielded = false;
        this.jumpTime = 0;
        this.superShockwave = 0;
      }
    }
    if ($T24().op_Inequality(
        $T06().get_GetKeyboardState(), 
        $T06().get_GetPreviousKeyboardState()
      )) {
      this.frameInput = true;
    }
    if (!(!$T07().op_Inequality(this.input, this.prevInput) || !$T07().op_Inequality(this.input, $T07().get_Zero()))) {
      this.interruptAttack = true;
    }
    if (this.interruptAttack) {
      this.attacking = $T0D().No;
      this.attackCollider = $T03().get_Empty().MemberwiseClone();
      this.interruptAttack = false;
    }
    if (+this.invulnerable > 0) {
      this.invulnerable = +this.invulnerable - +$T06().get_DeltaTime();
    }
    if (+this.invulnerableOnTouch > 0) {
      this.invulnerableOnTouch = +this.invulnerableOnTouch - +$T06().get_DeltaTime();
    }
    if (+this.stunTime > 0) {
      this.stunTime = +this.stunTime - +$T06().get_DeltaTime();
      if (+this.stunTime <= 0) {
        this.inputEnabled = true;
        this.stunTime = 0;
      }
    }
    if (!this.shielded) {
      if (+this.shield < +this.maxShield) {
        this.shield = +this.shield + (+this.shieldRechargeRate * +$T06().get_DeltaTime());
        if (+this.shield >= +this.maxShield) {
          this.shield = +this.maxShield;
        }
      }
    }
    if (+this.energy < +this.maxEnergy) {
      this.energy = +this.energy + (+this.energyRechargeRate * +$T06().get_DeltaTime());
      if (+this.energy >= +this.maxEnergy) {
        this.energy = +this.maxEnergy;
      }
    }
    if (+this.potionTime > 0) {
      this.potionTime = +this.potionTime - +$T06().get_DeltaTime();
      if (+this.potionTime <= 0) {
        this.healthRechargeRate = +this.baseHealing;
      }
    }
    if (+this.health < +this.maxHealth) {
      this.health = +this.health + (+this.healthRechargeRate * +$T06().get_DeltaTime());
      if (+this.health >= +this.maxHealth) {
        this.health = +this.maxHealth;
      }
    }
    this.Movement();
    this.CalculateMovement();
    if (this.collision) {
      this.Collision($T06().collisionObjects);
    }
    this.Animate();
    return true;
  }; 

  function Player_WalljumpDebug (variableYo) {
    $T06().WriteLine();
    $T06().WriteLine(JSIL.ConcatString("       walljumped ", $T14().$Box(variableYo)));
    $T06().WriteLine(JSIL.ConcatString("         velocity: ", this.velocity));
    $T06().WriteLine(JSIL.ConcatString("        direction: ", this.direction));
    $T06().WriteLine(JSIL.ConcatString("wallJumpTimer: ", $T02().$Box(this.wallJumpTimer)));
    $T06().WriteLine(JSIL.ConcatString("            input: ", this.input));
    $T06().WriteLine(JSIL.ConcatString("        prevInput: ", this.prevInput));
    $T06().WriteLine(JSIL.ConcatString("           Walled: ", this.get_Walled()));
    $T06().WriteLine(JSIL.ConcatString("         position: ", this.position));
    $T06().WriteLine(JSIL.ConcatString("         left key: ", $T1D().$Box($T06().get_GetLeftKey())));
    $T06().WriteLine(JSIL.ConcatString("        right key: ", $T1D().$Box($T06().get_GetRightKey())));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Player", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm00.TypeRef("PlayerSettings"), $.Single
        ]), 
      Player__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnPlayerAttack", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.Irbis+AttackEventDelegate")), 
      Player_add_OnPlayerAttack
    );

    $.Method({Static:false, Public:true }, "add_OnPlayerShockwave", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.Irbis+ShockwaveEventDelegate")), 
      Player_add_OnPlayerShockwave
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Void, 
      Player_Animate
    );

    $.Method({Static:false, Public:true }, "Attack", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.Attacking")), 
      Player_Attack
    );

    $.Method({Static:false, Public:true }, "AttackMovement", 
      JSIL.MethodSignature.Void, 
      Player_AttackMovement
    );

    $.Method({Static:false, Public:true }, "CalculateMovement", 
      JSIL.MethodSignature.Void, 
      Player_CalculateMovement
    );

    $.Method({Static:false, Public:true }, "ClearCollision", 
      JSIL.MethodSignature.Void, 
      Player_ClearCollision
    );

    $.Method({Static:false, Public:true }, "Collision", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.ICollisionObject")])), 
      Player_Collision
    );

    $.Method({Static:false, Public:true }, "Combat", 
      JSIL.MethodSignature.Void, 
      Player_Combat
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Player_Draw
    );

    $.Method({Static:false, Public:true }, "get_Collider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Player_get_Collider
    );

    $.Method({Static:false, Public:true }, "get_Mass", 
      JSIL.MethodSignature.Return($.Single), 
      Player_get_Mass
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Player_get_Name
    );

    $.Method({Static:false, Public:true }, "get_TrueCenter", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_get_TrueCenter
    );

    $.Method({Static:false, Public:true }, "get_Walled", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Wall")), 
      Player_get_Walled
    );

    $.Method({Static:false, Public:true }, "Heal", 
      JSIL.MethodSignature.Action($.Single), 
      Player_Heal
    );

    $.Method({Static:false, Public:true }, "Hurt", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      Player_Hurt
    );

    $.Method({Static:false, Public:true }, "HurtOnTouch", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      Player_HurtOnTouch
    );

    $.Method({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm00.TypeRef("PlayerSettings")), 
      Player_Load
    );

    $.Method({Static:false, Public:true }, "Movement", 
      JSIL.MethodSignature.Void, 
      Player_Movement
    );

    $.Method({Static:false, Public:true }, "Noclip", 
      JSIL.MethodSignature.Void, 
      Player_Noclip
    );

    $.Method({Static:false, Public:false}, "Player_OnPlayerAttack", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Irbis.Attacking")]), 
      Player_Player_OnPlayerAttack
    );

    $.Method({Static:false, Public:false}, "Player_OnPlayerShockwave", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Int32, 
          $.Int32, $.Single
        ]), 
      Player_Player_OnPlayerShockwave
    );

    $.Method({Static:false, Public:true }, "PlayerEventsReset", 
      JSIL.MethodSignature.Void, 
      Player_PlayerEventsReset
    );

    $.Method({Static:false, Public:true }, "remove_OnPlayerAttack", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.Irbis+AttackEventDelegate")), 
      Player_remove_OnPlayerAttack
    );

    $.Method({Static:false, Public:true }, "remove_OnPlayerShockwave", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Irbis.Irbis+ShockwaveEventDelegate")), 
      Player_remove_OnPlayerShockwave
    );

    $.Method({Static:false, Public:true }, "RemoveCollision", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Irbis.ICollisionObject")]), 
      Player_RemoveCollision
    );

    $.Method({Static:false, Public:true }, "Respawn", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_Respawn
    );

    $.Method({Static:false, Public:true }, "SetAnimation", 
      JSIL.MethodSignature.Void, 
      Player_SetAnimation$00
    );

    $.Method({Static:false, Public:true }, "SetAnimation", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      Player_SetAnimation$01
    );

    $.Method({Static:false, Public:true }, "Shockwave", 
      new JSIL.MethodSignature(null, [$.Type, $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Irbis.IEnemy")])]), 
      Player_Shockwave
    );

    $.Method({Static:false, Public:true }, "Stun", 
      JSIL.MethodSignature.Action($.Single), 
      Player_Stun
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Player_toString
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      Player_Update
    );

    $.Method({Static:false, Public:true }, "WalljumpDebug", 
      JSIL.MethodSignature.Action($.Int32), 
      Player_WalljumpDebug
    );

    $.Field({Static:false, Public:false}, "walled", $asm00.TypeRef("Wall"));

    $.Field({Static:false, Public:false}, "collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "mass", $.Single);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "prevWalled", $asm00.TypeRef("Wall"));

    $.Field({Static:false, Public:false}, "tex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "shieldTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "baseVelocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "displayRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "shieldSourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "animationSourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "testCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "colliderOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "colliderSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "shieldOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "animationFrame", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:true }, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "maxVelocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "terminalVelocity", $.Single);

    $.Field({Static:false, Public:true }, "hurtVelocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "health", $.Single);

    $.Field({Static:false, Public:true }, "maxHealth", $.Single);

    $.Field({Static:false, Public:true }, "shield", $.Single);

    $.Field({Static:false, Public:true }, "maxShield", $.Single);

    $.Field({Static:false, Public:true }, "energy", $.Single);

    $.Field({Static:false, Public:true }, "maxEnergy", $.Single);

    $.Field({Static:false, Public:true }, "invulnerable", $.Single);

    $.Field({Static:false, Public:true }, "invulnerableOnTouch", $.Single);

    $.Field({Static:false, Public:true }, "invulnerableMaxTime", $.Single);

    $.Field({Static:false, Public:true }, "shielded", $.Boolean);

    $.Field({Static:false, Public:true }, "energyed", $.Boolean);

    $.Field({Static:false, Public:true }, "energyUsableMargin", $.Single);

    $.Field({Static:false, Public:true }, "attackHit", $.Boolean);

    $.Field({Static:false, Public:true }, "shieldRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "energyRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "healthRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "potionRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "potionRechargeTime", $.Single);

    $.Field({Static:false, Public:true }, "maxNumberOfPotions", $.Int32);

    $.Field({Static:false, Public:true }, "baseHealing", $.Single);

    $.Field({Static:false, Public:false}, "potions", $.Int32);

    $.Field({Static:false, Public:false}, "potionTime", $.Single);

    $.Field({Static:false, Public:true }, "shieldHealingPercentage", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveEffectiveDistance", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveEffectiveDistanceSquared", $.Int32);

    $.Field({Static:false, Public:true }, "shockwaveStunTime", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "speed", $.Single);

    $.Field({Static:false, Public:true }, "airSpeed", $.Single);

    $.Field({Static:false, Public:true }, "attackMovementSpeed", $.Single);

    $.Field({Static:false, Public:false}, "jumpTime", $.Single);

    $.Field({Static:false, Public:true }, "jumpTimeMax", $.Single);

    $.Field({Static:false, Public:false}, "timeSinceLastFrame", $.Single);

    $.Field({Static:false, Public:false}, "idleTime", $.Single);

    $.Field({Static:false, Public:true }, "idleTimeMax", $.Single);

    $.Field({Static:false, Public:false}, "specialTime", $.Single);

    $.Field({Static:false, Public:false}, "specialIdleTime", $.Single);

    $.Field({Static:false, Public:false}, "currentFrame", $.Int32);

    $.Field({Static:false, Public:false}, "currentShieldFrame", $.Int32);

    $.Field({Static:false, Public:true }, "combat", $.Boolean);

    $.Field({Static:false, Public:true }, "stunTime", $.Single);

    $.Field({Static:false, Public:true }, "currentAnimation", $.Int32);

    $.Field({Static:false, Public:false}, "previousAnimation", $.Int32);

    $.Field({Static:false, Public:true }, "animationSpeed", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Field({Static:false, Public:true }, "animationFrames", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "animationNoLoop", $.Boolean);

    $.Field({Static:false, Public:false}, "nextAnimation", $.Int32);

    $.Field({Static:false, Public:true }, "shieldAnimationSpeed", $.Single);

    $.Field({Static:false, Public:false}, "shieldDepleted", $.Boolean);

    $.Field({Static:false, Public:false}, "shieldtimeSinceLastFrame", $.Single);

    $.Field({Static:false, Public:true }, "depth", $.Single);

    $.Field({Static:false, Public:true }, "shieldDepth", $.Single);

    $.Field({Static:false, Public:false}, "superShockwave", $.Single);

    $.Field({Static:false, Public:true }, "superShockwaveHoldtime", $.Single);

    $.Field({Static:false, Public:true }, "walljumpHoldtime", $.Single);

    $.Field({Static:false, Public:true }, "input", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "prevInput", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "isRunning", $.Boolean);

    $.Field({Static:false, Public:false}, "frameInput", $.Boolean);

    $.Field({Static:false, Public:true }, "inputEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "climbablePixels", $.Int32);

    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:true }, "attackDirection", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:true }, "location", $asm00.TypeRef("Irbis.Location"));

    $.Field({Static:false, Public:true }, "activity", $asm00.TypeRef("Irbis.Activity"));

    $.Field({Static:false, Public:true }, "previousActivity", $asm00.TypeRef("Irbis.Activity"));

    $.Field({Static:false, Public:true }, "rollTime", $.Single);

    $.Field({Static:false, Public:false}, "rollSpeed", $.Single);

    $.Field({Static:false, Public:false}, "rollTimeMax", $.Single);

    $.Field({Static:false, Public:true }, "attacking", $asm00.TypeRef("Irbis.Attacking"));

    $.Field({Static:false, Public:true }, "prevAttacking", $asm00.TypeRef("Irbis.Attacking"));

    $.Field({Static:false, Public:true }, "attackDamage", $.Single);

    $.Field({Static:false, Public:true }, "attack1Damage", $.Single);

    $.Field({Static:false, Public:true }, "attack2Damage", $.Single);

    $.Field({Static:false, Public:true }, "attackID", $.Int32);

    $.Field({Static:false, Public:true }, "lastAttackID", $.Int32);

    $.Field({Static:false, Public:false}, "attackIDtracker", $.Int32);

    $.Field({Static:false, Public:false}, "attackMovementFrames", $.Int32);

    $.Field({Static:false, Public:false}, "attackAnimation", $.Int32);

    $.Field({Static:false, Public:false}, "prevAttackAnimation", $.Int32);

    $.Field({Static:false, Public:true }, "attackColliderWidth", $.Int32);

    $.Field({Static:false, Public:true }, "attackColliderHeight", $.Int32);

    $.Field({Static:false, Public:true }, "wallJumpTimer", $.Single);

    $.Field({Static:false, Public:true }, "attackImmediately", $.Boolean);

    $.Field({Static:false, Public:true }, "interruptAttack", $.Boolean);

    $.Field({Static:false, Public:true }, "debugspeed", $.Single);

    $.Field({Static:true , Public:true }, "movementLerpBuildup", $.Single, 10);

    $.Field({Static:true , Public:true }, "movementLerpSlowdown", $.Single, 100);

    $.Field({Static:true , Public:true }, "movementLerpAir", $.Single, 5);

    $.Field({Static:false, Public:true }, "enchantList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Enchant")]));

    $.Field({Static:false, Public:false}, "amountToMove", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "negAmountToMove", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "testPos", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "collidedContains", $.Boolean);

    $.Field({Static:false, Public:true }, "collided", $asm00.TypeRef("Collided"));

    $.Field({Static:false, Public:true }, "heading", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "attackCollider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "collisionCheckDistanceSqr", $.Single);

    $.Field({Static:false, Public:false}, "collision", $.Boolean);

    $.Field({Static:false, Public:false}, "noclip", $.Boolean);

    $.Field({Static:false, Public:false}, "shieldedColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "normalColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "renderColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "OnPlayerAttack", $asm00.TypeRef("Irbis.Irbis+AttackEventDelegate"));

    $.Field({Static:false, Public:false}, "OnPlayerShockwave", $asm00.TypeRef("Irbis.Irbis+ShockwaveEventDelegate"));


    function Player__cctor () {
      $thisType.movementLerpBuildup = 10;
      $thisType.movementLerpSlowdown = 100;
      $thisType.movementLerpAir = 5;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Player__cctor
    );

    $.Property({Static:false, Public:true }, "Walled", $asm00.TypeRef("Wall"));

    $.Property({Static:false, Public:true }, "Collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "TrueCenter", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Mass", $.Single);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Event({Static:false, Public:true }, "OnPlayerAttack", $asm00.TypeRef("Irbis.Irbis+AttackEventDelegate"));

    $.Event({Static:false, Public:true }, "OnPlayerShockwave", $asm00.TypeRef("Irbis.Irbis+ShockwaveEventDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct PlayerSettings */ 

(function PlayerSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm02.System.Single))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm02.System.Int32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Boolean))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.IO.StreamWriter)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.System.IO.TextWriter)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Boolean), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.PlayerSettings, [$asm02.System.Boolean]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.IO.StreamWriter, [$asm02.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.String")))) ();
  };


  function PlayerSettings__ctor$00 (useDefaults) {
    if (useDefaults) {
      this.attackKey = $T01().Enter;
      this.altAttackKey = $T01().Enter;
      this.shockwaveKey = $T01().E;
      this.altShockwaveKey = $T01().E;
      this.shieldKey = $T01().Q;
      this.altShieldKey = $T01().Q;
      this.jumpKey = $T01().Space;
      this.altJumpKey = $T01().Space;
      this.upKey = $T01().W;
      this.altUpKey = $T01().Up;
      this.downKey = $T01().S;
      this.altDownKey = $T01().Down;
      this.leftKey = $T01().A;
      this.altLeftKey = $T01().Left;
      this.rightKey = $T01().D;
      this.altRightKey = $T01().Right;
      this.rollKey = $T01().LeftShift;
      this.altRollKey = $T01().LeftShift;
      this.potionKey = $T01().F;
      this.altPotionKey = $T01().F;
      this.useKey = $T01().R;
      this.altUseKey = $T01().R;
      this.boundingBox = $T02().get_Empty().MemberwiseClone();
      this.cameraLerpSetting = true;
      this.cameraLerpSpeed = 15;
      this.cameraSwingSetting = false;
      this.swingMagnitude = 10;
      this.swingDuration = 0.1;
      this.cameraShakeSetting = true;
      this.fullscreen = false;
      this.screenScale = 0;
      this.resolution = $T03().get_Zero().MemberwiseClone();
      this.vSync = false;
      this.masterAudioLevel = 100;
      this.musicLevel = 100;
      this.soundEffectsLevel = 100;
      this.timerAccuracy = "00.00";
      this.idleTimeMax = 30;
      this.superShockwaveHoldtime = 0.15;
      this.walljumpHoldtime = 0.1;
      this.minSqrDetectDistance = 1000000;
      this.attack1Damage = 45;
      this.attack2Damage = 45;
      this.speed = 275;
      this.terminalVelocity = 5000;
      this.jumpTimeMax = 0.25;
      this.colliderOffset = $S00().Construct(54, 63);
      this.colliderSize = $S00().Construct(20, 48);
      this.attackColliderWidth = 40;
      this.attackColliderHeight = 30;
      this.maxHealth = 100;
      this.maxShield = 50;
      this.maxEnergy = 50;
      this.shockwaveEffectiveDistance = 100;
      this.shockwaveStunTime = 2;
      this.shockwaveKnockback = $S01().Construct(5, -2.5);
      this.invulnerableMaxTime = 0.1;
      this.shieldRechargeRate = 5;
      this.energyRechargeRate = 10;
      this.healthRechargeRate = 0.5;
      this.potionRechargeRate = 15;
      this.potionRechargeTime = 3;
      this.maxNumberOfPotions = 3;
      this.shieldHealingPercentage = 0.25;
      this.energyUsableMargin = 0.95;
      this.animationSpeed = JSIL.Array.New($T05(), 30);

      for (var i = 0; i < (this.animationSpeed.length | 0); i = ((i + 1) | 0)) {
        this.animationSpeed[i] = 0.1;
      }
      this.animationFrames = JSIL.Array.New($T06(), 30);
      this.animationFrames[0] = 3;
      this.animationFrames[1] = 15;
      this.animationFrames[2] = 3;
      this.animationFrames[3] = 15;
      this.animationFrames[4] = 15;
      this.animationFrames[5] = 15;
      this.animationFrames[6] = 15;
      this.animationFrames[7] = 9;
      this.animationFrames[8] = 9;
      this.animationFrames[9] = 5;
      this.animationFrames[10] = 5;
      this.animationFrames[11] = 0;
      this.animationFrames[12] = 0;
      this.animationFrames[13] = 1;
      this.animationFrames[14] = 1;
      this.animationFrames[15] = 0;
      this.animationFrames[16] = 0;
      this.animationFrames[17] = 2;
      this.animationFrames[18] = 2;
      this.animationFrames[19] = 2;
      this.animationFrames[20] = 2;
      this.animationFrames[21] = 2;
      this.animationFrames[22] = 2;

      for (i = 23; i < (this.animationFrames.length | 0); i = ((i + 1) | 0)) {
        this.animationFrames[i] = 0;
      }
      this.shieldAnimationSpeed = 0.05;
      this.characterHeight = 12;
      this.characterWidth = JSIL.Array.New($T06(), 100);
      var twosCol = JSIL.Array.New($T06(), [18, 44, 62, 82, 83, 86]);
      var threesCol = JSIL.Array.New($T06(), [47, 84, 85, 87, 90, 91, 93]);
      var foursCol = JSIL.Array.New($T06(), [1, 45, 70, 71, 80, 81, 94]);
      var fivesCol = JSIL.Array.New($T06(), [41, 88, 92]);
      var sixesCol = JSIL.Array.New($T06(), [5, 14, 15, 19, 21, 28, 54, 55, 57, 59, 60, 63, 65, 67, 72, 73, 75, 76, 77]);
      var sevensCol = JSIL.Array.New($T06(), [0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 16, 17, 20, 23, 24, 25, 26, 27, 30, 35, 36, 37, 38, 39, 40, 42, 43, 46, 49, 50, 51, 52, 53, 56, 61, 74, 78]);
      var eightsCol = JSIL.Array.New($T06(), [10, 29, 31, 32, 33, 34, 48, 68, 69, 99]);
      var ninesCol = JSIL.Array.New($T06(), [64, 79]);
      var tensCol = JSIL.Array.New($T06(), [22, 58, 89, 95]);
      var elevenCol = JSIL.Array.New($T06(), [66]);
      var twelveCol = JSIL.Array.New($T06(), [32]);
      var array = this.characterWidth;

      for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = -1;
      }
      array = twosCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 2;
      }
      array = threesCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 3;
      }
      array = foursCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 4;
      }
      array = fivesCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 5;
      }
      array = sixesCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 6;
      }
      array = sevensCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 7;
      }
      array = eightsCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 8;
      }
      array = ninesCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 9;
      }
      array = tensCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 10;
      }
      array = elevenCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 11;
      }
      array = twelveCol;

      for (j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        i = (array[j] | 0);
        this.characterWidth[i] = 12;
      }
      this.debug = 0;
    } else {
      this.attackKey = $T01().Enter;
      this.altAttackKey = $T01().Enter;
      this.shockwaveKey = $T01().E;
      this.altShockwaveKey = $T01().E;
      this.shieldKey = $T01().Q;
      this.altShieldKey = $T01().Q;
      this.jumpKey = $T01().Space;
      this.altJumpKey = $T01().Space;
      this.upKey = $T01().W;
      this.altUpKey = $T01().Up;
      this.downKey = $T01().S;
      this.altDownKey = $T01().Down;
      this.leftKey = $T01().A;
      this.altLeftKey = $T01().Left;
      this.rightKey = $T01().D;
      this.altRightKey = $T01().Right;
      this.rollKey = $T01().LeftShift;
      this.altRollKey = $T01().LeftShift;
      this.potionKey = $T01().F;
      this.altPotionKey = $T01().F;
      this.useKey = $T01().R;
      this.altUseKey = $T01().R;
      this.boundingBox = $T02().get_Empty().MemberwiseClone();
      this.cameraLerpSetting = false;
      this.cameraLerpSpeed = 0;
      this.cameraSwingSetting = false;
      this.swingMagnitude = 0;
      this.swingDuration = 0;
      this.cameraShakeSetting = false;
      this.fullscreen = false;
      this.screenScale = 0;
      this.resolution = $T03().get_Zero().MemberwiseClone();
      this.vSync = false;
      this.masterAudioLevel = 0;
      this.musicLevel = 0;
      this.soundEffectsLevel = 0;
      this.timerAccuracy = "00.";
      this.idleTimeMax = 0;
      this.superShockwaveHoldtime = 0;
      this.walljumpHoldtime = 0;
      this.minSqrDetectDistance = 0;
      this.attack1Damage = 0;
      this.attack2Damage = 0;
      this.speed = 0;
      this.terminalVelocity = 0;
      this.jumpTimeMax = 0;
      this.colliderSize = this.colliderOffset = $T03().get_Zero().MemberwiseClone();
      this.attackColliderWidth = 0;
      this.attackColliderHeight = 0;
      this.maxHealth = 0;
      this.maxShield = 0;
      this.maxEnergy = 0;
      this.shockwaveEffectiveDistance = 0;
      this.shockwaveStunTime = 0;
      this.shockwaveKnockback = $S01().Construct(0, 0);
      this.invulnerableMaxTime = 0;
      this.shieldRechargeRate = 0;
      this.energyRechargeRate = 0;
      this.healthRechargeRate = 0;
      this.potionRechargeRate = 0;
      this.potionRechargeTime = 0;
      this.maxNumberOfPotions = 0;
      this.shieldHealingPercentage = 0;
      this.energyUsableMargin = 0;
      this.animationSpeed = JSIL.Array.New($T05(), 0);

      for (i = 0; i < (this.animationSpeed.length | 0); i = ((i + 1) | 0)) {
        this.animationSpeed[i] = 0;
      }
      this.animationFrames = JSIL.Array.New($T06(), 0);

      for (i = 0; i < (this.animationFrames.length | 0); i = ((i + 1) | 0)) {
        this.animationFrames[i] = 0;
      }
      this.shieldAnimationSpeed = 0.05;
      this.characterHeight = 12;
      this.characterWidth = JSIL.Array.New($T06(), 0);

      for (i = 0; i < (this.characterWidth.length | 0); i = ((i + 1) | 0)) {
        this.characterWidth[i] = 0;
      }
      this.debug = 1;
    }
  }; 

  function PlayerSettings__ctor$01 (settings) {
    this.attackKey = settings.attackKey;
    this.altAttackKey = settings.altAttackKey;
    this.shockwaveKey = settings.shockwaveKey;
    this.altShockwaveKey = settings.altShockwaveKey;
    this.shieldKey = settings.shieldKey;
    this.altShieldKey = settings.altShieldKey;
    this.jumpKey = settings.jumpKey;
    this.altJumpKey = settings.altJumpKey;
    this.upKey = settings.upKey;
    this.altUpKey = settings.altUpKey;
    this.downKey = settings.downKey;
    this.altDownKey = settings.altDownKey;
    this.leftKey = settings.leftKey;
    this.altLeftKey = settings.altLeftKey;
    this.rightKey = settings.rightKey;
    this.altRightKey = settings.altRightKey;
    this.rollKey = settings.rollKey;
    this.altRollKey = settings.altRollKey;
    this.potionKey = settings.potionKey;
    this.altPotionKey = settings.altPotionKey;
    this.useKey = settings.useKey;
    this.altUseKey = settings.altUseKey;
    this.boundingBox = settings.boundingBox.MemberwiseClone();
    this.cameraLerpSetting = settings.cameraLerpSetting;
    this.cameraLerpSpeed = +settings.cameraLerpSpeed;
    this.cameraSwingSetting = settings.cameraSwingSetting;
    this.swingMagnitude = +settings.swingMagnitude;
    this.swingDuration = +settings.swingDuration;
    this.cameraShakeSetting = settings.cameraShakeSetting;
    this.fullscreen = settings.fullscreen;
    this.screenScale = +settings.screenScale;
    this.resolution = settings.resolution.MemberwiseClone();
    this.vSync = settings.vSync;
    this.masterAudioLevel = +settings.masterAudioLevel;
    this.musicLevel = +settings.musicLevel;
    this.soundEffectsLevel = +settings.soundEffectsLevel;
    this.timerAccuracy = settings.timerAccuracy;
    this.idleTimeMax = +settings.idleTimeMax;
    this.superShockwaveHoldtime = +settings.superShockwaveHoldtime;
    this.walljumpHoldtime = +settings.walljumpHoldtime;
    this.minSqrDetectDistance = +settings.minSqrDetectDistance;
    this.attack1Damage = +settings.attack1Damage;
    this.attack2Damage = +settings.attack2Damage;
    this.speed = +settings.speed;
    this.terminalVelocity = +settings.terminalVelocity;
    this.jumpTimeMax = +settings.jumpTimeMax;
    this.colliderOffset = settings.colliderOffset.MemberwiseClone();
    this.colliderSize = settings.colliderSize.MemberwiseClone();
    this.attackColliderWidth = (settings.attackColliderWidth | 0);
    this.attackColliderHeight = (settings.attackColliderHeight | 0);
    this.maxHealth = +settings.maxHealth;
    this.maxShield = +settings.maxShield;
    this.maxEnergy = +settings.maxEnergy;
    this.shockwaveEffectiveDistance = +settings.shockwaveEffectiveDistance;
    this.shockwaveStunTime = +settings.shockwaveStunTime;
    this.shockwaveKnockback = settings.shockwaveKnockback.MemberwiseClone();
    this.invulnerableMaxTime = +settings.invulnerableMaxTime;
    this.shieldRechargeRate = +settings.shieldRechargeRate;
    this.energyRechargeRate = +settings.energyRechargeRate;
    this.healthRechargeRate = +settings.healthRechargeRate;
    this.potionRechargeRate = +settings.potionRechargeRate;
    this.potionRechargeTime = +settings.potionRechargeTime;
    this.maxNumberOfPotions = (settings.maxNumberOfPotions | 0);
    this.shieldHealingPercentage = +settings.shieldHealingPercentage;
    this.energyUsableMargin = +settings.energyUsableMargin;
    this.animationSpeed = settings.animationSpeed;
    this.animationFrames = settings.animationFrames;
    this.shieldAnimationSpeed = +settings.shieldAnimationSpeed;
    this.characterHeight = (settings.characterHeight | 0);
    this.characterWidth = settings.characterWidth;
    this.debug = (settings.debug | 0);
  }; 

  function PlayerSettings_Load (filename) {
    $T0A().WriteLine(("loading " + filename + "..."));
    var checker = $S02().Construct();
    var playerSettings = $S03().Construct(true);
    return playerSettings;
  }; 

  function PlayerSettings_Save$02 (settings, filename) {
    $T0A().WriteLine(("saving " + filename + "..."));
    var writer = $S04().Construct(filename);
    $S05().CallVirtual("WriteLine", null, writer, ";lines beginning with \";\" and empty lines are ignored");
    $S05().CallVirtual("WriteLine", null, writer, ";delete this file and relaunch to return everything to defaults");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";KEY BINDS");
    $S05().CallVirtual("WriteLine", null, writer, ";a list of all available keys can be found here:");
    $S05().CallVirtual("WriteLine", null, writer, "; https://msdn.microsoft.com/en-us/library/microsoft.xna.framework.input.keys.aspx");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attackKey=", settings.attackKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altAttackKey=", settings.altAttackKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveKey=", settings.shockwaveKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altShockwaveKey=", settings.altShockwaveKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldKey=", settings.shieldKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altShieldKey=", settings.altShieldKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("jumpKey=", settings.jumpKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altJumpKey=", settings.altJumpKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("upKey=", settings.upKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altUpKey=", settings.altUpKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("downKey=", settings.downKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altDownKey=", settings.altDownKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("leftKey=", settings.leftKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altLeftKey=", settings.altLeftKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("rightKey=", settings.rightKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altRightKey=", settings.altRightKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("rollKey=", settings.rollKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altRollKey=", settings.altRollKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("potionKey=", settings.potionKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altPotionKey=", settings.altPotionKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("useKey=", settings.useKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altUseKey=", settings.altUseKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";CAMERA SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";The camera will move when the player leaves this area on the screen");
    $S05().CallVirtual("WriteLine", null, writer, ";{int X location, int Y location, int Width, int Height})");
    $S05().CallVirtual("WriteLine", null, writer, ";where location refers to the center of the rectangle");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["boundingBox={X:", $T06().$Box((settings.boundingBox).get_Center().X), " Y:", $T06().$Box((settings.boundingBox).get_Center().Y), " Width:", $T06().$Box(settings.boundingBox.Width), " Height:", $T06().$Box(settings.boundingBox.Height), "}"])));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Do you want the camera to smoothly trail the player?");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraLerpSetting=", $T00().$Box(settings.cameraLerpSetting)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How fast should the camera lerp?");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraLerpSpeed=", $T05().$Box(settings.cameraLerpSpeed)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Turn off camera \"swing\" (the motion the camera makes when you attack and miss)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraSwingSetting=", $T00().$Box(settings.cameraSwingSetting)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How far should the camera swing? (pixels)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("swingMagnitude=", $T05().$Box(settings.swingMagnitude)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How long should that swing take (this is the time it takes to travel the above pixels,");
    $S05().CallVirtual("WriteLine", null, writer, ";the time it takes to return to the normal camera position is double this number) (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("swingDuration=", $T05().$Box(settings.swingDuration)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Turn off camera shake");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraShakeSetting=", $T00().$Box(settings.cameraShakeSetting)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";VIDEO SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";toggles windowed/fullscreen mode");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("fullscreen=", $T00().$Box(settings.fullscreen)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";the scale of the window");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("screenScale=", $T05().$Box(settings.screenScale)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";how much of the world will be drawn");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("resolution=", settings.resolution));
    $S05().CallVirtual("WriteLine", null, writer, ";the actual size of the window is a combination of resolution and scale");
    $S05().CallVirtual("WriteLine", null, writer, ";for example, a 960x540 resolution at 2x scale gives you a 1920x1080 window");
    $S05().CallVirtual("WriteLine", null, writer, ";with each in-game pixel using 2x2 pixels on your screen");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("vSync=", $T00().$Box(settings.vSync)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";AUDIO SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("masterAudioLevel=", $T05().$Box(settings.masterAudioLevel)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("musicLevel=", $T05().$Box(settings.musicLevel)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("soundEffectsLevel=", $T05().$Box(settings.soundEffectsLevel)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";MISC SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";How accurate is the timer (digits after the seconds' decimal)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("timerAccuracy=", $T06().$Box((((settings.timerAccuracy.length | 0) - 3) | 0))));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How long before the player is considered idle (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("idleTimeMax=", $T05().$Box(settings.idleTimeMax)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";This is the time it takes to \"charge\" the super shockwave (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, ";Basically, how long you have to hold the shockwaveKey to use");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("superShockwaveHoldtime=", $T05().$Box(settings.superShockwaveHoldtime)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";The amount of time the player can hold down the left or right movement key");
    $S05().CallVirtual("WriteLine", null, writer, ";during a wall jump before they drift away from the wall (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("walljumpHoldtime=", $T05().$Box(settings.walljumpHoldtime)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Minimum distance(squared) for an enemy health bar to appear(bosses override this)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("minSqrDetectDistance=", $T05().$Box(settings.minSqrDetectDistance)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";CHEATS");
    $S05().CallVirtual("WriteLine", null, writer, ";self-explanatory");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attack1Damage=", $T05().$Box(settings.attack1Damage)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attack2Damage=", $T05().$Box(settings.attack2Damage)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";run&jump speed");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("speed=", $T05().$Box(settings.speed)));
    $S05().CallVirtual("WriteLine", null, writer, ";The maximum speed you can travel in any given direction");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("terminalVelocity=", $T05().$Box(settings.terminalVelocity)));
    $S05().CallVirtual("WriteLine", null, writer, ";how long your jumps will maintain jump velocity (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("jumpTimeMax=", $T05().$Box(settings.jumpTimeMax)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";highly unrecommended to not mess with these unless you really know what you're doing");
    $S05().CallVirtual("WriteLine", null, writer, ";collider size and placement relative to the 128x128 player sprite");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("colliderOffset=", settings.colliderOffset));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("colliderSize=", settings.colliderSize));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";this is the size of the rectangle used as the main attack hitbox");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attackColliderWidth=", $T06().$Box(settings.attackColliderWidth)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attackColliderHeight=", $T06().$Box(settings.attackColliderHeight)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";self-explanatory");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxHealth=", $T05().$Box(settings.maxHealth)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxShield=", $T05().$Box(settings.maxShield)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxEnergy=", $T05().$Box(settings.maxEnergy)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";distance at which shockwave has no power");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveEffectiveDistance=", $T05().$Box(settings.shockwaveEffectiveDistance)));
    $S05().CallVirtual("WriteLine", null, writer, ";shockwave multipliers");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveStunTime=", $T05().$Box(settings.shockwaveStunTime)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveKnockback=", settings.shockwaveKnockback));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";this how the player won't take damage after previously taking damage (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("invulnerableMaxTime=", $T05().$Box(settings.invulnerableMaxTime)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";these are only the base. they may be modified in-game by potions and other ways (per second)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldRechargeRate=", $T05().$Box(settings.shieldRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("energyRechargeRate=", $T05().$Box(settings.energyRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("healthRechargeRate=", $T05().$Box(settings.healthRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("potionRechargeRate=", $T05().$Box(settings.potionRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("potionRechargeTime=", $T05().$Box(settings.potionRechargeTime)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxNumberOfPotions=", $T06().$Box(settings.maxNumberOfPotions)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";this is the percentage of the damage absorbed by the shield that is converted back into health");
    $S05().CallVirtual("WriteLine", null, writer, ";0.25 means 25% of damage absorbed by the shield is converted to health (if 20 damage is absorbed, 5 damage is healed)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldHealingPercentage=", $T05().$Box(settings.shieldHealingPercentage)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";how full the energy bar has to be before allowing you to use (95 == 95%)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("energyUsableMargin=", $T05().$Box(settings.energyUsableMargin)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";ANIMATION SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";the amount of time that is allowed to pass before the animator displays the next frame (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, ";(for each animation listed below)");

    for (var i = 0; i < (settings.animationSpeed.length | 0); i = ((i + 1) | 0)) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["animationSpeed[", $T06().$Box(i), "]=", $T05().$Box(settings.animationSpeed[i])])));
    }
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";0 is 1 frame, 1 is 2 frames, etc");
    $S05().CallVirtual("WriteLine", null, writer, ";the number of frames in each animation, only edit this if you are remaking the default spritesheet");

    for (i = 0; i < (settings.animationFrames.length | 0); i = ((i + 1) | 0)) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["animationFrames[", $T06().$Box(i), "]=", $T06().$Box(settings.animationFrames[i])])));
    }
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";the amount of time that is allowed to pass before the shield animator displays the next frame (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, ";NOTE: there is no variable for the number of frames in the shield animation, as the shield animator");
    $S05().CallVirtual("WriteLine", null, writer, ";uses the width of the shield sprite to determine when to loop.");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldAnimationSpeed=", $T05().$Box(settings.shieldAnimationSpeed)));
    $S05().CallVirtual("WriteLine", null, writer, ";FONT SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";the height of each character in the font spritesheet (pixels)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("characterHeight=", $T06().$Box(settings.characterHeight)));
    $S05().CallVirtual("WriteLine", null, writer, ";the width of each character in the font spritesheet (pixels)");

    for (i = 0; i < 100; i = ((i + 1) | 0)) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["characterWidth[", $T06().$Box(i), "]=", $T06().$Box(settings.characterWidth[i])])));
    }
    $S05().CallVirtual("WriteLine", null, writer, ";characterWidth[99] is used as SPACE, so it should remain blank on the spritesheet (it is the final character)");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";DEBUG MODE");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("debug=", $T06().$Box(settings.debug)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";//END");
    writer.Close();
    $T0A().WriteLine("save successful.");
    $T0A().WriteLine();
  }; 

  function PlayerSettings_Save$03 (game, filename) {
    $T0A().WriteLine(("saving " + filename + "..."));
    var writer = $S04().Construct(filename);
    $S05().CallVirtual("WriteLine", null, writer, ";lines beginning with \";\" and empty lines are ignored");
    $S05().CallVirtual("WriteLine", null, writer, ";delete this file and relaunch to return everything to defaults");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";KEY BINDS");
    $S05().CallVirtual("WriteLine", null, writer, ";a list of all available keys can be found here:");
    $S05().CallVirtual("WriteLine", null, writer, "; https://msdn.microsoft.com/en-us/library/microsoft.xna.framework.input.keys.aspx");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attackKey=", $T0A().attackKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altAttackKey=", $T0A().altAttackKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveKey=", $T0A().shockwaveKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altShockwaveKey=", $T0A().altShockwaveKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldKey=", $T0A().shieldKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altShieldKey=", $T0A().altShieldKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("jumpKey=", $T0A().jumpKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altJumpKey=", $T0A().altJumpKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("upKey=", $T0A().upKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altUpKey=", $T0A().altUpKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("downKey=", $T0A().downKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altDownKey=", $T0A().altDownKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("leftKey=", $T0A().leftKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altLeftKey=", $T0A().altLeftKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("rightKey=", $T0A().rightKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altRightKey=", $T0A().altRightKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("rollKey=", $T0A().rollKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altRollKey=", $T0A().altRollKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("potionKey=", $T0A().potionKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altPotionKey=", $T0A().altPotionKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("useKey=", $T0A().useKey));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("altUseKey=", $T0A().altUseKey));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";CAMERA SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";The camera will move when the player leaves this area on the screen");
    $S05().CallVirtual("WriteLine", null, writer, ";XNA rectangle sctructure: (int X location, int Y location, int Width, int Height)");
    $S05().CallVirtual("WriteLine", null, writer, ";where location refers to the center of the rectangle");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["boundingBox={X:", $T06().$Box($T0A().boundingBox.get_Center().X), " Y:", $T06().$Box($T0A().boundingBox.get_Center().Y), " Width:", $T06().$Box($T0A().boundingBox.Width), " Height:", $T06().$Box($T0A().boundingBox.Height), "}"])));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Do you want the camera to smoothly trail the player?");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraLerpSetting=", $T00().$Box($T0A().cameraLerpSetting)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How fast should the camera lerp?");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraLerpSpeed=", $T05().$Box($T0A().cameraLerpSpeed)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Turn off camera \"swing\" (the motion the camera makes when you attack and miss)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraSwingSetting=", $T00().$Box($T0A().cameraSwingSetting)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How far should the camera swing? (pixels)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("swingMagnitude=", $T05().$Box($T0A().swingMagnitude)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How long should that swing take (this is the time it takes to travel the above pixels,");
    $S05().CallVirtual("WriteLine", null, writer, ";the time it takes to return to the normal camera position is double this number) (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("swingDuration=", $T05().$Box($T0A().swingDuration)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Turn off camera shake");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("cameraShakeSetting=", $T00().$Box($T0A().cameraShakeSetting)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";VIDEO SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";toggles windowed/fullscreen mode");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("fullscreen=", $T00().$Box($T0A().graphics.get_IsFullScreen())));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";the scale of the window");
    if (+$T0A().screenScale !== +((+($T0A().resolution.X) / 480))) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("screenScale=", $T05().$Box($T0A().screenScale)));
    } else {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("screenScale=", $T06().$Box(0)));
    }
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";how much of the world will be drawn");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("resolution=", $T0A().tempResolution));
    $S05().CallVirtual("WriteLine", null, writer, ";the actual size of the window is a combination of resolution and scale");
    $S05().CallVirtual("WriteLine", null, writer, ";for example, a 960x540 resolution at 2x scale gives you a 1920x1080 window");
    $S05().CallVirtual("WriteLine", null, writer, ";with each in-game pixel using 2x2 pixels on your screen");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("vSync=", $T00().$Box(game.get_IsFixedTimeStep())));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";AUDIO SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("masterAudioLevel=", $T05().$Box($T0A().masterAudioLevel)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("musicLevel=", $T05().$Box($T0A().musicLevel)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("soundEffectsLevel=", $T05().$Box($T0A().soundEffectsLevel)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";MISC SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";How accurate is the timer (digits after the seconds' decimal)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("timerAccuracy=", $T06().$Box(((($T0A().timerAccuracy.length | 0) - 3) | 0))));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";How long before the player is considered idle (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("idleTimeMax=", $T05().$Box($T0A().jamie.idleTimeMax)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";This is the time it takes to \"charge\" the super shockwave (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, ";Basically, how long you have to hold the shockwaveKey to use");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("superShockwaveHoldtime=", $T05().$Box($T0A().jamie.superShockwaveHoldtime)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";The amount of time the player can hold down the left or right movement key");
    $S05().CallVirtual("WriteLine", null, writer, ";during a wall jump before they drift away from the wall (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("walljumpHoldtime=", $T05().$Box($T0A().jamie.walljumpHoldtime)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";Minimum distance(squared) for an enemy health bar to appear(bosses override this)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("minSqrDetectDistance=", $T05().$Box($T0A().minSqrDetectDistance)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";CHEATS");
    $S05().CallVirtual("WriteLine", null, writer, ";self-explanatory");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attack1Damage=", $T05().$Box($T0A().jamie.attack1Damage)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attack2Damage=", $T05().$Box($T0A().jamie.attack2Damage)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";run&jump speed");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("speed=", $T05().$Box($T0A().jamie.speed)));
    $S05().CallVirtual("WriteLine", null, writer, ";The maximum speed you can travel in any given direction");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("terminalVelocity=", $T05().$Box($T0A().jamie.terminalVelocity)));
    $S05().CallVirtual("WriteLine", null, writer, ";how long your jumps will maintain jump velocity (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("jumpTimeMax=", $T05().$Box($T0A().jamie.jumpTimeMax)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";highly unrecommended to not mess with these unless you really know what you're doing");
    $S05().CallVirtual("WriteLine", null, writer, ";collider size and placement relative to the 128x128 player sprite");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("colliderOffset=", $T0A().jamie.colliderOffset));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("colliderSize=", $T0A().jamie.colliderSize));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";this is the size of the rectangle used as the main attack hitbox");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attackColliderWidth=", $T06().$Box($T0A().jamie.attackColliderWidth)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("attackColliderHeight=", $T06().$Box($T0A().jamie.attackColliderHeight)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";self-explanatory");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxHealth=", $T05().$Box($T0A().jamie.maxHealth)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxShield=", $T05().$Box($T0A().jamie.maxShield)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxEnergy=", $T05().$Box($T0A().jamie.maxEnergy)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";distance at which shockwave has no power");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveEffectiveDistance=", $T05().$Box($T0A().jamie.shockwaveEffectiveDistance)));
    $S05().CallVirtual("WriteLine", null, writer, ";shockwave multipliers");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveStunTime=", $T05().$Box($T0A().jamie.shockwaveStunTime)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shockwaveKnockback=", $T0A().jamie.shockwaveKnockback));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";this how the player won't take damage after previously taking damage (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("invulnerableMaxTime=", $T05().$Box($T0A().jamie.invulnerableMaxTime)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";these are only the base. they may be modified in-game by potions and other ways (per second)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldRechargeRate=", $T05().$Box($T0A().jamie.shieldRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("energyRechargeRate=", $T05().$Box($T0A().jamie.energyRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("healthRechargeRate=", $T05().$Box($T0A().jamie.baseHealing)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("potionRechargeRate=", $T05().$Box($T0A().jamie.potionRechargeRate)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("potionRechargeTime=", $T05().$Box($T0A().jamie.potionRechargeTime)));
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("maxNumberOfPotions=", $T06().$Box($T0A().jamie.maxNumberOfPotions)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";this is the percentage of the damage absorbed by the shield that is converted back into health");
    $S05().CallVirtual("WriteLine", null, writer, ";0.25 means 25% of damage absorbed by the shield is converted to health (if 20 damage is absorbed, 5 damage is healed)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldHealingPercentage=", $T05().$Box($T0A().jamie.shieldHealingPercentage)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";how full the energy bar has to be before allowing you to use (95 == 95%)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("energyUsableMargin=", $T05().$Box($T0A().jamie.energyUsableMargin)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";ANIMATION SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";the amount of time that is allowed to pass before the animator displays the next frame (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, ";(for each animation listed below)");

    for (var i = 0; i < ($T0A().jamie.animationSpeed.length | 0); i = ((i + 1) | 0)) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["animationSpeed[", $T06().$Box(i), "]=", $T05().$Box($T0A().jamie.animationSpeed[i])])));
    }
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";0 is 1 frame, 1 is 2 frames, etc");
    $S05().CallVirtual("WriteLine", null, writer, ";the number of frames in each animation, only edit this if you are remaking the default spritesheet");

    for (i = 0; i < ($T0A().jamie.animationFrames.length | 0); i = ((i + 1) | 0)) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["animationFrames[", $T06().$Box(i), "]=", $T06().$Box($T0A().jamie.animationFrames[i])])));
    }
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";the amount of time that is allowed to pass before the shield animator displays the next frame (seconds)");
    $S05().CallVirtual("WriteLine", null, writer, ";NOTE: there is no variable for the number of frames in the shield animation, as the shield animator");
    $S05().CallVirtual("WriteLine", null, writer, ";uses the width of the shield sprite to determine when to loop.");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("shieldAnimationSpeed=", $T05().$Box($T0A().jamie.shieldAnimationSpeed)));
    $S05().CallVirtual("WriteLine", null, writer, ";FONT SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";the height of each character in the font spritesheet (pixels)");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("characterHeight=", $T06().$Box($T0A().font.charHeight)));
    $S05().CallVirtual("WriteLine", null, writer, ";the width of each character in the font spritesheet (pixels)");

    for (i = 0; i < 100; i = ((i + 1) | 0)) {
      $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["characterWidth[", $T06().$Box(i), "]=", $T06().$Box($T0A().font.charWidth[i])])));
    }
    $S05().CallVirtual("WriteLine", null, writer, ";characterWidth[99] is used as SPACE, so it should remain blank on the spritesheet (it is the final character)");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";ETC SETTINGS");
    $S05().CallVirtual("WriteLine", null, writer, ";player starting position (world space)");
    $S05().CallVirtual("WriteLine", null, writer, ";only used when one isn't given by the fight");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("initialPosition=", $T0A().initialPos));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";DEBUG MODE");
    $S05().CallVirtual("WriteLine", null, writer, JSIL.ConcatString("debug=", $T06().$Box($T0A().debug)));
    $S05().CallVirtual("WriteLine", null, writer, "");
    $S05().CallVirtual("WriteLine", null, writer, ";//END");
    writer.Close();
    $T0A().WriteLine("save successful.");
    $T0A().WriteLine();
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "PlayerSettings", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      PlayerSettings__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      PlayerSettings__ctor$01
    );

    $.Method({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Type, [$.String]), 
      PlayerSettings_Load
    );

    $.Method({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$.Type, $.String]), 
      PlayerSettings_Save$02
    );

    $.Method({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Irbis.Irbis"), $.String]), 
      PlayerSettings_Save$03
    );

    $.Field({Static:false, Public:true }, "colliderOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "colliderSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "terminalVelocity", $.Single);

    $.Field({Static:false, Public:true }, "maxHealth", $.Single);

    $.Field({Static:false, Public:true }, "maxShield", $.Single);

    $.Field({Static:false, Public:true }, "maxEnergy", $.Single);

    $.Field({Static:false, Public:true }, "invulnerableMaxTime", $.Single);

    $.Field({Static:false, Public:true }, "energyUsableMargin", $.Single);

    $.Field({Static:false, Public:true }, "minSqrDetectDistance", $.Single);

    $.Field({Static:false, Public:true }, "boundingBox", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "cameraLerpSetting", $.Boolean);

    $.Field({Static:false, Public:true }, "cameraLerpSpeed", $.Single);

    $.Field({Static:false, Public:true }, "shieldRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "energyRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "healthRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "potionRechargeRate", $.Single);

    $.Field({Static:false, Public:true }, "potionRechargeTime", $.Single);

    $.Field({Static:false, Public:true }, "maxNumberOfPotions", $.Int32);

    $.Field({Static:false, Public:true }, "shieldHealingPercentage", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveEffectiveDistance", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveStunTime", $.Single);

    $.Field({Static:false, Public:true }, "shockwaveKnockback", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "speed", $.Single);

    $.Field({Static:false, Public:true }, "jumpTimeMax", $.Single);

    $.Field({Static:false, Public:true }, "idleTimeMax", $.Single);

    $.Field({Static:false, Public:true }, "animationSpeed", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Field({Static:false, Public:true }, "animationFrames", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "characterWidth", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "shieldAnimationSpeed", $.Single);

    $.Field({Static:false, Public:true }, "superShockwaveHoldtime", $.Single);

    $.Field({Static:false, Public:true }, "walljumpHoldtime", $.Single);

    $.Field({Static:false, Public:true }, "attack1Damage", $.Single);

    $.Field({Static:false, Public:true }, "attack2Damage", $.Single);

    $.Field({Static:false, Public:true }, "timerAccuracy", $.String);

    $.Field({Static:false, Public:true }, "cameraShakeSetting", $.Boolean);

    $.Field({Static:false, Public:true }, "cameraSwingSetting", $.Boolean);

    $.Field({Static:false, Public:true }, "swingDuration", $.Single);

    $.Field({Static:false, Public:true }, "swingMagnitude", $.Single);

    $.Field({Static:false, Public:true }, "attackColliderWidth", $.Int32);

    $.Field({Static:false, Public:true }, "attackColliderHeight", $.Int32);

    $.Field({Static:false, Public:true }, "fullscreen", $.Boolean);

    $.Field({Static:false, Public:true }, "screenScale", $.Single);

    $.Field({Static:false, Public:true }, "resolution", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "vSync", $.Boolean);

    $.Field({Static:false, Public:true }, "masterAudioLevel", $.Single);

    $.Field({Static:false, Public:true }, "musicLevel", $.Single);

    $.Field({Static:false, Public:true }, "soundEffectsLevel", $.Single);

    $.Field({Static:false, Public:true }, "attackKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altAttackKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "shockwaveKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altShockwaveKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "shieldKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altShieldKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "jumpKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altJumpKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "upKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altUpKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "downKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altDownKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "leftKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altLeftKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "rightKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altRightKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "rollKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altRollKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "potionKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altPotionKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "useKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "altUseKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"));

    $.Field({Static:false, Public:true }, "characterHeight", $.Int32);

    $.Field({Static:false, Public:true }, "debug", $.Int32);

    $.Field({Static:true , Public:false}, "numberOfVariables", $.Int32, 71);


    function PlayerSettings__cctor () {
      $thisType.numberOfVariables = 71;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PlayerSettings__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Print */ 

(function Print$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Font)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.Console)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.Text.StringBuilder)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.System.Char)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Text.StringBuilder, null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Text.StringBuilder, [$asm02.System.String]))) ();
  };


  function Print__ctor$00 (mW, font, colorForFont, monospace, location, alignSide, drawDepth) {
    this.align = alignSide;
    this.depth = +drawDepth;
    this.tex = font.tex;
    this.width = 0;
    this.height = 0;
    this.maxWidth = (mW | 0);
    this.fontColor = colorForFont.MemberwiseClone();
    this.characterHeight = (font.charHeight | 0);
    this.timer = 0;
    this.lines = 0;
    this.scrollDown = true;
    this.origin.X = (location.X | 0);
    this.origin.Y = (((location.Y | 0) - (((this.characterHeight | 0) / 2) | 0)) | 0);
    this.textScale = ($T07().textScale | 0);
    this.monoSpace = monospace;
    this.statement = this.printStatement = $T08().Empty;
    if (false) {
      $T09().WriteLine(JSIL.ConcatString("     font: ", font.toString()));
    }
    if (false) {
      $T09().WriteLine(JSIL.ConcatString("    align: ", this.align));
    }
    if (false) {
      $T09().WriteLine(JSIL.ConcatString("   origin: ", this.origin));
    }
    if (false) {
      $T09().WriteLine(JSIL.ConcatString(" maxWidth: ", $T00().$Box(this.maxWidth)));
    }
    if (false) {
      $T09().WriteLine(JSIL.ConcatString("fontColor: ", this.fontColor));
    }
    if (false) {
      $T09().WriteLine(JSIL.ConcatString("monoSpace: ", $T03().$Box(this.monoSpace)));
    }
    this.fontSourceRect = JSIL.Array.New($T0B(), 100);

    for (var i = 0; i < 10; i = ((i + 1) | 0)) {

      for (var j = 0; j < 10; j = ((j + 1) | 0)) {
        this.fontSourceRect[((Math.imul(i, 10) + j) | 0)] = $S00().Construct(((Math.imul(j, font.charHeight) + (((font.charHeight | 0) - (font.charWidth[((Math.imul(i, 10) + j) | 0)] | 0)) | 0)) | 0), Math.imul(i, font.charHeight), font.charWidth[((Math.imul(i, 10) + j) | 0)], font.charHeight);
      }
    }
    this.displayPosition = (this.origin).ToVector2();
  }; 

  function Print__ctor$01 (CONSOLE) {
    this.konsole = $S01().Construct();
    this.align = $T05().Left;
    this.depth = 1;
    this.tex = CONSOLE.tex;
    this.width = 0;
    this.height = 0;
    this.maxWidth = ($T07().resolution.X | 0);
    this.fontColor = $T02().Color$White$value.MemberwiseClone();
    this.characterHeight = (CONSOLE.charHeight | 0);
    this.timer = 0;
    this.lines = 0;
    this.scrollDown = this.monoSpace = true;
    this.origin.X = 1;
    this.origin.Y = -14;
    this.textScale = ($T07().textScale | 0);
    this.fontSourceRect = JSIL.Array.New($T0B(), 100);

    for (var i = 0; i < 10; i = ((i + 1) | 0)) {

      for (var j = 0; j < 10; j = ((j + 1) | 0)) {
        this.fontSourceRect[((Math.imul(i, 10) + j) | 0)] = $S00().Construct(((Math.imul(j, CONSOLE.charHeight) + (((CONSOLE.charHeight | 0) - (CONSOLE.charWidth[((Math.imul(i, 10) + j) | 0)] | 0)) | 0)) | 0), Math.imul(i, CONSOLE.charHeight), CONSOLE.charWidth[((Math.imul(i, 10) + j) | 0)], CONSOLE.charHeight);
      }
    }
  }; 

  function Print_Clear () {
    this.statement = this.printStatement = $T08().Empty;
    if (this.konsole !== null) {
      (this.konsole).Clear();
      this.lines = this.printLines = 0;
    }
  }; 

  function Print_DeleteLine () {
    this.statement = (this.statement.substr((((this.statement.indexOf("\n")) + 1) | 0)));
    this.lines = (((this.lines | 0) - 1) | 0);
  }; 

  function Print_Draw$02 (sb) {
    if (this.monoSpace) {
      if (this.align === $T05().Left) {
        this.width = 0;
        if (this.scrollDown) {
          this.height = 0;
          var statementLength = (this.statement.length | 0);

          for (var i = 0; i < statementLength; i = ((i + 1) | 0)) {
            if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
              this.width = 0;
              this.height = (((this.height | 0) + 1) | 0);
            } else {
              if ((this.width | 0) >= (this.maxWidth | 0)) {
                this.width = 0;
                this.height = (((this.height | 0) + 1) | 0);
              }
              var c = (this.statement[i]);
              var charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
              this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
              this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
              $S02().CallVirtual("Draw", null, sb, 
                this.tex, 
                this.displayPosition.MemberwiseClone(), 
                this.fontSourceRect[charIndex].MemberwiseClone(), 
                this.fontColor.MemberwiseClone(), 
                0, 
                $T0F().get_Zero().MemberwiseClone(), 
                +(this.textScale), 
                $T10().None, 
                this.depth
              );
              this.width = (((this.width | 0) + Math.imul(this.characterHeight, this.textScale)) | 0);
            }
          }
        } else {
          this.height = 0;

          while ((this.printLines | 0) > 50) {
            this.printStatement = (this.printStatement.substr((((this.printStatement.indexOf("\n")) + 1) | 0)));
            this.printLines = (((this.printLines | 0) - 1) | 0);
          }

          for (var tempstatement = this.printStatement; !$T08().IsNullOrWhiteSpace(tempstatement); ) {
            var lastindexofnewline = (tempstatement.lastIndexOf("\n"));

            for (i = ((lastindexofnewline + 1) | 0); i < (tempstatement.length | 0); i = ((i + 1) | 0)) {
              if ((this.width | 0) >= (this.maxWidth | 0)) {
                this.width = 0;
                this.height = (((this.height | 0) - 1) | 0);
              }
              c = (tempstatement[i]);
              charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
              this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
              this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
              $S02().CallVirtual("Draw", null, sb, 
                this.tex, 
                this.displayPosition.MemberwiseClone(), 
                this.fontSourceRect[charIndex].MemberwiseClone(), 
                this.fontColor.MemberwiseClone(), 
                0, 
                $T0F().get_Zero().MemberwiseClone(), 
                +(this.textScale), 
                $T10().None, 
                this.depth
              );
              this.width = (((this.width | 0) + Math.imul(this.characterHeight, this.textScale)) | 0);
            }
            if (lastindexofnewline > 0) {
              tempstatement = (tempstatement.substr(0, lastindexofnewline));
              this.width = 0;
              this.height = (((this.height | 0) - 1) | 0);
            } else {
              tempstatement = $T08().Empty;
            }
          }
        }
      } else if (this.align === $T05().Right) {
        this.width = -((Math.imul(this.characterHeight, 2) + 1) | 0);
        if (this.scrollDown) {
          this.height = 0;
        } else {
          this.height = -this.lines;
        }
        var statementLengthMinOne = (((this.statement.length | 0) - 1) | 0);

        for (i = statementLengthMinOne; i >= 0; i = ((i - 1) | 0)) {
          if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
            this.width = -((Math.imul(this.characterHeight, 2) + 1) | 0);
            this.height = (((this.height | 0) + 1) | 0);
          } else {
            if ((this.width | 0) >= (this.maxWidth | 0)) {
              this.width = -((Math.imul(this.characterHeight, 2) + 1) | 0);
              this.height = (((this.height | 0) + 1) | 0);
            }
            c = (this.statement[i]);
            charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
            this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
            this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
            $S02().CallVirtual("Draw", null, sb, 
              this.tex, 
              this.displayPosition.MemberwiseClone(), 
              this.fontSourceRect[charIndex].MemberwiseClone(), 
              this.fontColor.MemberwiseClone(), 
              0, 
              $T0F().get_Zero().MemberwiseClone(), 
              +(this.textScale), 
              $T10().None, 
              this.depth
            );
            this.width = (((this.width | 0) - Math.imul(this.characterHeight, this.textScale)) | 0);
          }
        }
      } else {
        this.maxWidth = (((this.maxWidth | 0) + (this.characterHeight | 0)) | 0);
        var maxUsedWidth = 0;
        this.width = 0;
        if (this.scrollDown) {
          this.height = 0;
        } else {
          this.height = -this.lines;
        }

        for (i = 0; i < (this.statement.length | 0); i = ((i + 1) | 0)) {
          if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
            this.width = 0;
            this.height = (((this.height | 0) + 1) | 0);
          } else {
            if ((this.width | 0) >= (this.maxWidth | 0)) {
              this.width = 0;
              this.height = (((this.height | 0) + 1) | 0);
            }
            this.width = (((this.width | 0) + (this.characterHeight | 0)) | 0);
            if (maxUsedWidth > (this.width | 0)) {
              maxUsedWidth = (this.width | 0);
            }
          }
        }
        this.width = (((-maxUsedWidth | 0) / 2) | 0);
        this.height = 0;

        for (i = 0; i < (this.statement.length | 0); i = ((i + 1) | 0)) {
          if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
            this.width = (((-maxUsedWidth | 0) / 2) | 0);
            this.height = (((this.height | 0) + 1) | 0);
          } else {
            if ((this.width | 0) >= (this.maxWidth | 0)) {
              this.width = (((-maxUsedWidth | 0) / 2) | 0);
              this.height = (((this.height | 0) + 1) | 0);
            }
            c = (this.statement[i]);
            charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
            this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
            this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
            $S02().CallVirtual("Draw", null, sb, 
              this.tex, 
              this.displayPosition.MemberwiseClone(), 
              this.fontSourceRect[charIndex].MemberwiseClone(), 
              this.fontColor.MemberwiseClone(), 
              0, 
              $T0F().get_Zero().MemberwiseClone(), 
              +(this.textScale), 
              $T10().None, 
              this.depth
            );
            this.width = (((this.width | 0) - Math.imul((((this.characterHeight | 0) + 1) | 0), this.textScale)) | 0);
          }
        }
      }
    } else if (this.align === $T05().Left) {
      this.width = 0;
      if (this.scrollDown) {
        this.height = 0;
      } else {
        this.height = -this.lines;
      }
      statementLength = (this.statement.length | 0);
      var text = this.statement;

      for (var j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        c = (text[j]);
        if (c.Equals("\n")) {
          this.width = 0;
          this.height = (((this.height | 0) + 1) | 0);
        } else {
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            this.width = 0;
            this.height = (((this.height | 0) + 1) | 0);
          }
          charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
          this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
          this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
          $S02().CallVirtual("Draw", null, sb, 
            this.tex, 
            this.displayPosition.MemberwiseClone(), 
            this.fontSourceRect[charIndex].MemberwiseClone(), 
            this.fontColor.MemberwiseClone(), 
            0, 
            $T0F().get_Zero().MemberwiseClone(), 
            +(this.textScale), 
            $T10().None, 
            this.depth
          );
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
        }
      }
    } else if (this.align === $T05().Right) {
      var MaxUsedWidth = this.width = (this.PrintSizeNoScale(this.statement).X | 0);
      this.height = 0;
      this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));

      for (i = (((this.statement.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
          this.width = MaxUsedWidth;
          this.height = (((this.height | 0) + 1) | 0);
          this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
        } else {
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            this.width = MaxUsedWidth;
            this.height = (((this.height | 0) + 1) | 0);
            this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
          }
          c = (this.statement[i]);
          charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
          this.displayPosition.X = +((this.origin.X | 0) - (this.width | 0));
          $S02().CallVirtual("Draw", null, sb, 
            this.tex, 
            this.displayPosition.MemberwiseClone(), 
            this.fontSourceRect[charIndex].MemberwiseClone(), 
            this.fontColor.MemberwiseClone(), 
            0, 
            $T0F().get_Zero().MemberwiseClone(), 
            +(this.textScale), 
            $T10().None, 
            this.depth
          );
        }
      }
    } else {
      maxUsedWidth = 0;
      this.width = 0;
      if (this.scrollDown) {
        this.height = 0;
      } else {
        this.height = -this.lines;
      }
      text = this.statement;

      for (j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        c = (text[j]);
        if (c.Equals("\n")) {
          this.width = 0;
          this.height = (((this.height | 0) + 1) | 0);
        } else {
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[$thisType.ReturnCharacterIndex(c)].Width | 0) + 1) | 0), this.textScale)) | 0);
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            this.width = 0;
            this.height = (((this.height | 0) + 1) | 0);
            maxUsedWidth = (this.maxWidth | 0);
          }
          if ((this.width | 0) > maxUsedWidth) {
            maxUsedWidth = (((this.width | 0) - 1) | 0);
          }
        }
      }
      this.width = (((-maxUsedWidth | 0) / 2) | 0);
      this.height = 0;
      text = this.statement;

      for (j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        c = (text[j]);
        if (c.Equals("\n")) {
          this.width = (((-maxUsedWidth | 0) / 2) | 0);
          this.height = (((this.height | 0) + 1) | 0);
        } else {
          if ((this.width | 0) >= maxUsedWidth) {
            this.width = (((-maxUsedWidth | 0) / 2) | 0);
            this.height = (((this.height | 0) + 1) | 0);
          }
          charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
          this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
          this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
          $S02().CallVirtual("Draw", null, sb, 
            this.tex, 
            this.displayPosition.MemberwiseClone(), 
            this.fontSourceRect[charIndex].MemberwiseClone(), 
            this.fontColor.MemberwiseClone(), 
            0, 
            $T0F().get_Zero().MemberwiseClone(), 
            +(this.textScale), 
            $T10().None, 
            this.depth
          );
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
        }
      }
    }
  }; 

  function Print_Draw$03 (sb, location) {
    this.origin.X = (location.X | 0);
    this.origin.Y = (((location.Y | 0) - ((Math.imul(this.characterHeight, this.textScale) / 2) | 0)) | 0);
    if (this.monoSpace) {
      if (this.align === $T05().Left) {
        this.width = 0;
        if (this.scrollDown) {
          this.height = 0;
          var statementLength = (this.statement.length | 0);

          for (var i = 0; i < statementLength; i = ((i + 1) | 0)) {
            if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
              this.width = 0;
              this.height = (((this.height | 0) + 1) | 0);
            } else {
              if ((this.width | 0) >= (this.maxWidth | 0)) {
                this.width = 0;
                this.height = (((this.height | 0) + 1) | 0);
              }
              var c = (this.statement[i]);
              var charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
              this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
              this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
              $S02().CallVirtual("Draw", null, sb, 
                this.tex, 
                this.displayPosition.MemberwiseClone(), 
                this.fontSourceRect[charIndex].MemberwiseClone(), 
                this.fontColor.MemberwiseClone(), 
                0, 
                $T0F().get_Zero().MemberwiseClone(), 
                +(this.textScale), 
                $T10().None, 
                this.depth
              );
              this.width = (((this.width | 0) + Math.imul(this.characterHeight, this.textScale)) | 0);
            }
          }
        } else {
          this.height = 0;

          while ((this.printLines | 0) > 50) {
            this.printStatement = (this.printStatement.substr((((this.printStatement.indexOf("\n")) + 1) | 0)));
            this.printLines = (((this.printLines | 0) - 1) | 0);
          }

          for (var tempstatement = this.printStatement; !$T08().IsNullOrWhiteSpace(tempstatement); ) {
            var lastindexofnewline = (tempstatement.lastIndexOf("\n"));

            for (i = ((lastindexofnewline + 1) | 0); i < (tempstatement.length | 0); i = ((i + 1) | 0)) {
              if ((this.width | 0) >= (this.maxWidth | 0)) {
                this.width = 0;
                this.height = (((this.height | 0) - 1) | 0);
              }
              c = (tempstatement[i]);
              charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
              this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
              this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
              if (!$S03().CallVirtual("Contains", null, $T07().zeroScreenspace, this.displayPosition)) {
                return;
              }
              $S02().CallVirtual("Draw", null, sb, 
                this.tex, 
                this.displayPosition.MemberwiseClone(), 
                this.fontSourceRect[charIndex].MemberwiseClone(), 
                this.fontColor.MemberwiseClone(), 
                0, 
                $T0F().get_Zero().MemberwiseClone(), 
                +(this.textScale), 
                $T10().None, 
                this.depth
              );
              this.width = (((this.width | 0) + Math.imul(this.characterHeight, this.textScale)) | 0);
            }
            if (lastindexofnewline > 0) {
              tempstatement = (tempstatement.substr(0, lastindexofnewline));
              this.width = 0;
              this.height = (((this.height | 0) - 1) | 0);
            } else {
              tempstatement = $T08().Empty;
            }
          }
        }
      } else if (this.align === $T05().Right) {
        this.width = -1;
        if (this.scrollDown) {
          this.height = 0;
        } else {
          this.height = -this.lines;
        }
        var statementLengthMinOne = (((this.statement.length | 0) - 1) | 0);

        for (i = statementLengthMinOne; i >= 0; i = ((i - 1) | 0)) {
          if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
            this.width = -1;
            this.height = (((this.height | 0) + 1) | 0);
          } else {
            if ((this.width | 0) >= (this.maxWidth | 0)) {
              this.width = -1;
              this.height = (((this.height | 0) + 1) | 0);
            }
            c = (this.statement[i]);
            charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
            this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
            this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
            $S02().CallVirtual("Draw", null, sb, 
              this.tex, 
              this.displayPosition.MemberwiseClone(), 
              this.fontSourceRect[charIndex].MemberwiseClone(), 
              this.fontColor.MemberwiseClone(), 
              0, 
              $T0F().get_Zero().MemberwiseClone(), 
              +(this.textScale), 
              $T10().None, 
              this.depth
            );
            this.width = (((this.width | 0) - (this.characterHeight | 0)) | 0);
          }
        }
      } else {
        this.maxWidth = (((this.maxWidth | 0) + (this.characterHeight | 0)) | 0);
        var maxUsedWidth = 0;
        this.width = 0;
        if (this.scrollDown) {
          this.height = 0;
        } else {
          this.height = -this.lines;
        }

        for (i = 0; i < (this.statement.length | 0); i = ((i + 1) | 0)) {
          if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
            this.width = 0;
            this.height = (((this.height | 0) + 1) | 0);
          } else {
            if ((this.width | 0) >= (this.maxWidth | 0)) {
              this.width = 0;
              this.height = (((this.height | 0) + 1) | 0);
            }
            this.width = (((this.width | 0) + (this.fontSourceRect[$thisType.ReturnCharacterIndex(this.statement[i])].Width | 0)) | 0);
            if (maxUsedWidth > (this.width | 0)) {
              maxUsedWidth = (this.width | 0);
            }
          }
        }
        this.width = (((-maxUsedWidth | 0) / 2) | 0);
        this.height = 0;

        for (i = 0; i < (this.statement.length | 0); i = ((i + 1) | 0)) {
          if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
            this.width = (((-maxUsedWidth | 0) / 2) | 0);
            this.height = (((this.height | 0) + 1) | 0);
          } else {
            if ((this.width | 0) >= (this.maxWidth | 0)) {
              this.width = (((-maxUsedWidth | 0) / 2) | 0);
              this.height = (((this.height | 0) + 1) | 0);
            }
            c = (this.statement[i]);
            charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
            this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
            this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
            $S02().CallVirtual("Draw", null, sb, 
              this.tex, 
              this.displayPosition.MemberwiseClone(), 
              this.fontSourceRect[charIndex].MemberwiseClone(), 
              this.fontColor.MemberwiseClone(), 
              0, 
              $T0F().get_Zero().MemberwiseClone(), 
              +(this.textScale), 
              $T10().None, 
              this.depth
            );
            this.width = (((this.width | 0) - Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
          }
        }
      }
    } else if (this.align === $T05().Left) {
      this.width = 0;
      if (this.scrollDown) {
        this.height = 0;
      } else {
        this.height = -this.lines;
      }
      statementLength = (this.statement.length | 0);
      var text = this.statement;

      for (var j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        c = (text[j]);
        if (c.Equals("\n")) {
          this.width = 0;
          this.height = (((this.height | 0) + 1) | 0);
        } else {
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            this.width = 0;
            this.height = (((this.height | 0) + 1) | 0);
          }
          charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
          this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
          this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
          $S02().CallVirtual("Draw", null, sb, 
            this.tex, 
            this.displayPosition.MemberwiseClone(), 
            this.fontSourceRect[charIndex].MemberwiseClone(), 
            this.fontColor.MemberwiseClone(), 
            0, 
            $T0F().get_Zero().MemberwiseClone(), 
            +(this.textScale), 
            $T10().None, 
            this.depth
          );
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
        }
      }
    } else if (this.align === $T05().Right) {
      this.width = 0;
      var maxUsedHeight = 0;
      text = this.statement;

      for (j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        if ((text[j]).Equals("\n")) {
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        }
      }
      this.height = maxUsedHeight;

      for (i = (((this.statement.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        if (!(!(this.statement[i]).Equals("\n") && !(this.statement[i]).Equals("\r"))) {
          this.width = 0;
          this.height = (((this.height | 0) - 1) | 0);
        } else {
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            this.width = 0;
            this.height = (((this.height | 0) - 1) | 0);
          }
          c = (this.statement[i]);
          charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
          this.displayPosition.X = +((this.origin.X | 0) - (this.width | 0));
          this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
          $S02().CallVirtual("Draw", null, sb, 
            this.tex, 
            this.displayPosition.MemberwiseClone(), 
            this.fontSourceRect[charIndex].MemberwiseClone(), 
            this.fontColor.MemberwiseClone(), 
            0, 
            $T0F().get_Zero().MemberwiseClone(), 
            +(this.textScale), 
            $T10().None, 
            this.depth
          );
        }
      }
    } else {
      maxUsedWidth = 0;
      this.width = 0;
      if (this.scrollDown) {
        this.height = 0;
      } else {
        this.height = -this.lines;
      }
      text = this.statement;

      for (j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        c = (text[j]);
        if (c.Equals("\n")) {
          this.width = 0;
          this.height = (((this.height | 0) + 1) | 0);
        } else {
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[$thisType.ReturnCharacterIndex(c)].Width | 0) + 1) | 0), this.textScale)) | 0);
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            this.width = 0;
            this.height = (((this.height | 0) + 1) | 0);
            maxUsedWidth = (this.maxWidth | 0);
          }
          if ((this.width | 0) > maxUsedWidth) {
            maxUsedWidth = (((this.width | 0) - 1) | 0);
          }
        }
      }
      this.width = (((-maxUsedWidth | 0) / 2) | 0);
      this.height = 0;
      text = this.statement;

      for (j = 0; j < (text.length | 0); j = ((j + 1) | 0)) {
        c = (text[j]);
        if (c.Equals("\n")) {
          this.width = (((-maxUsedWidth | 0) / 2) | 0);
          this.height = (((this.height | 0) + 1) | 0);
        } else {
          if ((this.width | 0) >= maxUsedWidth) {
            this.width = (((-maxUsedWidth | 0) / 2) | 0);
            this.height = (((this.height | 0) + 1) | 0);
          }
          charIndex = ($thisType.ReturnCharacterIndex(c) | 0);
          this.displayPosition.X = +((this.width | 0) + (this.origin.X | 0));
          this.displayPosition.Y = +(Math.imul(this.height, Math.imul(this.characterHeight, this.textScale)) + (this.origin.Y | 0));
          $S02().CallVirtual("Draw", null, sb, 
            this.tex, 
            this.displayPosition.MemberwiseClone(), 
            this.fontSourceRect[charIndex].MemberwiseClone(), 
            this.fontColor.MemberwiseClone(), 
            0, 
            $T0F().get_Zero().MemberwiseClone(), 
            +(this.textScale), 
            $T10().None, 
            this.depth
          );
          this.width = (((this.width | 0) + Math.imul((((this.fontSourceRect[charIndex].Width | 0) + 1) | 0), this.textScale)) | 0);
        }
      }
    }
  }; 

  function Print_get_Konsole () {
    return (this.konsole).toString();
  }; 

  function Print_GetLine (index) {
    var occurrences = 0;
    var lastOccurrence = 0;
    var returnString = this.get_Konsole();

    while ((occurrences < (index | 0)) && (lastOccurrence >= 0)) {
      returnString = (returnString.substr((((returnString.indexOf("\n")) + 1) | 0)));
      occurrences = ((occurrences + 1) | 0);
    }
    if (!((lastOccurrence < 0) || (occurrences < 0))) {
      if ((returnString.indexOf("\n")) >= 0) {
        returnString = (returnString.substr(0, returnString.indexOf("\n")));
      }
    } else {
      returnString = $T08().Empty;
    }
    return returnString;
  }; 

  function Print_PrintSize (StringToMeasure) {
    var maxUsedWidth = 0;
    var maxUsedHeight = 0;
    var tempWidth = 0;
    if (this.monoSpace) {

      for (var i = 0; i < (StringToMeasure.length | 0); i = ((i + 1) | 0)) {
        var c = (StringToMeasure[i]);
        if (!(!c.Equals("\n") && !c.Equals("\r"))) {
          if (tempWidth > maxUsedWidth) {
            maxUsedWidth = tempWidth;
          }
          tempWidth = 0;
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        } else {
          if (tempWidth >= (this.maxWidth | 0)) {
            if (tempWidth > maxUsedWidth) {
              maxUsedWidth = tempWidth;
            }
            tempWidth = 0;
            maxUsedHeight = ((maxUsedHeight + 1) | 0);
          }
          tempWidth = ((tempWidth + Math.imul(this.characterHeight, this.textScale)) | 0);
        }
      }
    } else {

      for (i = 0; i < (StringToMeasure.length | 0); i = ((i + 1) | 0)) {
        c = (StringToMeasure[i]);
        if (c.Equals("\n")) {
          if (tempWidth > maxUsedWidth) {
            maxUsedWidth = tempWidth;
          }
          tempWidth = 0;
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        } else {
          if (tempWidth >= (this.maxWidth | 0)) {
            tempWidth = 0;
            maxUsedHeight = ((maxUsedHeight + 1) | 0);
          }
          if (tempWidth > maxUsedWidth) {
            maxUsedWidth = tempWidth;
          }
          tempWidth = ((tempWidth + Math.imul((((this.fontSourceRect[$thisType.ReturnCharacterIndex(c)].Width | 0) + 1) | 0), this.textScale)) | 0);
        }
      }
    }
    if (maxUsedHeight <= 0) {
      var result = $S04().Construct(maxUsedWidth, Math.imul(this.characterHeight, this.textScale));
    } else {
      result = $S04().Construct(maxUsedWidth, Math.imul(((maxUsedHeight + 1) | 0), Math.imul(this.characterHeight, this.textScale)));
    }
    return result;
  }; 

  function Print_PrintSizeNoScale (StringToMeasure) {
    var maxUsedWidth = 0;
    var maxUsedHeight = 0;
    var tempWidth = 0;
    if (this.monoSpace) {

      for (var i = 0; i < (StringToMeasure.length | 0); i = ((i + 1) | 0)) {
        var c = (StringToMeasure[i]);
        if (!(!c.Equals("\n") && !c.Equals("\r"))) {
          if ((this.width | 0) > maxUsedWidth) {
            maxUsedWidth = (this.width | 0);
          }
          this.width = 0;
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        } else {
          if ((this.width | 0) >= (this.maxWidth | 0)) {
            if ((this.width | 0) > maxUsedWidth) {
              maxUsedWidth = (this.width | 0);
            }
            this.width = 0;
            maxUsedHeight = ((maxUsedHeight + 1) | 0);
          }
          this.width = (((this.width | 0) + (this.characterHeight | 0)) | 0);
        }
      }
    } else {

      for (i = 0; i < (StringToMeasure.length | 0); i = ((i + 1) | 0)) {
        c = (StringToMeasure[i]);
        if (c.Equals("\n")) {
          if (tempWidth > maxUsedWidth) {
            maxUsedWidth = tempWidth;
          }
          tempWidth = 0;
          maxUsedHeight = ((maxUsedHeight + 1) | 0);
        } else {
          if (tempWidth >= (this.maxWidth | 0)) {
            if (tempWidth > maxUsedWidth) {
              maxUsedWidth = tempWidth;
            }
            tempWidth = 0;
            maxUsedHeight = ((maxUsedHeight + 1) | 0);
          }
          tempWidth = ((tempWidth + (((this.fontSourceRect[$thisType.ReturnCharacterIndex(c)].Width | 0) + 1) | 0)) | 0);
        }
      }
    }
    if (maxUsedHeight <= 0) {
      var result = $S04().Construct(maxUsedWidth, this.characterHeight);
    } else {
      result = $S04().Construct(maxUsedWidth, Math.imul(((maxUsedHeight + 1) | 0), this.characterHeight));
    }
    return result;
  }; 

  function Print_ReturnCharacterIndex (c) {
    switch (c) {
      case "\t": 
        var result = 99;
        return result;

      case "\n": 
      case "\x0b": 
      case "\x0c": 
      case "\r": 
      case "\x0e": 
      case "\x0f": 
      case "\x10": 
      case "\x11": 
      case "\x12": 
      case "\x13": 
      case "\x14": 
      case "\x15": 
      case "\x16": 
      case "\x17": 
      case "\x18": 
      case "\x19": 
      case "\x1a": 
      case "\x1c": 
      case "\x1d": 
      case "\x1e": 
      case "\x1f": 
        break;

      case "\x1b": 
        result = 79;
        return result;

      case " ": 
        result = 99;
        return result;

      case "!": 
        result = 62;
        return result;

      case "\"": 
        result = 94;
        return result;

      case "#": 
        result = 64;
        return result;

      case "$": 
        result = 65;
        return result;

      case "%": 
        result = 66;
        return result;

      case "&": 
        result = 68;
        return result;

      case "'": 
        result = 90;
        return result;

      case "(": 
        result = 70;
        return result;

      case ")": 
        result = 71;
        return result;

      case "*": 
        result = 69;
        return result;

      case "+": 
        result = 75;
        return result;

      case ",": 
        result = 85;
        return result;

      case "-": 
        result = 72;
        return result;

      case ".": 
        result = 83;
        return result;

      case "/": 
        result = 88;
        return result;

      case "0": 
        result = 0;
        return result;

      case "1": 
        result = 1;
        return result;

      case "2": 
        result = 2;
        return result;

      case "3": 
        result = 3;
        return result;

      case "4": 
        result = 4;
        return result;

      case "5": 
        result = 5;
        return result;

      case "6": 
        result = 6;
        return result;

      case "7": 
        result = 7;
        return result;

      case "8": 
        result = 8;
        return result;

      case "9": 
        result = 9;
        return result;

      case ":": 
        result = 86;
        return result;

      case ";": 
        result = 87;
        return result;

      case "<": 
        result = 77;
        return result;

      case "=": 
        result = 74;
        return result;

      case ">": 
        result = 76;
        return result;

      case "?": 
        result = 63;
        return result;

      case "@": 
        result = 89;
        return result;

      case "A": 
        result = 10;
        return result;

      case "B": 
        result = 11;
        return result;

      case "C": 
        result = 12;
        return result;

      case "D": 
        result = 13;
        return result;

      case "E": 
        result = 14;
        return result;

      case "F": 
        result = 15;
        return result;

      case "G": 
        result = 16;
        return result;

      case "H": 
        result = 17;
        return result;

      case "I": 
        result = 18;
        return result;

      case "J": 
        result = 19;
        return result;

      case "K": 
        result = 20;
        return result;

      case "L": 
        result = 21;
        return result;

      case "M": 
        result = 22;
        return result;

      case "N": 
        result = 23;
        return result;

      case "O": 
        result = 24;
        return result;

      case "P": 
        result = 25;
        return result;

      case "Q": 
        result = 26;
        return result;

      case "R": 
        result = 27;
        return result;

      case "S": 
        result = 28;
        return result;

      case "T": 
        result = 29;
        return result;

      case "U": 
        result = 30;
        return result;

      case "V": 
        result = 31;
        return result;

      case "W": 
        result = 32;
        return result;

      case "X": 
        result = 33;
        return result;

      case "Y": 
        result = 34;
        return result;

      case "Z": 
        result = 35;
        return result;

      case "[": 
        result = 91;
        return result;

      case "\\": 
        result = 92;
        return result;

      case "]": 
        result = 93;
        return result;

      case "^": 
        result = 39;
        return result;

      case "_": 
        result = 73;
        return result;

      case "`": 
        result = 84;
        return result;

      case "a": 
        result = 36;
        return result;

      case "b": 
        result = 37;
        return result;

      case "c": 
        result = 38;
        return result;

      case "d": 
        result = 39;
        return result;

      case "e": 
        result = 40;
        return result;

      case "f": 
        result = 41;
        return result;

      case "g": 
        result = 42;
        return result;

      case "h": 
        result = 43;
        return result;

      case "i": 
        result = 44;
        return result;

      case "j": 
        result = 45;
        return result;

      case "k": 
        result = 46;
        return result;

      case "l": 
        result = 47;
        return result;

      case "m": 
        result = 48;
        return result;

      case "n": 
        result = 49;
        return result;

      case "o": 
        result = 50;
        return result;

      case "p": 
        result = 51;
        return result;

      case "q": 
        result = 52;
        return result;

      case "r": 
        result = 53;
        return result;

      case "s": 
        result = 54;
        return result;

      case "t": 
        result = 55;
        return result;

      case "u": 
        result = 56;
        return result;

      case "v": 
        result = 57;
        return result;

      case "w": 
        result = 58;
        return result;

      case "x": 
        result = 59;
        return result;

      case "y": 
        result = 60;
        return result;

      case "z": 
        result = 61;
        return result;

      case "{": 
        result = 80;
        return result;

      case "|": 
        result = 82;
        return result;

      case "}": 
        result = 81;
        return result;

      case "~": 
        result = 78;
        return result;

      default: 
        if ((c.charCodeAt(0) | 0) === (("\u20af").charCodeAt(0) | 0)) {
          result = 96;
          return result;
        }
        break;

    }
    result = 95;
    return result;
  }; 

  function Print_Update$04 (input, clear) {
    if (clear) {
      this.statement = input;
    } else {
      this.statement = (JSIL.ConcatString(this.statement, input));
    }
  }; 

  function Print_Update$05 (input) {
    this.statement = (JSIL.ConcatString(this.statement, input));
  }; 

  function Print_Update$06 (location) {
    this.origin = location.MemberwiseClone();
  }; 

  function Print_Update$07 (MaxWidth) {
    this.maxWidth = (MaxWidth | 0);
  }; 

  function Print_Write (line) {

    for (var i = 0; i < (line.length | 0); i = ((i + 1) | 0)) {
      if ((line[i]).Equals("\n")) {
        this.lines = (((this.lines | 0) + 1) | 0);
        this.printLines = (((this.printLines | 0) + 1) | 0);
      }
    }
    $S05().CallVirtual("Append", null, this.konsole, line);
    this.printStatement = (JSIL.JoinStrings($T08().Empty, JSIL.Array.New($T08(), [this.printStatement, line])));
  }; 

  function Print_WriteLine$08 (line) {

    for (var i = 0; i < (line.length | 0); i = ((i + 1) | 0)) {
      if ((line[i]).Equals("\n")) {
        this.lines = (((this.lines | 0) + 1) | 0);
        this.printLines = (((this.printLines | 0) + 1) | 0);
      }
    }
    $S05().CallVirtual("Append", null, this.konsole, JSIL.ConcatString("\n", line));
    this.printStatement = (JSIL.JoinStrings($T08().Empty, JSIL.Array.New($T08(), [this.printStatement, "\n", line])));
    this.lines = (((this.lines | 0) + 1) | 0);
    this.printLines = (((this.printLines | 0) + 1) | 0);
  }; 

  function Print_WriteLine$09 () {
    $S05().CallVirtual("Append", null, this.konsole, "\n");
    this.printStatement = (JSIL.JoinStrings($T08().Empty, JSIL.Array.New($T08(), [this.printStatement, "\n"])));
    this.lines = (((this.lines | 0) + 1) | 0);
    this.printLines = (((this.printLines | 0) + 1) | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Print", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Font"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm00.TypeRef("Irbis.Direction"), 
          $.Single
        ]), 
      Print__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Font")), 
      Print__ctor$01
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      Print_Clear
    );

    $.Method({Static:false, Public:true }, "DeleteLine", 
      JSIL.MethodSignature.Void, 
      Print_DeleteLine
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Print_Draw$02
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Print_Draw$03
    );

    $.Method({Static:false, Public:true }, "get_Konsole", 
      JSIL.MethodSignature.Return($.String), 
      Print_get_Konsole
    );

    $.Method({Static:false, Public:true }, "GetLine", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      Print_GetLine
    );

    $.Method({Static:false, Public:true }, "PrintSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$.String]), 
      Print_PrintSize
    );

    $.Method({Static:false, Public:true }, "PrintSizeNoScale", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$.String]), 
      Print_PrintSizeNoScale
    );

    $.Method({Static:true , Public:true }, "ReturnCharacterIndex", 
      new JSIL.MethodSignature($.Int32, [$.Char]), 
      Print_ReturnCharacterIndex
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean]), 
      Print_Update$04
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.String), 
      Print_Update$05
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")), 
      Print_Update$06
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Int32), 
      Print_Update$07
    );

    $.Method({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($.String), 
      Print_Write
    );

    $.Method({Static:false, Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Print_WriteLine$08
    );

    $.Method({Static:false, Public:true }, "WriteLine", 
      JSIL.MethodSignature.Void, 
      Print_WriteLine$09
    );

    $.Field({Static:false, Public:false}, "tex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "displayPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "fontColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "width", $.Int32);

    $.Field({Static:false, Public:false}, "height", $.Int32);

    $.Field({Static:false, Public:false}, "maxWidth", $.Int32);

    $.Field({Static:false, Public:false}, "fontSourceRect", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:true }, "statement", $.String);

    $.Field({Static:false, Public:false}, "konsole", $asm02.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "printStatement", $.String);

    $.Field({Static:false, Public:false}, "printLines", $.Int32);

    $.Field({Static:false, Public:true }, "depth", $.Single);

    $.Field({Static:false, Public:true }, "origin", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "align", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:true }, "characterHeight", $.Int32);

    $.Field({Static:false, Public:false}, "monoSpace", $.Boolean);

    $.Field({Static:false, Public:true }, "lines", $.Int32);

    $.Field({Static:false, Public:true }, "timer", $.Single);

    $.Field({Static:false, Public:true }, "scrollDown", $.Boolean);

    $.Field({Static:false, Public:true }, "textScale", $.Int32);

    $.Property({Static:false, Public:true }, "Konsole", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Irbis.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm02.System.IDisposable.Dispose)) ();
  };


  function Program_Main () {
    try {
      var game = new ($T00())();
      try {
        game.Run();
      } finally {
        if (game !== null) {
          $IM00().Call(game, null);
        }
      }
    } finally {
      if ($T00().Crash) {
        $T00().ExportConsole();
      }
    }
  }; 

  JSIL.MakeStaticClass("Irbis.Program", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Void, 
      Program_Main
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Ray */ 

(function Ray$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Line)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm02.System.Int16))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Int16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm00.Line))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm00.Shape))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Shape)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.Array)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Line, [$asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Vector2]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector3, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.PrimitiveType, $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm02.System.Int32, $asm02.System.Int32, 
        System.Array.Of($asm02.System.Int16), $asm02.System.Int32, 
        $asm02.System.Int32
      ], ["T"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [System.Array.Of($asm00.Line)]))) ();
  };


  function Ray__ctor (Origin, Direction) {
    this.origin = $S01().Construct((+Origin.X - +((+($T02().halfResolution.X) / +$T02().screenScale))), -(+Origin.Y - +((+($T02().halfResolution.Y) / +$T02().screenScale))));
    this.direction = $S01().Construct(Direction.X, -Direction.Y);
    (this.direction).Normalize();
  }; 

  function Ray_Draw$00 () {
    var vert = JSIL.Array.New($T04(), 4);
    var perp = $S01().Construct(-this.direction.Y, this.direction.X);
    perp.Normalize();
    perp = $S02().CallStatic($T01(), "op_Division", null, perp.MemberwiseClone(), 2);
    var displayEnd = $S01().Construct((+this.origin.X + (+this.direction.X * 500)), (+this.origin.Y + (+this.direction.Y * 500)));
    vert[0].Position = $S03().Construct($T01().op_Subtraction(this.origin.MemberwiseClone(), perp), 0);
    vert[1].Position = $S03().Construct($T01().op_Addition(this.origin.MemberwiseClone(), perp), 0);
    vert[2].Position = $S03().Construct($T01().op_Addition(displayEnd.MemberwiseClone(), perp), 0);
    vert[3].Position = $S03().Construct($T01().op_Subtraction(displayEnd.MemberwiseClone(), perp), 0);
    var ind = JSIL.Array.New($T07(), [0, 1, 2, 1, 2, 3]);
    $S04().CallVirtual("DrawUserIndexedPrimitives$b1", [$asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor], $T02().graphics.get_GraphicsDevice(), 
      $T0A().TriangleList, 
      vert, 
      0, 
      vert.length, 
      ind, 
      0, 
      (((ind.length | 0) / 3) | 0)
    );
  }; 

  function Ray_Draw$01 (end) {
    if (!(!$T01().op_Inequality(end, $T01().get_Zero()) || 
        (+end.X > +($T02().resolution.X)) || (+end.Y > +($T02().resolution.Y)))) {
      var displayEnd = end.MemberwiseClone();
    } else {
      (displayEnd = displayEnd.MemberwiseClone(), 
        $T01().prototype._ctor.call(displayEnd, +this.origin.X + (+this.direction.X * +($T02().resolution.X)), +this.origin.Y + (+this.direction.Y * +($T02().resolution.X))));
    }
    var vert = JSIL.Array.New($T04(), 4);
    var perp = $S01().Construct(-this.direction.Y, this.direction.X);
    perp.Normalize();
    perp = $S02().CallStatic($T01(), "op_Division", null, perp.MemberwiseClone(), 2);
    vert[0].Position = $S03().Construct($T01().op_Subtraction(this.origin.MemberwiseClone(), perp), 0);
    vert[0].Color = $T0B().Color$Red$value.MemberwiseClone();
    vert[1].Position = $S03().Construct($T01().op_Addition(this.origin.MemberwiseClone(), perp), 0);
    vert[1].Color = $T0B().Color$Red$value.MemberwiseClone();
    vert[2].Position = $S03().Construct($T01().op_Addition(displayEnd.MemberwiseClone(), perp), 0);
    vert[2].Color = $T0B().Color$Red$value.MemberwiseClone();
    vert[3].Position = $S03().Construct($T01().op_Subtraction(displayEnd.MemberwiseClone(), perp), 0);
    vert[3].Color = $T0B().Color$Red$value.MemberwiseClone();
    var ind = JSIL.Array.New($T07(), [0, 1, 2, 1, 2, 3]);
    $S04().CallVirtual("DrawUserIndexedPrimitives$b1", [$asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor], $T02().graphics.get_GraphicsDevice(), 
      $T0A().TriangleList, 
      vert, 
      0, 
      vert.length, 
      ind, 
      0, 
      (((ind.length | 0) / 3) | 0)
    );
  }; 

  function Ray_get_Direction () {
    return this.direction;
  }; 

  function Ray_get_Origin () {
    return this.origin;
  }; 

  function Ray_get_Zero () {
    return $thisType.zero;
  }; 

  function Ray_Intersect$02 (lines) {
    var closest = $T01().get_Zero().MemberwiseClone();
    var closestsqrdistance = 3.40282347E+38;

    for (var j = 0; j < (lines.length | 0); j = ((j + 1) | 0)) {
      var i = lines[j];
      var tempV2 = i.Intersect(this).MemberwiseClone();
      var tempfloat = +$T01().DistanceSquared(this.origin, tempV2);
      if (!((closestsqrdistance < tempfloat) || !$T01().op_Inequality(tempV2, $T01().get_Zero()))) {
        closestsqrdistance = tempfloat;
        closest = tempV2;
      }
    }
    return closest;
  }; 

  function Ray_Intersect$03 (Shapes) {
    var lineArray = JSIL.Array.New($T00(), $T10().TotalLines(Shapes));
    var currentIndex = 0;

    for (var i = 0; i < (Shapes.length | 0); i = ((i + 1) | 0)) {
      var s = Shapes[i].MemberwiseClone();
      JSIL.Array.CopyTo(s.get_Lines(), lineArray, currentIndex);
      currentIndex = ((currentIndex + (s.get_NumberOfLines() | 0)) | 0);
    }
    return $S05().CallVirtual("Intersect", null, this, lineArray);
  }; 

  function Ray_set_Direction (value) {
    this.direction = $S01().Construct(value.X, -value.Y);
    (this.direction).Normalize();
  }; 

  function Ray_set_Origin (value) {
    this.origin = $S01().Construct((+value.X - +((+($T02().halfResolution.X) / +$T02().screenScale))), -(+value.Y - +((+($T02().halfResolution.Y) / +$T02().screenScale))));
  }; 

  function Ray_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T13(), ["{Origin:", this.origin, " Direction:", this.direction, "}"]));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Ray", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Ray__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Void, 
      Ray_Draw$00
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Ray_Draw$01
    );

    $.Method({Static:false, Public:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Ray_get_Direction
    );

    $.Method({Static:false, Public:true }, "get_Origin", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Ray_get_Origin
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Line")), 
      Ray_get_Zero
    );

    $.Method({Static:false, Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Line")])]), 
      Ray_Intersect$02
    );

    $.Method({Static:false, Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Shape")])]), 
      Ray_Intersect$03
    );

    $.Method({Static:false, Public:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Ray_set_Direction
    );

    $.Method({Static:false, Public:true }, "set_Origin", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Ray_set_Origin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Ray_toString
    );

    $.Field({Static:true , Public:false}, "zero", $asm00.TypeRef("Line"));

    $.Field({Static:false, Public:false}, "origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "direction", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    function Ray__cctor () {
      $thisType.zero = new $asm00.Line();
      $thisType.zero = $S00().Construct($T01().get_Zero().MemberwiseClone(), $T01().get_Zero().MemberwiseClone());
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Ray__cctor
    );

    $.Property({Static:false, Public:true }, "Origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Direction", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:true , Public:true }, "Zero", $asm00.TypeRef("Line"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RectangleBorder */ 

(function RectangleBorder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };


  function RectangleBorder__ctor () {
  }; 

  function RectangleBorder_Draw$00 (sb, referenceRectangle, borderColor, depth) {
    $thisType.lBorder.X = +(referenceRectangle.get_Left());
    $thisType.lBorder.Y = +(referenceRectangle.get_Top());
    $thisType.rBorder.X = +(referenceRectangle.get_Right());
    $thisType.rBorder.Y = +(referenceRectangle.get_Top());
    $thisType.tBorder.X = +(referenceRectangle.get_Left());
    $thisType.tBorder.Y = +(referenceRectangle.get_Top());
    $thisType.bBorder.X = +(referenceRectangle.get_Left());
    $thisType.bBorder.Y = +(referenceRectangle.get_Bottom());
    $thisType.hScale.X = +(referenceRectangle.Width);
    $thisType.vScale.Y = +(referenceRectangle.Height);
    $thisType.hScale.Y = $thisType.vScale.X = 1;
    $thisType.hScale.X = +(referenceRectangle.Width);
    $thisType.vScale.Y = +(referenceRectangle.Height);
    $thisType.rBorder.X = +(referenceRectangle.get_Right()) - +$thisType.vScale.X;
    $thisType.bBorder.Y = +(referenceRectangle.get_Bottom()) - +$thisType.vScale.X;
    $S00().CallVirtual("Draw", null, sb, 
      $T05().nullTex, 
      $thisType.lBorder.MemberwiseClone(), 
      null, 
      borderColor.MemberwiseClone(), 
      0, 
      $T00().get_Zero().MemberwiseClone(), 
      $thisType.vScale, 
      $T06().None, 
      0.9
    );
    $S00().CallVirtual("Draw", null, sb, 
      $T05().nullTex, 
      $thisType.rBorder.MemberwiseClone(), 
      null, 
      borderColor.MemberwiseClone(), 
      0, 
      $T00().get_Zero().MemberwiseClone(), 
      $thisType.vScale, 
      $T06().None, 
      0.9
    );
    $S00().CallVirtual("Draw", null, sb, 
      $T05().nullTex, 
      $thisType.tBorder.MemberwiseClone(), 
      null, 
      borderColor.MemberwiseClone(), 
      0, 
      $T00().get_Zero().MemberwiseClone(), 
      $thisType.hScale, 
      $T06().None, 
      0.9
    );
    $S00().CallVirtual("Draw", null, sb, 
      $T05().nullTex, 
      $thisType.bBorder.MemberwiseClone(), 
      null, 
      borderColor.MemberwiseClone(), 
      0, 
      $T00().get_Zero().MemberwiseClone(), 
      $thisType.hScale, 
      $T06().None, 
      0.9
    );
  }; 

  function RectangleBorder_Draw$01 (sb, referenceRectangle, borderColor, screenScale) {
    $thisType.lBorder.X = +(referenceRectangle.get_Left());
    $thisType.lBorder.Y = +(referenceRectangle.get_Top());
    $thisType.rBorder.Y = +(referenceRectangle.get_Top());
    $thisType.tBorder.X = +(referenceRectangle.get_Left());
    $thisType.tBorder.Y = +(referenceRectangle.get_Top());
    $thisType.bBorder.X = +(referenceRectangle.get_Left());
    $thisType.hScale.X = +(referenceRectangle.Width);
    $thisType.vScale.Y = +(referenceRectangle.Height);
    if (screenScale) {
      $thisType.hScale.Y = $thisType.vScale.X = +((1 / +$T05().screenScale));
      $thisType.rBorder.X = +(referenceRectangle.get_Right()) - +$thisType.vScale.X;
      $thisType.bBorder.Y = +(referenceRectangle.get_Bottom()) - +$thisType.vScale.X;
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.lBorder.MemberwiseClone(), $T05().screenScale).MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.vScale.MemberwiseClone(), $T05().screenScale), 
        $T06().None, 
        0.9
      );
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.rBorder.MemberwiseClone(), $T05().screenScale).MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.vScale.MemberwiseClone(), $T05().screenScale), 
        $T06().None, 
        0.9
      );
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.tBorder.MemberwiseClone(), $T05().screenScale).MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.hScale.MemberwiseClone(), $T05().screenScale), 
        $T06().None, 
        0.9
      );
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.bBorder.MemberwiseClone(), $T05().screenScale).MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $S01().CallStatic($T00(), "op_Multiply", null, $thisType.hScale.MemberwiseClone(), $T05().screenScale), 
        $T06().None, 
        0.9
      );
    } else {
      $thisType.hScale.Y = $thisType.vScale.X = 1;
      $thisType.rBorder.X = +(referenceRectangle.get_Right()) - +$thisType.vScale.X;
      $thisType.bBorder.Y = +(referenceRectangle.get_Bottom()) - +$thisType.vScale.X;
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $thisType.lBorder.MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $thisType.vScale, 
        $T06().None, 
        0.9
      );
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $thisType.rBorder.MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $thisType.vScale, 
        $T06().None, 
        0.9
      );
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $thisType.tBorder.MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $thisType.hScale, 
        $T06().None, 
        0.9
      );
      $S00().CallVirtual("Draw", null, sb, 
        $T05().nullTex, 
        $thisType.bBorder.MemberwiseClone(), 
        null, 
        borderColor.MemberwiseClone(), 
        0, 
        $T00().get_Zero().MemberwiseClone(), 
        $thisType.hScale, 
        $T06().None, 
        0.9
      );
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "RectangleBorder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RectangleBorder__ctor
    );

    $.Method({Static:true , Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Single
        ]), 
      RectangleBorder_Draw$00
    );

    $.Method({Static:true , Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Boolean
        ]), 
      RectangleBorder_Draw$01
    );

    $.Field({Static:true , Public:false}, "lBorder", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "rBorder", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "tBorder", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "bBorder", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "hScale", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:true , Public:false}, "vScale", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    function RectangleBorder__cctor () {
      $thisType.lBorder = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.rBorder = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.tBorder = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.bBorder = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.hScale = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.vScale = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.lBorder = $T00().get_One().MemberwiseClone();
      $thisType.rBorder = $T00().get_One().MemberwiseClone();
      $thisType.tBorder = $T00().get_One().MemberwiseClone();
      $thisType.bBorder = $T00().get_One().MemberwiseClone();
      $thisType.hScale = $T00().get_One().MemberwiseClone();
      $thisType.vScale = $T00().get_One().MemberwiseClone();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RectangleBorder__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SaveFile */ 

(function SaveFile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Double))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.IO.FileStream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.IO.FileMode)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.Runtime.Serialization.SerializationException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.Console)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.IO.Stream)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.String), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Double), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.IO.FileStream, [$asm02.System.String, $asm02.System.IO.FileMode]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Runtime.Serialization.Formatters.Binary.BinaryFormatter, null))) ();
  };


  function SaveFile__ctor (LastLevelEmpty) {
    this.winList = $S00().Construct();
    this.loseList = $S00().Construct();
    this.timerWinList = $S01().Construct();
    this.timerLoseList = $S01().Construct();
    this.enchantSlots = 0;
    this.bestOnslaughtWave = 0;
    this.bestOnslaughtWaveLevel = $T03().Empty;
    if (LastLevelEmpty) {
      this.lastPlayedLevel = $T03().Empty;
    } else {
      this.lastPlayedLevel = "c0b0";
    }
  }; 

  function SaveFile_AssignLocalVariables (save) {
    this.winList = save.winList;
    $T04().WriteLine(JSIL.ConcatString("          unlocked bosses: ", $T05().$Box((this.winList).get_Count())));
    this.loseList = save.loseList;
    $T04().WriteLine(JSIL.ConcatString("          unlocked bosses: ", $T05().$Box((this.loseList).get_Count())));
    this.enchantSlots = (save.enchantSlots | 0);
    $T04().WriteLine(JSIL.ConcatString("   enchant slots (bosses): ", $T05().$Box(this.enchantSlots)));
    this.bestOnslaughtWave = (save.bestOnslaughtWave | 0);
    $T04().WriteLine(JSIL.ConcatString("        bestOnslaughtWave: ", $T05().$Box(this.bestOnslaughtWave)));
    this.bestOnslaughtWaveLevel = save.bestOnslaughtWaveLevel;
    if ($T03().IsNullOrWhiteSpace(this.bestOnslaughtWaveLevel)) {
      $T04().WriteLine("   bestOnslaughtWaveLevel: None");
    } else {
      $T04().WriteLine(JSIL.ConcatString("   bestOnslaughtWaveLevel: ", this.bestOnslaughtWaveLevel));
    }
    this.lastPlayedLevel = save.lastPlayedLevel;
    $T04().WriteLine(JSIL.ConcatString("        last level played: ", this.lastPlayedLevel));
    this.timerWinList = save.timerWinList;
    $T04().WriteLine(JSIL.ConcatString("             timerWinList: ", $T05().$Box((this.timerWinList).get_Count())));
    this.timerLoseList = save.timerLoseList;
    $T04().WriteLine(JSIL.ConcatString("            timerLoseList: ", $T05().$Box((this.timerLoseList).get_Count())));
  }; 

  function SaveFile_Load (filename, $exception) {
    var thisSave = new $thisType(true);
    $T04().WriteLine(("loading " + filename + "..."));
    var stream = $S02().Construct(filename, $T08().Open);
    try {
      try {
        var formatter = $S03().Construct();
        thisSave = $thisType.$Cast(formatter.Deserialize(stream)).MemberwiseClone();
        this.AssignLocalVariables(thisSave);
        $T04().WriteLine("load successful.");
      } catch ($exception) {
        if ($T0A().$Is($exception)) {
          var e = $exception;
          $T0B().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T04().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T04().WriteLine();
      stream.Close();
    }
  }; 

  function SaveFile_Print (filename, $exception) {
    var thisSave = new $thisType(true);
    $T04().WriteLine(("loading " + filename + "..."));
    var stream = $S02().Construct(filename, $T08().Open);
    try {
      try {
        var formatter = $S03().Construct();
        thisSave = $thisType.$Cast(formatter.Deserialize(stream)).MemberwiseClone();
        $T04().WriteLine(JSIL.ConcatString("last level played: ", thisSave.lastPlayedLevel));
        $T04().WriteLine(JSIL.ConcatString("enchant slots (bosses): ", $T05().$Box(thisSave.enchantSlots)));
        $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0D(), ["best onslaught wave: ", $T05().$Box(thisSave.bestOnslaughtWave), ", on level: ", thisSave.bestOnslaughtWaveLevel])));

        for (var i = 0; i < ((thisSave.winList).get_Count() | 0); i = ((i + 1) | 0)) {
          $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0D(), [" win list[", $T05().$Box(i), "]: ", (thisSave.winList).get_Item(i), ", best time: ", $T0F().$Box((thisSave.timerWinList).get_Item(i))])));
        }

        for (i = 0; i < ((thisSave.loseList).get_Count() | 0); i = ((i + 1) | 0)) {
          $T04().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0D(), ["lose list[", $T05().$Box(i), "]: ", (thisSave.loseList).get_Item(i), ", best time: ", $T0F().$Box((thisSave.timerLoseList).get_Item(i))])));
        }
        $T04().WriteLine();
      } catch ($exception) {
        if ($T0A().$Is($exception)) {
          var e = $exception;
          $T0B().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T04().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T04().WriteLine();
      stream.Close();
    }
  }; 

  function SaveFile_Save (filename, $exception) {
    $T04().WriteLine(("saving " + filename + "..."));
    var formatter = $S03().Construct();
    var stream = $S02().Construct(filename, $T08().Create);
    try {
      try {
        formatter.Serialize(stream, this);
        $T04().WriteLine("save successful.");
      } catch ($exception) {
        if ($T0A().$Is($exception)) {
          var e = $exception;
          $T0B().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          $T04().WriteLine(JSIL.ConcatString("failed.\n", e.get_Message()));
          throw $exception;
        } else {
          throw $exception;
        }
      }
    } finally {
      $T04().WriteLine();
      stream.Close();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "SaveFile", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      SaveFile__ctor
    );

    $.Method({Static:false, Public:false}, "AssignLocalVariables", 
      JSIL.MethodSignature.Action($.Type), 
      SaveFile_AssignLocalVariables
    );

    $.Method({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.String), 
      SaveFile_Load
    );

    $.Method({Static:false, Public:true }, "Print", 
      JSIL.MethodSignature.Action($.String), 
      SaveFile_Print
    );

    $.Method({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($.String), 
      SaveFile_Save
    );

    $.Field({Static:false, Public:true }, "winList", $asm02.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:true }, "loseList", $asm02.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:true }, "enchantSlots", $.Int32);

    $.Field({Static:false, Public:true }, "bestOnslaughtWave", $.Int32);

    $.Field({Static:false, Public:true }, "bestOnslaughtWaveLevel", $.String);

    $.Field({Static:false, Public:true }, "lastPlayedLevel", $.String);

    $.Field({Static:false, Public:true }, "timerWinList", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Double]));

    $.Field({Static:false, Public:true }, "timerLoseList", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Double]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ShadowDrawer */ 

(function ShadowDrawer$Members () {
  var $, $thisType;

  function ShadowDrawer__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "ShadowDrawer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShadowDrawer__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Shape */ 

(function Shape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Line)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.Line))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm02.System.Int32))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm00.Shape))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Line, [
        $asm01.Microsoft.Xna.Framework.Vector2, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Boolean
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.PrimitiveType, $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm02.System.Int32, $asm02.System.Int32, 
        System.Array.Of($asm02.System.Int32), $asm02.System.Int32, 
        $asm02.System.Int32
      ], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector3, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.Collections.Generic.List$b1.Of($asm02.System.Int32), null))) ();
  };


  function Shape__ctor$00 (Vertices) {
    this.vertices = JSIL.Array.New($T01(), Vertices.length);

    for (var i = 0; i < (Vertices.length | 0); i = ((i + 1) | 0)) {
      this.vertices[i] = $S00().Construct((+Vertices[i].X - +((+($T03().halfResolution.X) / +$T03().screenScale))), -(+Vertices[i].Y - +((+($T03().halfResolution.Y) / +$T03().screenScale))));
    }
    this.color = $T04().Color$Black$value.MemberwiseClone();
    this.lines = JSIL.Array.New($T05(), this.vertices.length);

    for (i = 0; i < (((this.vertices.length | 0) - 1) | 0); i = ((i + 1) | 0)) {
      this.lines[i] = $S01().Construct(this.vertices[i].MemberwiseClone(), this.vertices[((i + 1) | 0)].MemberwiseClone(), false);
    }
    if ((this.vertices.length | 0) > 0) {
      this.lines[(((this.lines.length | 0) - 1) | 0)] = $S01().Construct(this.vertices[(((this.vertices.length | 0) - 1) | 0)].MemberwiseClone(), this.vertices[0].MemberwiseClone(), false);
    }
    this.ind = JSIL.Array.New($T02(), 0);
    this.vert = JSIL.Array.New($T07(), 0);
    this.triangulated = this.fail = false;
    this.outlined = true;
    $T03().WriteLine(this.toString());
  }; 

  function Shape__ctor$01 (referenceRectangle) {
    this.vertices = JSIL.Array.New($T01(), 4);
    this.vertices[0] = $S00().Construct((+(referenceRectangle.get_Left()) - +((+($T03().halfResolution.X) / +$T03().screenScale))), -(+(referenceRectangle.get_Top()) - +((+($T03().halfResolution.Y) / +$T03().screenScale))));
    this.vertices[1] = $S00().Construct((+(referenceRectangle.get_Right()) - +((+($T03().halfResolution.X) / +$T03().screenScale))), -(+(referenceRectangle.get_Top()) - +((+($T03().halfResolution.Y) / +$T03().screenScale))));
    this.vertices[2] = $S00().Construct((+(referenceRectangle.get_Right()) - +((+($T03().halfResolution.X) / +$T03().screenScale))), -(+(referenceRectangle.get_Bottom()) - +((+($T03().halfResolution.Y) / +$T03().screenScale))));
    this.vertices[3] = $S00().Construct((+(referenceRectangle.get_Left()) - +((+($T03().halfResolution.X) / +$T03().screenScale))), -(+(referenceRectangle.get_Bottom()) - +((+($T03().halfResolution.Y) / +$T03().screenScale))));
    this.color = $T04().Color$Black$value.MemberwiseClone();
    this.lines = JSIL.Array.New($T05(), this.vertices.length);

    for (var i = 0; i < (((this.vertices.length | 0) - 1) | 0); i = ((i + 1) | 0)) {
      this.lines[i] = $S01().Construct(this.vertices[i].MemberwiseClone(), this.vertices[((i + 1) | 0)].MemberwiseClone(), false);
    }
    this.lines[(((this.lines.length | 0) - 1) | 0)] = $S01().Construct(this.vertices[(((this.vertices.length | 0) - 1) | 0)].MemberwiseClone(), this.vertices[0].MemberwiseClone(), false);
    this.ind = JSIL.Array.New($T02(), 0);
    this.vert = JSIL.Array.New($T07(), 0);
    this.outlined = true;
    this.triangulated = this.fail = false;
  }; 

  function Shape_CreateLines () {
    this.lines = JSIL.Array.New($T05(), this.vertices.length);

    for (var i = 0; i < (((this.vertices.length | 0) - 1) | 0); i = ((i + 1) | 0)) {
      this.lines[i] = $S01().Construct(this.vertices[i].MemberwiseClone(), this.vertices[((i + 1) | 0)].MemberwiseClone(), false);
    }
    this.lines[(((this.lines.length | 0) - 1) | 0)] = $S01().Construct(this.vertices[(((this.vertices.length | 0) - 1) | 0)].MemberwiseClone(), this.vertices[0].MemberwiseClone(), false);
    this.outlined = true;
  }; 

  function Shape_Debug (evaluate) {
    var $hoisted00 = new ($T0B())();
    var returnString = $T0C().Empty;
    returnString = "{";
    returnString = (JSIL.ConcatString(returnString, "color:", this.color));
    returnString = (JSIL.ConcatString(returnString, "\ntriangulated:", $T0A().$Box(this.triangulated)));
    returnString = (JSIL.ConcatString(returnString, "\noutlined:", $T0A().$Box(this.outlined)));
    returnString = (JSIL.ConcatString(returnString, "\nvertices:", $T02().$Box(this.vertices.length)));

    for (var i = 0; i < (this.vertices.length | 0); i = ((i + 1) | 0)) {
      var obj = returnString;
      returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\nvertex[", $T02().$Box(i), "]:", this.vertices[i]])));
    }
    returnString = (JSIL.ConcatString(returnString, "\nlines:", $T02().$Box(this.lines.length)));

    for (i = 0; i < (this.lines.length | 0); i = ((i + 1) | 0)) {
      obj = returnString;
      returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\nline[", $T02().$Box(i), "]:", this.lines[i]])));
    }
    returnString = (JSIL.ConcatString(returnString, "\nvert:", $T02().$Box(this.vert.length)));

    for (i = 0; i < (this.vert.length | 0); i = ((i + 1) | 0)) {
      obj = returnString;
      returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\nvert[", $T02().$Box(i), "].Position:", this.vert[i].Position])));
      obj = returnString;
      returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, " vert[", $T02().$Box(i), "].Color:", this.vert[i].Color])));
    }
    returnString = (JSIL.ConcatString(returnString, "\nind:", $T02().$Box(this.ind.length)));

    for (i = 0; i < (this.ind.length | 0); i = ((i + 1) | 0)) {
      obj = returnString;
      returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\nind[", $T02().$Box(i), "]:", $T02().$Box(this.ind[i])])));
    }
    returnString = (JSIL.ConcatString(returnString, "}"));
    if (evaluate) {

      for (i = 0; i < (this.vertices.length | 0); i = ((i + 1) | 0)) {
        var contains = false;
        var array = this.vert;

      $loop5: 
        for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
          var v = array[j];
          if ($T0B().op_Equality(v.Position, ($hoisted00._ctor(this.vertices[i], 0), 
                $hoisted00))) {
            contains = true;
            break $loop5;
          }
        }
        if (!contains) {
          obj = returnString;
          returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\nvertex[", $T02().$Box(i), "] (", this.vertices[i], ") not contained in vert"])));
        }
      }
      if ((+((+(this.ind.length) / 3)) + 2) !== +(this.vertices.length)) {
        obj = returnString;
        returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\n(ind.Length / 3f) + 2f != (float)(vertices.Length). ind.Length:", $T02().$Box(this.ind.length), " vertices.Length:", $T02().$Box(this.vertices.length)])));
      } else {
        returnString = (JSIL.ConcatString(returnString, "\ntriangles:"));

        for (i = 0; i < (this.ind.length | 0); i = ((i + 3) | 0)) {
          var ind = (this.ind[i] | 0);
          var ind2 = (this.ind[((i + 1) | 0)] | 0);
          var ind3 = (this.ind[((i + 2) | 0)] | 0);
          if (!(!((ind === ind2) || 
                (ind2 === ind3)) && (ind !== ind3))) {
            obj = returnString;
            returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\ntriangle contains two of the same points: {ind[", $T02().$Box(i), "]:", $T02().$Box(this.ind[i]), " ind[", $T02().$Box(((i + 1) | 0)), "]:", $T02().$Box(this.ind[((i + 1) | 0)]), " ind[", $T02().$Box(((i + 2) | 0)), "]:", $T02().$Box(this.ind[((i + 2) | 0)]), "}"])));
          } else {
            obj = returnString;
            returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, "\ntriangle[", $T02().$Box(((i / 3) | 0)), "]:{ind[", $T02().$Box(i), "]:", $T02().$Box(this.ind[i]), " ind[", $T02().$Box(((i + 1) | 0)), "]:", $T02().$Box(this.ind[((i + 1) | 0)]), " ind[", $T02().$Box(((i + 2) | 0)), "]:", $T02().$Box(this.ind[((i + 2) | 0)]), "}{vertex[", $T02().$Box(this.ind[i]), "]:", this.vert[this.ind[i]].Position, " vertex[", $T02().$Box(this.ind[((i + 1) | 0)]), "]:", this.vert[this.ind[((i + 1) | 0)]].Position, " vertex[", $T02().$Box(this.ind[((i + 2) | 0)]), "]:", this.vert[this.ind[((i + 2) | 0)]].Position, "}"])));
          }
        }
      }
    }
    return returnString;
  }; 

  function Shape_Draw () {
    if ((this.vertices.length | 0) > 2) {
      if (!this.triangulated) {
        this.Triangulate();
      }
      $S02().CallVirtual("DrawUserIndexedPrimitives$b1", [$asm01.Microsoft.Xna.Framework.Graphics.VertexPositionColor], $T03().graphics.get_GraphicsDevice(), 
        $T12().TriangleList, 
        this.vert, 
        0, 
        this.vert.length, 
        this.ind, 
        0, 
        (((this.ind.length | 0) / 3) | 0)
      );
    }
  }; 

  function Shape_DrawLines () {
    if (!this.outlined) {
      this.CreateLines();
    }
    var array = this.lines;

    for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
      var i = array[j].MemberwiseClone();
      i.Draw();
    }
  }; 

  function Shape_get_Lines () {
    return this.lines;
  }; 

  function Shape_get_NumberOfLines () {
    return this.lines.length;
  }; 

  function Shape_get_ShapeColor () {
    return this.color;
  }; 

  function Shape_get_Vertices () {
    return this.vertices;
  }; 

  function Shape_IsClockwise (TriangleVertexA, TriangleVertexB, TriangleVertexC) {
    var clockwisetracker = (((+TriangleVertexB.X - +TriangleVertexA.X) * (+TriangleVertexB.Y + +TriangleVertexA.Y)) + ((+TriangleVertexC.X - +TriangleVertexB.X) * (+TriangleVertexC.Y + +TriangleVertexB.Y))) + ((+TriangleVertexA.X - +TriangleVertexC.X) * (+TriangleVertexA.Y + +TriangleVertexC.Y));
    return (clockwisetracker > 0);
  }; 

  function Shape_set_ShapeColor (value) {
    this.color = value.MemberwiseClone();
    this.SetColor();
  }; 

  function Shape_set_Vertices (value) {
    this.vertices = value;
    this.outlined = this.fail = this.triangulated = false;
  }; 

  function Shape_SetColor () {

    for (var i = 0; i < (this.vert.length | 0); i = ((i + 1) | 0)) {
      this.vert[i].Color = this.color.MemberwiseClone();
    }
  }; 

  function Shape_toString () {
    var returnString = $T0C().Empty;
    returnString = (JSIL.ConcatString("{vertices: ", $T02().$Box(this.vertices.length)));

    for (var i = 0; i < (this.vertices.length | 0); i = ((i + 1) | 0)) {
      var obj = returnString;
      returnString = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [obj, " vertex[", $T02().$Box(i), "]:", this.vertices[i]])));
    }
    return JSIL.ConcatString(returnString, "}");
  }; 

  function Shape_TotalLines (Shapes) {
    var totalLines = 0;

    for (var i = 0; i < (Shapes.length | 0); i = ((i + 1) | 0)) {
      var s = Shapes[i];
      totalLines = ((totalLines + (s.get_NumberOfLines() | 0)) | 0);
    }
    return totalLines;
  }; 

  function Shape_TriangleContains (TriangleVertexA, TriangleVertexB, TriangleVertexC, TestableVector) {
    var v0 = $T01().op_Subtraction(TriangleVertexC.MemberwiseClone(), TriangleVertexA);
    var v = $T01().op_Subtraction(TriangleVertexB.MemberwiseClone(), TriangleVertexA);
    var v2 = $T01().op_Subtraction(TestableVector.MemberwiseClone(), TriangleVertexA);
    var u = +((((+$T01().Dot(v, v) * +$T01().Dot(v2, v0)) - (+$T01().Dot(v, v0) * +$T01().Dot(v2, v))) / ((+$T01().Dot(v0, v0) * +$T01().Dot(v, v)) - (+$T01().Dot(v0, v) * +$T01().Dot(v, v0)))));
    var v3 = +((((+$T01().Dot(v0, v0) * +$T01().Dot(v2, v)) - (+$T01().Dot(v0, v) * +$T01().Dot(v2, v0))) / ((+$T01().Dot(v0, v0) * +$T01().Dot(v, v)) - (+$T01().Dot(v0, v) * +$T01().Dot(v, v0)))));
    return (!((u <= 0) || 
        (v3 <= 0) || 
        (u >= 1) || 
        (v3 >= 1)) && ((u + v3) < 1));
  }; 

  function Shape_Triangulate () {
    this.vert = JSIL.Array.New($T07(), this.vertices.length);

    for (var i = 0; i < (this.vertices.length | 0); i = ((i + 1) | 0)) {
      this.vert[i].Position = $S03().Construct(this.vertices[i], 0);
      this.vert[i].Color = this.color.MemberwiseClone();
    }
    this.ind = JSIL.Array.New($T02(), Math.imul((((this.vertices.length | 0) - 2) | 0), 3));
    var currentIndex = 0;
    var vertexList = $S04().Construct();

    for (i = 0; i < (this.vertices.length | 0); i = ((i + 1) | 0)) {
      vertexList.Add(i);
    }
    if (currentIndex >= (vertexList.get_Count() | 0)) {
      currentIndex = 0;
      var lastVertex = (vertexList.get_Item((((vertexList.get_Count() | 0) - 1) | 0)) | 0);
    } else if (currentIndex === 0) {
      lastVertex = (vertexList.get_Item((((vertexList.get_Count() | 0) - 1) | 0)) | 0);
    } else {
      lastVertex = (vertexList.get_Item(((currentIndex - 1) | 0)) | 0);
    }
    if (currentIndex >= (((vertexList.get_Count() | 0) - 1) | 0)) {
      var nextVertex = (vertexList.get_Item(0) | 0);
    } else {
      nextVertex = (vertexList.get_Item(((currentIndex + 1) | 0)) | 0);
    }
    var currVertex = (vertexList.get_Item(currentIndex) | 0);
    var indIndex = 0;

    for (var killloop = 0; ((vertexList.get_Count() | 0) > 3) && (killloop < 100); ) {
      var isEar = true;

    $loop3: 
      for (i = 0; i < (vertexList.get_Count() | 0); i = ((i + 1) | 0)) {
        if (this.TriangleContains(this.vertices[lastVertex], this.vertices[currVertex].MemberwiseClone(), this.vertices[nextVertex].MemberwiseClone(), this.vertices[vertexList.get_Item(i)].MemberwiseClone())) {
          isEar = false;
          break $loop3;
        }
      }
      if (isEar) {
        if (this.IsClockwise(this.vertices[lastVertex], this.vertices[currVertex], this.vertices[nextVertex])) {
          this.ind[indIndex] = lastVertex;
          indIndex = ((indIndex + 1) | 0);
          this.ind[indIndex] = currVertex;
          indIndex = ((indIndex + 1) | 0);
          this.ind[indIndex] = nextVertex;
          indIndex = ((indIndex + 1) | 0);
        } else {
          this.ind[indIndex] = nextVertex;
          indIndex = ((indIndex + 1) | 0);
          this.ind[indIndex] = currVertex;
          indIndex = ((indIndex + 1) | 0);
          this.ind[indIndex] = lastVertex;
          indIndex = ((indIndex + 1) | 0);
        }
        vertexList.RemoveAt(currentIndex);
        killloop = 0;
      } else {
        currentIndex = ((currentIndex + 1) | 0);
        killloop = ((killloop + 1) | 0);
      }
      if (currentIndex >= (vertexList.get_Count() | 0)) {
        currentIndex = 0;
        lastVertex = (vertexList.get_Item((((vertexList.get_Count() | 0) - 1) | 0)) | 0);
      } else if (currentIndex === 0) {
        lastVertex = (vertexList.get_Item((((vertexList.get_Count() | 0) - 1) | 0)) | 0);
      } else {
        lastVertex = (vertexList.get_Item(((currentIndex - 1) | 0)) | 0);
      }
      if (currentIndex >= (((vertexList.get_Count() | 0) - 1) | 0)) {
        nextVertex = (vertexList.get_Item(0) | 0);
      } else {
        nextVertex = (vertexList.get_Item(((currentIndex + 1) | 0)) | 0);
      }
      currVertex = (vertexList.get_Item(currentIndex) | 0);
    }
    if ((vertexList.get_Count() | 0) === 3) {
      if (this.IsClockwise(this.vertices[lastVertex], this.vertices[currVertex], this.vertices[nextVertex])) {
        this.ind[(((this.ind.length | 0) - 3) | 0)] = (vertexList.get_Item(0) | 0);
        this.ind[(((this.ind.length | 0) - 2) | 0)] = (vertexList.get_Item(1) | 0);
        this.ind[(((this.ind.length | 0) - 1) | 0)] = (vertexList.get_Item(2) | 0);
      } else {
        this.ind[(((this.ind.length | 0) - 3) | 0)] = (vertexList.get_Item(2) | 0);
        this.ind[(((this.ind.length | 0) - 2) | 0)] = (vertexList.get_Item(1) | 0);
        this.ind[(((this.ind.length | 0) - 1) | 0)] = (vertexList.get_Item(0) | 0);
      }
      this.triangulated = true;
      var result = true;
    } else {
      if (!this.fail) {
        $T03().WriteLine("Triangulation failed.");
        $T03().WriteLine(JSIL.ConcatString("untriangulated vertices:", $T02().$Box(vertexList.get_Count())));

        for (i = 0; i < (vertexList.get_Count() | 0); i = ((i + 1) | 0)) {
          $T03().Write(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [" vertex[", $T02().$Box(vertexList.get_Item(i)), "]:", this.vertices[vertexList.get_Item(i)]])));
        }
        $T03().WriteLine();
        $T03().WriteLine();
      }
      this.fail = true;
      result = false;
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Shape", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      Shape__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Shape__ctor$01
    );

    $.Method({Static:false, Public:true }, "CreateLines", 
      JSIL.MethodSignature.Void, 
      Shape_CreateLines
    );

    $.Method({Static:false, Public:true }, "Debug", 
      new JSIL.MethodSignature($.String, [$.Boolean]), 
      Shape_Debug
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Void, 
      Shape_Draw
    );

    $.Method({Static:false, Public:true }, "DrawLines", 
      JSIL.MethodSignature.Void, 
      Shape_DrawLines
    );

    $.Method({Static:false, Public:true }, "get_Lines", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Line")])), 
      Shape_get_Lines
    );

    $.Method({Static:false, Public:true }, "get_NumberOfLines", 
      JSIL.MethodSignature.Return($.Int32), 
      Shape_get_NumberOfLines
    );

    $.Method({Static:false, Public:true }, "get_ShapeColor", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Color")), 
      Shape_get_ShapeColor
    );

    $.Method({Static:false, Public:true }, "get_Vertices", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      Shape_get_Vertices
    );

    $.Method({Static:false, Public:true }, "IsClockwise", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      Shape_IsClockwise
    );

    $.Method({Static:false, Public:true }, "set_ShapeColor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Color")), 
      Shape_set_ShapeColor
    );

    $.Method({Static:false, Public:true }, "set_Vertices", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      Shape_set_Vertices
    );

    $.Method({Static:false, Public:true }, "SetColor", 
      JSIL.MethodSignature.Void, 
      Shape_SetColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Shape_toString
    );

    $.Method({Static:true , Public:true }, "TotalLines", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Type])]), 
      Shape_TotalLines
    );

    $.Method({Static:false, Public:true }, "TriangleContains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      Shape_TriangleContains
    );

    $.Method({Static:false, Public:true }, "Triangulate", 
      JSIL.MethodSignature.Return($.Boolean), 
      Shape_Triangulate
    );

    $.Field({Static:false, Public:false}, "color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "lines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Line")]));

    $.Field({Static:false, Public:false}, "vertices", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "triangulated", $.Boolean);

    $.Field({Static:false, Public:false}, "fail", $.Boolean);

    $.Field({Static:false, Public:false}, "outlined", $.Boolean);

    $.Field({Static:false, Public:false}, "ind", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "vert", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.VertexPositionColor")]));

    $.Property({Static:false, Public:true }, "Lines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Line")]));

    $.Property({Static:false, Public:true }, "Vertices", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Property({Static:false, Public:true }, "NumberOfLines", $.Int32);

    $.Property({Static:false, Public:true }, "ShapeColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SmartFramerate */ 

(function SmartFramerate$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Double)) ();
  };


  function SmartFramerate__ctor (oldFrameWeight) {
    this.numerator = (oldFrameWeight | 0);
    this.weight = +((+oldFrameWeight / (+oldFrameWeight - 1)));
    this.currentFrametimes = 0;
  }; 

  function SmartFramerate_get_Framerate () {
    return +((+(this.numerator) / +this.currentFrametimes));
  }; 

  function SmartFramerate_Update (timeSinceLastFrame) {
    this.currentFrametimes = +((+this.currentFrametimes / +this.weight));
    this.currentFrametimes = +this.currentFrametimes + +timeSinceLastFrame;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "SmartFramerate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      SmartFramerate__ctor
    );

    $.Method({Static:false, Public:true }, "get_Framerate", 
      JSIL.MethodSignature.Return($.Double), 
      SmartFramerate_get_Framerate
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Double), 
      SmartFramerate_Update
    );

    $.Field({Static:false, Public:false}, "currentFrametimes", $.Double);

    $.Field({Static:false, Public:false}, "weight", $.Double);

    $.Field({Static:false, Public:false}, "numerator", $.Int32);

    $.Property({Static:false, Public:true }, "Framerate", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SmoothFramerate */ 

(function SmoothFramerate$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm02.System.Double))) ();
  };


  function SmoothFramerate__ctor (Samples) {
    this.samples = (Samples | 0);
    this.currentFrame = 0;
    this.frametimes = JSIL.Array.New($T01(), this.samples);
    this.currentFrametimes = 0;
  }; 

  function SmoothFramerate_get_Framerate () {
    return +((+(this.samples) / +this.currentFrametimes));
  }; 

  function SmoothFramerate_Update (timeSinceLastFrame) {
    this.currentFrame = (((this.currentFrame | 0) + 1) | 0);
    if ((this.currentFrame | 0) >= (this.frametimes.length | 0)) {
      this.currentFrame = 0;
    }
    this.currentFrametimes = +this.currentFrametimes - +this.frametimes[this.currentFrame];
    this.frametimes[this.currentFrame] = +timeSinceLastFrame;
    this.currentFrametimes = +this.currentFrametimes + +this.frametimes[this.currentFrame];
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "SmoothFramerate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      SmoothFramerate__ctor
    );

    $.Method({Static:false, Public:true }, "get_Framerate", 
      JSIL.MethodSignature.Return($.Double), 
      SmoothFramerate_get_Framerate
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Double), 
      SmoothFramerate_Update
    );

    $.Field({Static:false, Public:false}, "samples", $.Int32);

    $.Field({Static:false, Public:false}, "currentFrame", $.Int32);

    $.Field({Static:false, Public:false}, "frametimes", $jsilcore.TypeRef("System.Array", [$.Double]));

    $.Field({Static:false, Public:false}, "currentFrametimes", $.Double);

    $.Property({Static:false, Public:true }, "Framerate", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Square */ 

(function Square$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };


  function Square__ctor$00 (Texture, InitialPosition, DrawDepth) {
    this.draw = true;
    if (DrawDepth !== null) {
      this.depth = +JSIL.Nullable_Value(DrawDepth);
    } else {
      this.draw = false;
    }
    this.texture = Texture;
    this.position = InitialPosition.ToVector2();
    this.position.X = +this.position.X * 16;
    this.position.Y = +this.position.Y * 16;
    this.drawTex = true;
    this.color = $T02().Color$White$value.MemberwiseClone();
    this.scale = +$T03().screenScale;
    this.collider = $S00().Construct(InitialPosition.X, InitialPosition.Y, 16, 16);
    this.useExactPixels = false;
  }; 

  function Square__ctor$01 (Texture, InitialPosition, Scale, CenterTextureOnPosition, CreateCollider, DrawDepth) {
    this.draw = true;
    if (DrawDepth !== null) {
      this.depth = +JSIL.Nullable_Value(DrawDepth);
    } else {
      this.draw = false;
    }
    if (CreateCollider) {
      this.collider = $S01().Construct(InitialPosition, (Texture.get_Bounds()).get_Size());
    } else {
      this.collider = $T04().get_Empty().MemberwiseClone();
    }
    this.texture = Texture;
    this.drawTex = true;
    this.color = $T02().Color$White$value.MemberwiseClone();
    this.scale = +Scale;
    this.initialPosition = InitialPosition.MemberwiseClone();
    if (CenterTextureOnPosition) {
      this.position = (($T07().op_Subtraction(
            InitialPosition.ToVector2().MemberwiseClone(), 
            $S02().CallStatic($T07(), "op_Division", null, (((this.texture).get_Bounds()).get_Size().MemberwiseClone()).ToVector2().MemberwiseClone(), 2)
          ).MemberwiseClone()).ToPoint().MemberwiseClone()).ToVector2();
    } else {
      this.position = InitialPosition.ToVector2();
    }
    $T03().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T09(), ["initialPosition:", InitialPosition, " position:", this.position, " texture:", this.texture.GraphicsResource$Name$value, " depth:", $T05().$Box(this.depth)])));
  }; 

  function Square__ctor$02 (Texture, drawColor, initialPos, meh, Scale, hascollider, UseExactPixels, DrawDepth) {
    this.draw = true;
    this.scale = +Scale;
    if (DrawDepth !== null) {
      this.depth = +JSIL.Nullable_Value(DrawDepth);
    } else {
      this.draw = false;
    }
    this.position = initialPos.ToVector2();
    this.color = drawColor.MemberwiseClone();
    if (hascollider) {
      this.collider = $S00().Construct(((this.position.X) | 0), ((this.position.Y) | 0), ((16 * +this.scale) | 0), ((16 * +this.scale) | 0));
    } else {
      this.collider = $T04().get_Empty().MemberwiseClone();
    }
    this.useExactPixels = UseExactPixels;
    this.texture = Texture;
  }; 

  function Square_Draw (sb) {
    if (this.draw) {
      $S03().CallVirtual("Draw", null, sb, 
        this.texture, 
        $S04().CallStatic($T07(), "op_Multiply", null, this.position.MemberwiseClone(), this.scale).MemberwiseClone(), 
        null, 
        this.color.MemberwiseClone(), 
        0, 
        $T07().get_Zero().MemberwiseClone(), 
        this.scale, 
        $T0D().None, 
        this.depth
      );
    }
  }; 

  function Square_get_Collider () {
    return this.collider;
  }; 

  function Square_get_Position () {
    return this.position;
  }; 

  function Square_get_Velocity () {
    return this.velocity;
  }; 

  function Square_set_Collider (value) {
    this.collider = value.MemberwiseClone();
  }; 

  function Square_set_Position (value) {
    this.position.X = +value.X - 16;
    this.position.Y = +value.Y - 16;
  }; 

  function Square_set_Velocity (value) {
    this.velocity = value.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Square", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $asm02.TypeRef("System.Nullable`1", [$.Single])
        ]), 
      Square__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $.Single, $.Boolean, 
          $.Boolean, $asm02.TypeRef("System.Nullable`1", [$.Single])
        ]), 
      Square__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $.Single, $.Boolean, 
          $.Boolean, $asm02.TypeRef("System.Nullable`1", [$.Single])
        ]), 
      Square__ctor$02
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Square_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Collider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Square_get_Collider
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_get_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_get_Velocity
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Collider", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Square_set_Collider
    );

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_set_Velocity
    );

    $.Field({Static:false, Public:false}, "collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "texture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "drawTex", $.Boolean);

    $.Field({Static:false, Public:true }, "depth", $.Single);

    $.Field({Static:false, Public:true }, "color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "scale", $.Single);

    $.Field({Static:false, Public:true }, "useExactPixels", $.Boolean);

    $.Field({Static:false, Public:true }, "initialPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Field({Static:false, Public:true }, "draw", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true , Virtual:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Irbis.ICollisionObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Tooltip */ 

(function Tooltip$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };


  function Tooltip__ctor (Text, Texture, Location) {
    this.text = Text;
    this.texture = Texture;
    this.textureDepth = +this.text.depth - 0.001;
    this.displayRectangle = $S00().Construct((((Location.X | 0) - ((((this.texture).get_Width() | 0) / 2) | 0)) | 0), ((+(Location.Y) - (+(this.text.characterHeight) + +$T04().screenScale)) | 0), (this.texture).get_Width(), (this.texture).get_Height());
  }; 

  function Tooltip_Draw (sb) {
    (this.text).Draw(sb);
    sb.Draw(
      this.texture, 
      this.displayRectangle.MemberwiseClone(), 
      null, 
      $T06().Color$White$value.MemberwiseClone(), 
      0, 
      $T07().get_Zero().MemberwiseClone(), 
      $T08().None, 
      this.textureDepth
    );
  }; 

  function Tooltip_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["text:", (this.text).toString(), " texture:{Width:", $T0B().$Box((this.texture).get_Width()), " Height:", $T0B().$Box((this.texture).get_Height()), "} displayRectangle:", this.displayRectangle]));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Tooltip", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Print"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point")
        ]), 
      Tooltip__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Tooltip_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Tooltip_toString
    );

    $.Field({Static:false, Public:false}, "text", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "texture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "displayRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "textureDepth", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TooltipGenerator */ 

(function TooltipGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Tooltip)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.RenderTarget2D)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Graphics.RenderTarget2D, [
        $asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice, $asm02.System.Int32, 
        $asm02.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };


  function TooltipGenerator__ctor (game) {
    this.spriteBatch = new ($T01())($T02().game.get_GraphicsDevice());
    this.bg = (game.get_Content()).Load$b1($T03())("menu background");
    this.top = (game.get_Content()).Load$b1($T03())("menu border top");
    this.bottom = (game.get_Content()).Load$b1($T03())("menu border bottom");
    this.left = (game.get_Content()).Load$b1($T03())("menu border left");
    this.right = (game.get_Content()).Load$b1($T03())("menu border right");
    this.topleft = (game.get_Content()).Load$b1($T03())("menu corner top left");
    this.topright = (game.get_Content()).Load$b1($T03())("menu corner top right");
    this.bottomleft = (game.get_Content()).Load$b1($T03())("menu corner bottom left");
    this.bottomright = (game.get_Content()).Load$b1($T03())("menu corner bottom right");
    this.downarrow = (game.get_Content()).Load$b1($T03())("popup arrow");
  }; 

  function TooltipGenerator_CreateTooltip (Text, Location, depth) {
    var popup = $S00().Construct($T02().halfResolution.X, $T02().font.MemberwiseClone(), $T09().Color$White$value.MemberwiseClone(), false, Location, $T0A().Forward, depth);
    popup.Update(Text, true);
    var size = popup.PrintSize(Text).MemberwiseClone();
    size.X = (((size.X | 0) + Math.imul(((((this.topleft).get_Width() | 0) + ((this.bottomright).get_Width() | 0)) | 0), $T02().textScale)) | 0);
    size.Y = (((size.Y | 0) + ((((this.topleft).get_Height() | 0) + ((this.bottomright).get_Height() | 0)) | 0)) | 0);
    return new ($T0B())(popup, this.CreateTooltipTexture(size.MemberwiseClone(), false), Location);
  }; 

  function TooltipGenerator_CreateTooltipTexture (Size, screenScale) {
    var renderTarget = $S01().Construct($T02().game.get_GraphicsDevice(), Size.X, Size.Y);
    var drawLocation = $T0E().get_Zero().MemberwiseClone();
    $T02().game.get_GraphicsDevice().SetRenderTarget(renderTarget);
    $T02().game.get_GraphicsDevice().Clear($T09().Color$Transparent$value.MemberwiseClone());
    (this.spriteBatch).Begin(
      $T10().FrontToBack, 
      $T11().AlphaBlend, 
      $T12().PointWrap, 
      $T13().None, 
      $T14().CullCounterClockwise, 
      null, 
      $T15().get_Identity().MemberwiseClone()
    );
    if (screenScale) {
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.topleft, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      drawLocation.X = +(Size.X) - (+((this.topright).get_Width()) * +$T02().screenScale);
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.topright, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      drawLocation.X = 0;
      drawLocation.Y = +(Size.Y) - (+((this.bottomleft).get_Width()) * +$T02().screenScale);
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bottomleft, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      drawLocation.X = +(Size.X) - (+((this.bottomright).get_Width()) * +$T02().screenScale);
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bottomright, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.top, 
        $S03().Construct((+((this.topleft).get_Width()) * +$T02().screenScale), 0), 
        $S04().Construct(0, 0, ((+((+(Size.X) / +$T02().screenScale)) - +(((this.topleft).get_Width() | 0) + ((this.topright).get_Width() | 0))) | 0), (this.top).get_Height()), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.left, 
        $S03().Construct(0, (+((this.topleft).get_Height()) * +$T02().screenScale)), 
        $S04().Construct(0, 0, (this.left).get_Width(), ((+((+(Size.Y) / +$T02().screenScale)) - +(((this.topleft).get_Height() | 0) + ((this.bottomleft).get_Height() | 0))) | 0)), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bg, 
        $S03().Construct((+((this.topleft).get_Width()) * +$T02().screenScale), (+((this.topleft).get_Height()) * +$T02().screenScale)), 
        $S04().Construct(0, 0, ((+((+(Size.X) / +$T02().screenScale)) - +(((this.topleft).get_Width() | 0) + ((this.bottomright).get_Width() | 0))) | 0), ((+((+(Size.Y) / +$T02().screenScale)) - +(((this.topleft).get_Height() | 0) + ((this.bottomright).get_Height() | 0))) | 0)), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.right, 
        $S03().Construct((+(Size.X) - (+((this.right).get_Width()) * +$T02().screenScale)), (+((this.topright).get_Height()) * +$T02().screenScale)), 
        $S04().Construct(0, 0, (this.right).get_Width(), ((+((+(Size.Y) / +$T02().screenScale)) - +(((this.topright).get_Height() | 0) + ((this.bottomright).get_Height() | 0))) | 0)), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bottom, 
        $S03().Construct((+((this.bottomright).get_Width()) * +$T02().screenScale), (+(Size.Y) - (+((this.bottom).get_Height()) * +$T02().screenScale))), 
        $S04().Construct(0, 0, ((+((+(Size.X) / +$T02().screenScale)) - +(((this.topleft).get_Width() | 0) + ((this.topright).get_Width() | 0))) | 0), (this.bottom).get_Height()), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        $T02().screenScale, 
        $T16().None, 
        0.5
      );
    } else {
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.topleft, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      drawLocation.X = +((Size.X | 0) - ((this.topright).get_Width() | 0));
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.topright, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      drawLocation.X = 0;
      drawLocation.Y = +((Size.Y | 0) - ((this.bottomleft).get_Width() | 0));
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bottomleft, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      drawLocation.X = +((Size.X | 0) - ((this.bottomright).get_Width() | 0));
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bottomright, 
        drawLocation.MemberwiseClone(), 
        null, 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.top, 
        $S03().Construct(+((this.topleft).get_Width()), 0), 
        $S04().Construct(0, 0, (((Size.X | 0) - ((((this.topleft).get_Width() | 0) + ((this.topright).get_Width() | 0)) | 0)) | 0), (this.top).get_Height()), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.left, 
        $S03().Construct(0, +((this.topleft).get_Height())), 
        $S04().Construct(0, 0, (this.left).get_Width(), (((Size.Y | 0) - ((((this.topleft).get_Height() | 0) + ((this.bottomright).get_Height() | 0)) | 0)) | 0)), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bg, 
        $S03().Construct(+((this.topleft).get_Width()), +((this.topleft).get_Height())), 
        $S04().Construct(0, 0, (((Size.X | 0) - ((((this.topleft).get_Width() | 0) + ((this.bottomright).get_Width() | 0)) | 0)) | 0), (((Size.Y | 0) - ((((this.topleft).get_Height() | 0) + ((this.bottomright).get_Height() | 0)) | 0)) | 0)), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.right, 
        $S03().Construct(+((Size.X | 0) - ((this.right).get_Width() | 0)), +((this.topright).get_Height())), 
        $S04().Construct(0, 0, (this.right).get_Width(), (((Size.Y | 0) - ((((this.topright).get_Height() | 0) + ((this.bottomright).get_Height() | 0)) | 0)) | 0)), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, 
        this.bottom, 
        $S03().Construct(+((this.bottomright).get_Width()), +((Size.Y | 0) - ((this.bottom).get_Height() | 0))), 
        $S04().Construct(0, 0, (((Size.X | 0) - ((((this.bottomleft).get_Width() | 0) + ((this.bottomright).get_Width() | 0)) | 0)) | 0), (this.bottom).get_Height()), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T0E().get_Zero().MemberwiseClone(), 
        1, 
        $T16().None, 
        0.5
      );
    }
    (this.spriteBatch).End();
    $T02().game.get_GraphicsDevice().SetRenderTarget(null);
    return renderTarget;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "TooltipGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Game")), 
      TooltipGenerator__ctor
    );

    $.Method({Static:false, Public:true }, "CreateTooltip", 
      new JSIL.MethodSignature($asm00.TypeRef("Tooltip"), [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $.Single
        ]), 
      TooltipGenerator_CreateTooltip
    );

    $.Method({Static:false, Public:true }, "CreateTooltipTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Boolean]), 
      TooltipGenerator_CreateTooltipTexture
    );

    $.Field({Static:false, Public:false}, "spriteBatch", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"));

    $.Field({Static:false, Public:false}, "bg", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "top", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "bottom", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "left", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "right", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "topleft", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "topright", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "bottomleft", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "bottomright", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "downarrow", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TotalMeanFramerate */ 

(function TotalMeanFramerate$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Int64)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Double)) ();
  };


  function TotalMeanFramerate__ctor (create) {
    this.frames = $T01().Create(0, 0, 0);
    this.currentFrametimes = 0;
  }; 

  function TotalMeanFramerate_get_Framerate () {
    return +((+(this.frames).ToNumber(-1, false) / +this.currentFrametimes));
  }; 

  function TotalMeanFramerate_Update (timeSinceLastFrame) {
    this.currentFrametimes = +this.currentFrametimes + +timeSinceLastFrame;
    this.frames = $T01().op_Addition(this.frames, $T01().Create(1, 0, 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "TotalMeanFramerate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      TotalMeanFramerate__ctor
    );

    $.Method({Static:false, Public:true }, "get_Framerate", 
      JSIL.MethodSignature.Return($.Double), 
      TotalMeanFramerate_get_Framerate
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Double), 
      TotalMeanFramerate_Update
    );

    $.Field({Static:false, Public:false}, "frames", $.Int64);

    $.Field({Static:false, Public:false}, "currentFrametimes", $.Double);

    $.Property({Static:false, Public:true }, "Framerate", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class UIElementDiscreteSlider */ 

(function UIElementDiscreteSlider$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };


  function UIElementDiscreteSlider__ctor (Align, SliderLocation, OverflowLocation, FillTex, BorderTex, OverlayTex, FillColor, BorderColor, OverlayColor, TotalNumberOfElements, NumberOfElementsAtPrimaryLocation, FillSize, BorderSize, NegativeSpace, DrawDepth) {
    var $hoisted00 = new ($T01())(), $hoisted01 = new ($T01())(), $hoisted02 = new ($T01())(), $hoisted03 = new ($T01())();
    this.primaryLocation = SliderLocation.ToVector2();
    this.secondaryLocation = OverflowLocation.ToVector2();
    this.fillTextures = JSIL.Array.New($T03(), TotalNumberOfElements);
    this.borderTextures = JSIL.Array.New($T03(), TotalNumberOfElements);
    this.overlayTexture = OverlayTex;
    this.fillColor = FillColor.MemberwiseClone();
    if (OverlayColor !== null) {
      this.overlayColor = JSIL.Nullable_Value(OverlayColor).MemberwiseClone();
      this.overlay = true;
    } else {
      this.overlay = false;
    }
    if (BorderColor !== null) {
      this.borderColor = JSIL.Nullable_Value(BorderColor).MemberwiseClone();
      this.border = true;
    } else {
      this.border = false;
    }
    this.value = this.maxValue = (((TotalNumberOfElements | 0) - 1) | 0);
    this.depth = +DrawDepth;
    this.bounds = JSIL.Array.New($T07(), TotalNumberOfElements);
    this.borderLocations = JSIL.Array.New($T08(), TotalNumberOfElements);
    this.fillLocations = JSIL.Array.New($T08(), TotalNumberOfElements);
    $T09().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0B(), ["BorderSize:", BorderSize, " FillSize:", FillSize])));
    $T09().WriteLine(JSIL.ConcatString("(BorderSize.X - FillSize.X) / 2:", $T05().$Box((((((BorderSize.X | 0) - (FillSize.X | 0)) | 0) / 2) | 0))));

    for (var i = 0; i < (NumberOfElementsAtPrimaryLocation | 0); i = ((i + 1) | 0)) {
      this.fillTextures[i] = FillTex[((i % (FillTex.length | 0)) | 0)];
      this.borderTextures[i] = BorderTex[((i % (FillTex.length | 0)) | 0)];
      this.borderLocations[i] = ($T01().op_Addition(SliderLocation, ($hoisted00._ctor(Math.imul((((BorderSize.X | 0) + (NegativeSpace | 0)) | 0), i), 0), 
            $hoisted00)).MemberwiseClone()).ToVector2();
      this.fillLocations[i] = ($T01().op_Addition(
          $T01().op_Addition(SliderLocation, ($hoisted01._ctor(Math.imul((((BorderSize.X | 0) + (NegativeSpace | 0)) | 0), i), 0), 
              $hoisted01)), 
          ($S00().CallStatic($T08(), "op_Division", null, ($T01().op_Subtraction(BorderSize, FillSize).MemberwiseClone()).ToVector2().MemberwiseClone(), 2).MemberwiseClone()).ToPoint()
        ).MemberwiseClone()).ToVector2();
    }

    for (i = (NumberOfElementsAtPrimaryLocation | 0); i < (TotalNumberOfElements | 0); i = ((i + 1) | 0)) {
      this.fillTextures[i] = FillTex[((i % (FillTex.length | 0)) | 0)];
      this.borderTextures[i] = BorderTex[((i % (FillTex.length | 0)) | 0)];
      this.borderLocations[i] = ($T01().op_Addition(OverflowLocation, ($hoisted02._ctor(Math.imul((((BorderSize.X | 0) + (NegativeSpace | 0)) | 0), ((i - (NumberOfElementsAtPrimaryLocation | 0)) | 0)), 0), 
            $hoisted02)).MemberwiseClone()).ToVector2();
      this.fillLocations[i] = ($T01().op_Addition(
          $T01().op_Addition(OverflowLocation, ($hoisted03._ctor(Math.imul((((BorderSize.X | 0) + (NegativeSpace | 0)) | 0), ((i - (NumberOfElementsAtPrimaryLocation | 0)) | 0)), 0), 
              $hoisted03)), 
          ($S00().CallStatic($T08(), "op_Division", null, ($T01().op_Subtraction(BorderSize, FillSize).MemberwiseClone()).ToVector2().MemberwiseClone(), 2).MemberwiseClone()).ToPoint()
        ).MemberwiseClone()).ToVector2();
    }
  }; 

  function UIElementDiscreteSlider_Draw (sb) {

    for (var i = (((this.bounds.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      if ((this.value | 0) >= i) {
        $S01().CallVirtual("Draw", null, sb, 
          this.fillTextures[i], 
          this.fillLocations[i].MemberwiseClone(), 
          null, 
          this.fillColor.MemberwiseClone(), 
          0, 
          $T08().get_Zero().MemberwiseClone(), 
          1, 
          $T0F().None, 
          +this.depth + 0.01
        );
      }
      $S01().CallVirtual("Draw", null, sb, 
        this.borderTextures[i], 
        this.borderLocations[i].MemberwiseClone(), 
        null, 
        this.borderColor.MemberwiseClone(), 
        0, 
        $T08().get_Zero().MemberwiseClone(), 
        1, 
        $T0F().None, 
        this.depth
      );
    }
  }; 

  function UIElementDiscreteSlider_Update (updateValue) {
    this.value = (((updateValue | 0) - 1) | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "UIElementDiscreteSlider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 15, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Irbis.Direction"), $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm02.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), $.Int32, 
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Int32, 
          $.Single
        ]), 
      UIElementDiscreteSlider__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      UIElementDiscreteSlider_Draw
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Int32), 
      UIElementDiscreteSlider_Update
    );

    $.Field({Static:false, Public:false}, "borderTextures", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]));

    $.Field({Static:false, Public:false}, "overlayTexture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "fillTextures", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]));

    $.Field({Static:false, Public:false}, "bounds", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:false}, "borderLocations", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "fillLocations", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "primaryLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "secondaryLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "fillColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "overlayColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "overlay", $.Boolean);

    $.Field({Static:false, Public:false}, "borderColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "border", $.Boolean);

    $.Field({Static:false, Public:false}, "depth", $.Single);

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "maxValue", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class UIElementSlider */ 

(function UIElementSlider$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.Math)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.System.Double)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [
        $asm02.System.Int32, $asm02.System.Int32, 
        $asm02.System.Int32, $asm02.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("System.String")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean
      ]))) ();
  };


  function UIElementSlider__ctor (AlignSide, Bounds, TextOffset, MaxValue, FillColor, BackgroundColor, OverlayColor, BorderColor, FillTexture, BackgroundTexture, OverlayTexture, DrawBorder, PrintFont, ScreenScale, FillDepth, BackgroundDepth, OverlayDepth, TextDepth) {
    this.overlayDepth = +OverlayDepth;
    this.textDepth = +TextDepth;
    this.fillDepth = +FillDepth;
    this.backgroundDepth = +BackgroundDepth;
    this.maxValue = +MaxValue;
    this.value = +MaxValue;
    this.halfMaxValue = +((+this.maxValue / 2));
    this.align = AlignSide;
    this.screenScale = ScreenScale;
    this.fillColor = FillColor.MemberwiseClone();
    if (BackgroundColor !== null) {
      this.backgroundColor = JSIL.Nullable_Value(BackgroundColor).MemberwiseClone();
    }
    if (OverlayColor !== null) {
      this.overlayColor = JSIL.Nullable_Value(OverlayColor).MemberwiseClone();
    }
    if (BorderColor !== null) {
      this.borderColor = JSIL.Nullable_Value(BorderColor).MemberwiseClone();
    }
    this.fillTexture = FillTexture;
    if (BackgroundTexture !== null) {
      this.backgroundTexture = BackgroundTexture;
      this.drawBackground = true;
    } else {
      this.drawBackground = false;
    }
    if (OverlayTexture !== null) {
      this.overlayTexture = OverlayTexture;
      this.drawOverlay = true;
    } else {
      this.drawOverlay = false;
    }
    if (PrintFont !== null) {
      this.drawText = true;
    } else {
      this.drawText = false;
    }
    this.drawBorder = DrawBorder;
    if (ScreenScale) {
      if (this.align === $T00().Right) {
        this.bounds = $S00().Construct((((Bounds.X | 0) - (Bounds.Width | 0)) | 0), Bounds.Y, Bounds.Width, Bounds.Height);
        this.valueRect = $S00().Construct(0, 0, (((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) * +$T07().screenScale) | 0), ((+(this.bounds.Height) * +$T07().screenScale) | 0));
        if (this.drawText) {
          this.printValue = $S01().Construct(this.bounds.Width, JSIL.Nullable_Value(PrintFont).MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), false, $S02().Construct(((((this.bounds).get_Right() | 0) - (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)) | 0), (this.bounds).get_Center().Y), $T00().Right, this.textDepth);
          this.printLocation = $T09().op_Addition(
            $S03().Construct(+(((this.bounds).get_Right() | 0) - (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)), +((this.bounds).get_Center().Y)), 
            TextOffset.ToVector2()
          ).MemberwiseClone();
          $S04().CallVirtual("Update", null, this.printValue, (this.value).toString());
        }
      } else if (this.align === $T00().Forward) {
        this.bounds = $S00().Construct((((Bounds.X | 0) - (((Bounds.Width | 0) / 2) | 0)) | 0), Bounds.Y, Bounds.Width, Bounds.Height);
        this.halfWidth = +(((this.bounds.Width | 0) / 2 | 0));
        this.valueRect = $S00().Construct(0, 0, (((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) * +$T07().screenScale) | 0), ((+(this.bounds.Height) * +$T07().screenScale) | 0));
        if (this.drawText) {
          this.printValue = $S01().Construct(this.bounds.Width, JSIL.Nullable_Value(PrintFont).MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), false, (this.bounds).get_Center(), $T00().Forward, this.textDepth);
          this.printLocation = $T09().op_Addition(
            ((this.bounds).get_Center().MemberwiseClone()).ToVector2().MemberwiseClone(), 
            TextOffset.ToVector2()
          );
          $S04().CallVirtual("Update", null, this.printValue, (this.value).toString());
        }
      } else {
        this.bounds = Bounds.MemberwiseClone();
        this.valueRect = $S00().Construct(0, 0, (((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) * +$T07().screenScale) | 0), ((+(this.bounds.Height) * +$T07().screenScale) | 0));
        if (this.drawText) {
          this.printValue = $S01().Construct(this.bounds.Width, JSIL.Nullable_Value(PrintFont).MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), false, $S02().Construct(((((this.bounds).get_Left() | 0) + (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)) | 0), (this.bounds).get_Center().Y), $T00().Left, this.textDepth);
          this.printLocation = $T09().op_Addition(
            $S03().Construct(+(((this.bounds).get_Left() | 0) + (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)), +((this.bounds).get_Center().Y)), 
            TextOffset.ToVector2()
          ).MemberwiseClone();
          $S04().CallVirtual("Update", null, this.printValue, (this.value).toString());
        }
      }
      this.valueLocation = this.origin = $S05().CallStatic($T09(), "op_Multiply", null, ((this.bounds).get_Location().MemberwiseClone()).ToVector2().MemberwiseClone(), $T07().screenScale);
    } else {
      if (this.align === $T00().Right) {
        this.bounds = $S00().Construct((((Bounds.X | 0) - (Bounds.Width | 0)) | 0), Bounds.Y, Bounds.Width, Bounds.Height);
        this.valueRect = $S00().Construct(0, 0, ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0), this.bounds.Height);
        if (this.drawText) {
          this.printValue = $S01().Construct(this.bounds.Width, JSIL.Nullable_Value(PrintFont).MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), false, $S02().Construct(((((this.bounds).get_Right() | 0) - (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)) | 0), (this.bounds).get_Center().Y), $T00().Right, this.textDepth);
          this.printLocation = $T09().op_Addition(
            $S03().Construct(+(((this.bounds).get_Right() | 0) - (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)), +((this.bounds).get_Center().Y)), 
            TextOffset.ToVector2()
          ).MemberwiseClone();
          $S04().CallVirtual("Update", null, this.printValue, (this.value).toString());
        }
      } else if (this.align === $T00().Forward) {
        this.bounds = $S00().Construct((((Bounds.X | 0) - (((Bounds.Width | 0) / 2) | 0)) | 0), Bounds.Y, Bounds.Width, Bounds.Height);
        this.halfWidth = +(((this.bounds.Width | 0) / 2 | 0));
        this.valueRect = $S00().Construct(0, 0, ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0), this.bounds.Height);
        if (this.drawText) {
          this.printValue = $S01().Construct(this.bounds.Width, JSIL.Nullable_Value(PrintFont).MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), false, (this.bounds).get_Center(), $T00().Forward, this.textDepth);
          this.printLocation = $T09().op_Addition(
            ((this.bounds).get_Center().MemberwiseClone()).ToVector2().MemberwiseClone(), 
            TextOffset.ToVector2()
          );
          $S04().CallVirtual("Update", null, this.printValue, (this.value).toString());
        }
      } else {
        this.bounds = Bounds.MemberwiseClone();
        this.valueRect = $S00().Construct(0, 0, ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0), this.bounds.Height);
        if (this.drawText) {
          this.printValue = $S01().Construct(this.bounds.Width, JSIL.Nullable_Value(PrintFont).MemberwiseClone(), $T04().Color$White$value.MemberwiseClone(), false, $S02().Construct(((((this.bounds).get_Left() | 0) + (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)) | 0), (this.bounds).get_Center().Y), $T00().Left, this.textDepth);
          this.printLocation = $T09().op_Addition(
            $S03().Construct(+(((this.bounds).get_Left() | 0) + (((JSIL.Nullable_Value(PrintFont).charHeight | 0) / 2) | 0)), +((this.bounds).get_Center().Y)), 
            TextOffset.ToVector2()
          ).MemberwiseClone();
          $S04().CallVirtual("Update", null, this.printValue, (this.value).toString());
        }
      }
      this.valueLocation = this.origin = ((this.bounds).get_Location().MemberwiseClone()).ToVector2();
    }
    this.overlayAnimationSpeed = 0.05;
    this.currentOverlayFrame = 0;
    this.timeSinceLastFrame = 0;
    this.overlaySourceRect = $S00().Construct(Math.imul(this.currentOverlayFrame, this.bounds.Width), 0, this.bounds.Width, this.bounds.Height);
  }; 

  function UIElementSlider_Contains (mouseState) {
    return $S06().CallVirtual("Contains", null, this.bounds, 
      mouseState.get_Position().X, 
      mouseState.get_Position().Y
    );
  }; 

  function UIElementSlider_Draw (sb) {
    if (this.screenScale) {
      if (this.drawOverlay) {
        $S07().CallVirtual("Draw", null, sb, 
          this.overlayTexture, 
          this.origin.MemberwiseClone(), 
          this.overlaySourceRect.MemberwiseClone(), 
          this.overlayColor.MemberwiseClone(), 
          0, 
          $T09().get_Zero().MemberwiseClone(), 
          $T07().screenScale, 
          $T0C().None, 
          this.overlayDepth
        );
      }
      $S07().CallVirtual("Draw", null, sb, 
        this.fillTexture, 
        this.valueLocation.MemberwiseClone(), 
        this.valueRect.MemberwiseClone(), 
        this.fillColor.MemberwiseClone(), 
        0, 
        $T09().get_Zero().MemberwiseClone(), 
        1, 
        $T0C().None, 
        this.fillDepth
      );
      if (this.drawText) {
        (this.printValue).Draw(sb, ($S05().CallStatic($T09(), "op_Multiply", null, this.printLocation.MemberwiseClone(), $T07().screenScale).MemberwiseClone()).ToPoint());
      }
      if (this.drawBorder) {
        $S08().CallStatic($T0D(), "Draw", null, sb, this.bounds.MemberwiseClone(), this.borderColor.MemberwiseClone(), true);
      }
      if (this.drawBackground) {
      }
    } else {
      if (this.drawOverlay) {
        $S07().CallVirtual("Draw", null, sb, 
          this.overlayTexture, 
          this.origin.MemberwiseClone(), 
          this.overlaySourceRect.MemberwiseClone(), 
          this.overlayColor.MemberwiseClone(), 
          0, 
          $T09().get_Zero().MemberwiseClone(), 
          1, 
          $T0C().None, 
          this.overlayDepth
        );
      }
      if (this.align === $T00().Left) {
        $S07().CallVirtual("Draw", null, sb, 
          this.fillTexture, 
          this.valueLocation.MemberwiseClone(), 
          this.valueRect.MemberwiseClone(), 
          this.fillColor.MemberwiseClone(), 
          0, 
          $T09().get_Zero().MemberwiseClone(), 
          1, 
          $T0C().None, 
          this.fillDepth
        );
      } else {
        $S07().CallVirtual("Draw", null, sb, 
          this.fillTexture, 
          this.valueLocation.MemberwiseClone(), 
          this.valueRect.MemberwiseClone(), 
          this.fillColor.MemberwiseClone(), 
          0, 
          $T09().get_Zero().MemberwiseClone(), 
          1, 
          $T0C().None, 
          this.fillDepth
        );
      }
      if (this.drawText) {
        (this.printValue).Draw(sb, (this.printLocation).ToPoint());
      }
      if (this.drawBorder) {
        $S08().CallStatic($T0D(), "Draw", null, sb, this.bounds.MemberwiseClone(), this.borderColor.MemberwiseClone(), false);
      }
      if (this.drawBackground) {
      }
    }
  }; 

  function UIElementSlider_Pressed$00 (mouseState) {
    return !(!$S06().CallVirtual("Contains", null, this.bounds, 
        mouseState.get_Position().X, 
        mouseState.get_Position().Y
      ) || (mouseState.get_LeftButton() !== $T0E().Pressed));
  }; 

  function UIElementSlider_Pressed$01 (mouseState, previousMouseState) {
    return !(!$S06().CallVirtual("Contains", null, this.bounds, 
        mouseState.get_Position().X, 
        mouseState.get_Position().Y
      ) || 
      (mouseState.get_LeftButton() !== $T0E().Pressed) || (previousMouseState.get_LeftButton() === $T0E().Pressed));
  }; 

  function UIElementSlider_Update$02 (v) {
    this.timeSinceLastFrame = +this.timeSinceLastFrame + +$T07().get_DeltaTime();
    if (+this.timeSinceLastFrame >= +this.overlayAnimationSpeed) {
      this.timeSinceLastFrame = +this.timeSinceLastFrame - +this.overlayAnimationSpeed;
      this.currentOverlayFrame = (((this.currentOverlayFrame | 0) + 1) | 0);
    }
    if (Math.imul(this.currentOverlayFrame, 150) >= ((this.overlayTexture).get_Width() | 0)) {
      this.currentOverlayFrame = 0;
    }
    this.overlaySourceRect.X = Math.imul(this.currentOverlayFrame, 150);
    this.UpdateRect(v);
  }; 

  function UIElementSlider_Update$03 (border_color, fill_color, v) {
    this.borderColor = border_color.MemberwiseClone();
    this.fillColor = fill_color.MemberwiseClone();
    this.Update(v);
  }; 

  function UIElementSlider_UpdateRect (v) {
    this.value = +v;
    if (this.align === $T00().Right) {
      this.valueRect.X = ((((this.bounds).get_Right() | 0) - ((Math.ceil(+((+this.value / +this.maxValue)) * +(this.bounds.Width))) | 0)) | 0);
      this.valueRect.Width = ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0);
      $T07().WriteLine(JSIL.ConcatString("valueRect.Right:", $T12().$Box((this.valueRect).get_Right())));
    } else if (this.align === $T00().Forward) {
      this.valueRect.X = ((((this.bounds).get_Left() | 0) + ((+this.halfWidth - (+((+this.value / +this.maxValue)) * +this.halfWidth)) | 0)) | 0);
      this.valueRect.Width = ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0);
    } else {
      this.valueRect.Width = ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0);
    }
    (this.printValue).Update($T03().__Type__.__PublicInterface__.$ToString(this.value, "0", null), true);
  }; 

  function UIElementSlider_UpdateValue$04 (Value) {
    this.value = +Value;
    if (this.screenScale) {
      if (this.align === $T00().Right) {
        this.valueLocation.X = +(((Math.ceil((+((this.bounds).get_Right()) - (+((+this.value / +this.maxValue)) * +(this.bounds.Width)) * $T07().screenScale))) | 0));
      } else if (this.align === $T00().Forward) {
        this.valueLocation.X = ((+((this.bounds).get_Left()) + +this.halfWidth) - (+((+this.value / +this.maxValue)) * +this.halfWidth)) * +$T07().screenScale;
      }
      this.valueRect.Width = (((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) * +$T07().screenScale) | 0);
    } else {
      if (this.align === $T00().Right) {
        this.valueLocation.X = +(((Math.ceil(+((this.bounds).get_Right()) - (+((+this.value / +this.maxValue)) * +(this.bounds.Width)))) | 0));
        this.valueRect.X = (((this.bounds.Width | 0) - (this.valueRect.Width | 0)) | 0);
      } else if (this.align === $T00().Forward) {
        this.valueLocation.X = (+((this.bounds).get_Left()) + +this.halfWidth) - (+((+this.value / +this.maxValue)) * +this.halfWidth);
      }
      this.valueRect.Width = ((+((+this.value / +this.maxValue)) * +(this.bounds.Width)) | 0);
    }
    if (this.drawText) {
      (this.printValue).Update($T03().__Type__.__PublicInterface__.$ToString(this.value, "0", null), true);
    }
  }; 

  function UIElementSlider_UpdateValue$05 (Value, DrawOverlay) {
    this.drawOverlay = DrawOverlay;
    if (this.drawOverlay) {
      this.timeSinceLastFrame = +this.timeSinceLastFrame + +$T07().get_DeltaTime();
      if (+this.timeSinceLastFrame >= +this.overlayAnimationSpeed) {
        this.timeSinceLastFrame = +this.timeSinceLastFrame - +this.overlayAnimationSpeed;
        this.currentOverlayFrame = (((this.currentOverlayFrame | 0) + 1) | 0);
      }
      if (Math.imul(this.currentOverlayFrame, 150) >= ((this.overlayTexture).get_Width() | 0)) {
        this.currentOverlayFrame = 0;
      }
      this.overlaySourceRect.X = Math.imul(this.currentOverlayFrame, 150);
    }
    this.UpdateValue(Value);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "UIElementSlider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 18, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Irbis.Direction"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm02.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), $asm02.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Boolean, 
          $asm02.TypeRef("System.Nullable`1", [$asm00.TypeRef("Font")]), $.Boolean, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      UIElementSlider__ctor
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")]), 
      UIElementSlider_Contains
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      UIElementSlider_Draw
    );

    $.Method({Static:false, Public:true }, "Pressed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")]), 
      UIElementSlider_Pressed$00
    );

    $.Method({Static:false, Public:true }, "Pressed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")]), 
      UIElementSlider_Pressed$01
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Single), 
      UIElementSlider_Update$02
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single
        ]), 
      UIElementSlider_Update$03
    );

    $.Method({Static:false, Public:true }, "UpdateRect", 
      JSIL.MethodSignature.Action($.Single), 
      UIElementSlider_UpdateRect
    );

    $.Method({Static:false, Public:true }, "UpdateValue", 
      JSIL.MethodSignature.Action($.Single), 
      UIElementSlider_UpdateValue$04
    );

    $.Method({Static:false, Public:true }, "UpdateValue", 
      new JSIL.MethodSignature(null, [$.Single, $.Boolean]), 
      UIElementSlider_UpdateValue$05
    );

    $.Field({Static:false, Public:true }, "bounds", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "valueRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "valueLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "backgroundTexture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "overlayTexture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "fillTexture", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "overlayAnimationSpeed", $.Single);

    $.Field({Static:false, Public:false}, "overlaySourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "currentOverlayFrame", $.Int32);

    $.Field({Static:false, Public:false}, "timeSinceLastFrame", $.Single);

    $.Field({Static:false, Public:true }, "value", $.Single);

    $.Field({Static:false, Public:true }, "maxValue", $.Single);

    $.Field({Static:false, Public:false}, "halfWidth", $.Single);

    $.Field({Static:false, Public:false}, "halfMaxValue", $.Single);

    $.Field({Static:false, Public:false}, "align", $asm00.TypeRef("Irbis.Direction"));

    $.Field({Static:false, Public:false}, "fillDepth", $.Single);

    $.Field({Static:false, Public:false}, "backgroundDepth", $.Single);

    $.Field({Static:false, Public:false}, "overlayDepth", $.Single);

    $.Field({Static:false, Public:false}, "textDepth", $.Single);

    $.Field({Static:false, Public:false}, "fillColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "backgroundColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "overlayColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:false}, "borderColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Field({Static:false, Public:true }, "drawOverlay", $.Boolean);

    $.Field({Static:false, Public:true }, "drawBorder", $.Boolean);

    $.Field({Static:false, Public:true }, "drawBackground", $.Boolean);

    $.Field({Static:false, Public:true }, "screenScale", $.Boolean);

    $.Field({Static:false, Public:false}, "drawText", $.Boolean);

    $.Field({Static:false, Public:false}, "printValue", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:true }, "printLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class VendingMachine */ 

(function VendingMachine$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Irbis.VendingType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.UInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.VendingMenu)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.TooltipGenerator)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Player)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Tooltip)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.OnslaughtSpawner)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Irbis.EnchantType)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm02.System.UInt64))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm01.Microsoft.Xna.Framework.Vector2, $asm02.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Single, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };


  function VendingMachine__ctor (startingCost, vendingType, displayRectangle, texture, depth) {
    this.sourceRect = texture.get_Bounds().MemberwiseClone();
    this.displayLocation = (displayRectangle.get_Location().MemberwiseClone()).ToVector2();
    this.collider = displayRectangle.MemberwiseClone();
    this.vendingTex = texture;
    this.drawDepth = +depth;
    this.type = vendingType;
    if (vendingType !== $T01().Enchant) {
      var icons = $T07().LoadEnchantIcons();
      var itemNames = JSIL.Array.New($T09(), icons.length);
      this.itemDescriptions = $T07().LoadEnchantDescriptions();

      for (var i = 0; i < (icons.length | 0); i = ((i + 1) | 0)) {
        itemNames[i] = "butts";
      }
    } else {
      icons = $T07().LoadEnchantIcons();
      itemNames = JSIL.Array.New($T09(), icons.length);
      itemNames[0] = "Bleed";
      itemNames[1] = "Fire";
      itemNames[2] = "Frost";
      itemNames[3] = "Knockback";
      itemNames[4] = "Poison";
      itemNames[5] = "Sharpness";
      itemNames[6] = "Stun";
      this.itemDescriptions = $T07().LoadEnchantDescriptions();
    }
    this.cost = JSIL.Array.New($T0A(), icons.length);

    for (i = 0; i < (icons.length | 0); i = ((i + 1) | 0)) {
      this.cost[i] = $T0A().Create(200, 0, 0);
    }
    this.menu = new ($T0B())(icons, itemNames, this.cost);
    var popuptext = (JSIL.ConcatString($T07().useKey, " to use"));
    this.tooltip = $T07().tooltipGenerator.CreateTooltip(popuptext, $S00().Construct((((+this.displayLocation.X + +(((this.sourceRect.Width | 0) / 2 | 0))) * +$T07().screenScale) | 0), (((+this.displayLocation.Y - +((10 / +$T07().screenScale))) * +$T07().screenScale) | 0)), this.drawDepth);
  }; 

  function VendingMachine_Draw (sb) {
    $S01().CallVirtual("Draw", null, sb, 
      this.vendingTex, 
      $S02().CallStatic($T0F(), "op_Multiply", null, this.displayLocation.MemberwiseClone(), $T07().screenScale).MemberwiseClone(), 
      this.sourceRect.MemberwiseClone(), 
      $T10().Color$White$value.MemberwiseClone(), 
      0, 
      $T0F().get_Zero().MemberwiseClone(), 
      $T07().screenScale, 
      $T11().None, 
      this.drawDepth
    );
    if (!(this.drawMenu || 
        ($T07().jamie === null) || (+$S03().CallStatic($T07(), "DistanceSquared", null, 
            (this.collider).get_Center(), 
            $T07().jamie.get_Collider().get_Center()
          ) > +($T07().vendingMachineUseDistanceSqr)))) {
      (this.tooltip).Draw(sb);
    }
  }; 

  function VendingMachine_LoadMenu () {
    if (!this.drawMenu) {
      this.drawMenu = true;
      $T07().vendingMachineMenu = this.menu;
    } else {
      this.drawMenu = false;
      $T07().vendingMachineMenu = null;
    }
  }; 

  function VendingMachine_MoveSelectionDown () {
    this.selection = ((this.menu).MoveSelectionDown() | 0);
    this.UpdateMenu();
  }; 

  function VendingMachine_MoveSelectionUp () {
    this.selection = ((this.menu).MoveSelectionUp() | 0);
    this.UpdateMenu();
  }; 

  function VendingMachine_OnClick (MouseLocation) {
    if ((this.menu).IconConatains(MouseLocation, this.selection)) {
      this.Purchase(this.selection);
      this.UpdateMenu();
    }
  }; 

  function VendingMachine_Purchase (item) {
    var vendingType = this.type;
    if (vendingType === $T01().Enchant) {
      switch (item) {
        case 0: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[0])) {
            $T07().AddPlayerEnchant($T15().Bleed);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[0]));
            this.cost[0] = $T0A().op_Multiplication(this.cost[0], $T0A().Create(2, 0, 0));
            (this.menu).Update(0, this.cost[0], this.itemDescriptions[0], "Bleed");
          }
          break;

        case 1: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[1])) {
            $T07().AddPlayerEnchant($T15().Fire);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[1]));
            this.cost[1] = $T0A().op_Multiplication(this.cost[1], $T0A().Create(2, 0, 0));
            (this.menu).Update(1, this.cost[1], this.itemDescriptions[1], "Fire");
          }
          break;

        case 2: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[2])) {
            $T07().AddPlayerEnchant($T15().Frost);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[2]));
            this.cost[2] = $T0A().op_Multiplication(this.cost[2], $T0A().Create(2, 0, 0));
            (this.menu).Update(2, this.cost[2], this.itemDescriptions[2], "Frost");
          }
          break;

        case 3: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[3])) {
            $T07().AddPlayerEnchant($T15().Knockback);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[3]));
            this.cost[3] = $T0A().op_Multiplication(this.cost[3], $T0A().Create(2, 0, 0));
            (this.menu).Update(3, this.cost[3], this.itemDescriptions[3], "Knockback");
          }
          break;

        case 4: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[4])) {
            $T07().AddPlayerEnchant($T15().Poison);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[4]));
            this.cost[4] = $T0A().op_Multiplication(this.cost[4], $T0A().Create(2, 0, 0));
            (this.menu).Update(4, this.cost[4], this.itemDescriptions[4], "Poison");
          }
          break;

        case 5: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[5])) {
            $T07().AddPlayerEnchant($T15().Sharpness);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[5]));
            this.cost[5] = $T0A().op_Multiplication(this.cost[5], $T0A().Create(2, 0, 0));
            (this.menu).Update(5, this.cost[5], this.itemDescriptions[5], "Sharpness");
          }
          break;

        case 6: 
          if (!$T0A().op_LessThan($T07().onslaughtSpawner.get_Points(), this.cost[6])) {
            $T07().AddPlayerEnchant($T15().Stun);
            $T07().onslaughtSpawner.set_Points($T0A().op_Subtraction($T07().onslaughtSpawner.Points, this.cost[6]));
            this.cost[6] = $T0A().op_Multiplication(this.cost[6], $T0A().Create(2, 0, 0));
            (this.menu).Update(6, this.cost[6], this.itemDescriptions[6], "Stun");
          }
          break;

      }
    }
    $T07().vendingMachineMenu = this.menu;
  }; 

  function VendingMachine_toString () {
    var debugstring = $T09().Empty;
    debugstring = (JSIL.ConcatString(debugstring, "{location:", this.displayLocation));
    debugstring = (JSIL.ConcatString(debugstring, " depth:", $T04().$Box(this.drawDepth)));
    return JSIL.ConcatString(debugstring, "}");
  }; 

  function VendingMachine_Update$00 (MouseLocation) {
    var tempint = ((this.menu).IconConatains(MouseLocation) | 0);
    if (tempint >= 0) {
      this.selection = tempint;
      this.UpdateMenu();
    }
  }; 

  function VendingMachine_Update$01 (selectedthingy) {
    if (!(((selectedthingy | 0) < 0) || ((selectedthingy | 0) >= (this.menu.cost.length | 0)))) {
      this.selection = (selectedthingy | 0);
      this.UpdateMenu();
    }
  }; 

  function VendingMachine_UpdateMenu () {
    (this.menu).Update(this.selection, this.cost[this.selection], this.itemDescriptions[this.selection], ($T15().$Cast(this.selection)).toString());
    $T07().vendingMachineMenu = this.menu;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "VendingMachine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Irbis.VendingType"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $.Single
        ]), 
      VendingMachine__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      VendingMachine_Draw
    );

    $.Method({Static:false, Public:true }, "LoadMenu", 
      JSIL.MethodSignature.Void, 
      VendingMachine_LoadMenu
    );

    $.Method({Static:false, Public:true }, "MoveSelectionDown", 
      JSIL.MethodSignature.Void, 
      VendingMachine_MoveSelectionDown
    );

    $.Method({Static:false, Public:true }, "MoveSelectionUp", 
      JSIL.MethodSignature.Void, 
      VendingMachine_MoveSelectionUp
    );

    $.Method({Static:false, Public:true }, "OnClick", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")), 
      VendingMachine_OnClick
    );

    $.Method({Static:false, Public:true }, "Purchase", 
      JSIL.MethodSignature.Action($.Int32), 
      VendingMachine_Purchase
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      VendingMachine_toString
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Point")), 
      VendingMachine_Update$00
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($.Int32), 
      VendingMachine_Update$01
    );

    $.Method({Static:false, Public:false}, "UpdateMenu", 
      JSIL.MethodSignature.Void, 
      VendingMachine_UpdateMenu
    );

    $.Field({Static:false, Public:false}, "drawDepth", $.Single);

    $.Field({Static:false, Public:true }, "vendingTex", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:true }, "displayLocation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:true }, "collider", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("Irbis.VendingType"));

    $.Field({Static:false, Public:false}, "sourceRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "tooltip", $asm00.TypeRef("Tooltip"));

    $.Field({Static:false, Public:true }, "drawMenu", $.Boolean);

    $.Field({Static:false, Public:true }, "selection", $.Int32);

    $.Field({Static:false, Public:false}, "menu", $asm00.TypeRef("VendingMenu"));

    $.Field({Static:false, Public:false}, "cost", $jsilcore.TypeRef("System.Array", [$.UInt64]));

    $.Field({Static:false, Public:false}, "itemDescriptions", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class VendingMenu */ 

(function VendingMenu$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm02.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm02.System.UInt64))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.TooltipGenerator)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Irbis.Irbis)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Print)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Irbis.Direction)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.OnslaughtSpawner)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.System.UInt64)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.RectangleBorder)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.RenderTarget2D)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm02.System.Single, $asm02.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Point, [$asm02.System.Int32, $asm02.System.Int32]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Print, [
        $asm02.System.Int32, $asm00.Font, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Boolean, 
        $asm01.Microsoft.Xna.Framework.Point, $asm00.Irbis.Direction, 
        $asm02.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Rectangle, [$asm01.Microsoft.Xna.Framework.Point, $asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.Texture2D, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Nullable$b1.Of($asm01.Microsoft.Xna.Framework.Rectangle), $asm01.Microsoft.Xna.Framework.Color, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Vector2, 
        $asm02.System.Single, $asm01.Microsoft.Xna.Framework.Graphics.SpriteEffects, 
        $asm02.System.Single
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.Microsoft.Xna.Framework.Graphics.SpriteBatch, $asm01.Microsoft.Xna.Framework.Rectangle, 
        $asm01.Microsoft.Xna.Framework.Color, $asm02.System.Single
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm02.System.Boolean, [$asm01.Microsoft.Xna.Framework.Point]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Graphics.RenderTarget2D, [
        $asm01.Microsoft.Xna.Framework.Graphics.GraphicsDevice, $asm02.System.Int32, 
        $asm02.System.Int32
      ]))) ();
  };


  function VendingMenu__ctor (Icons, ItemNames, Prices) {
    this.mainBackground = $T04().tooltipGenerator.CreateTooltipTexture($T05().op_Subtraction($T04().resolution, ($S00().Construct((32 * +$T04().screenScale), (32 * +$T04().screenScale))).ToPoint()).MemberwiseClone(), true);
    this.mainBackgroundVector = $S00().Construct(+(((16 * +$T04().screenScale) | 0)), +(((16 * +$T04().screenScale) | 0)));
    this.itemWindow = $T04().tooltipGenerator.CreateTooltipTexture($S01().Construct(((+(((+($T04().resolution.X) * 2) / 3)) - (32 * +$T04().screenScale)) | 0), ((+((+($T04().resolution.Y) * 3) / 4)) | 0)), true);
    this.itemWindowVector = $S00().Construct(+(((32 * +$T04().screenScale) | 0)), +(((32 * +$T04().screenScale) | 0)));
    this.pointsWindow = $T04().tooltipGenerator.CreateTooltipTexture($S01().Construct(((($T04().resolution.X | 0) / 4) | 0), ((($T04().font.charHeight | 0) + ((16 * +$T04().screenScale) | 0)) | 0)), true);
    this.itemInfo = $T04().tooltipGenerator.CreateTooltipTexture($S01().Construct(((($T04().resolution.X | 0) / 4) | 0), ((+((this.itemWindow).get_Height()) - (+((this.pointsWindow).get_Height()) + (24 * +$T04().screenScale))) | 0)), true);
    this.itemInfoVector = $S00().Construct(+(((+($T04().resolution.X) - (+((this.itemInfo).get_Width()) + (32 * +$T04().screenScale))) | 0)), +(((32 * +$T04().screenScale) | 0)));
    this.pointsWindowVector = $S00().Construct((+($T04().resolution.X) - (+((this.itemInfo).get_Width()) + (32 * +$T04().screenScale))), ((+this.itemInfoVector.Y + (24 * +$T04().screenScale)) + +((this.itemInfo).get_Height())));
    this.pointsPrint = $S02().Construct(((((this.pointsWindow).get_Width() | 0) - Math.imul(Math.imul($T04().font.charHeight, 2), $T04().textScale)) | 0), $T04().font.MemberwiseClone(), $T09().Color$White$value.MemberwiseClone(), false, $S01().Construct(((+this.pointsWindowVector.X + +(($T04().font.charHeight | 0) * ($T04().textScale | 0))) | 0), ((+this.pointsWindowVector.Y + +((+((this.pointsWindow).get_Height()) / 2))) | 0)), $T0A().Left, 0.9);
    this.icons = Icons;
    this.itemNames = ItemNames;
    this.cost = Prices;
    this.iconrows = JSIL.Array.New($T0B(), this.icons.length);
    this.iconPositions = JSIL.Array.New($T06(), this.icons.length);
    var tempint = 0;
    var temppoint = $S01().Construct(((48 * +$T04().screenScale) | 0), ((48 * +$T04().screenScale) | 0));

    for (var i = 0; i < (this.icons.length | 0); i = ((i + 1) | 0)) {
      if ((+(temppoint.X) + (+(16 + ((this.icons[i]).get_Width() | 0)) * +$T04().screenScale)) >= ((+this.itemWindowVector.X + +((this.itemWindow).get_Width())) - 32)) {
        temppoint.Y = (((temppoint.Y | 0) + ((+(16 + ((this.icons[i]).get_Height() | 0)) * +$T04().screenScale) | 0)) | 0);
        temppoint.X = ((48 * +$T04().screenScale) | 0);
        tempint = ((tempint + 1) | 0);
      }
      this.iconPositions[i] = temppoint.ToVector2();
      this.iconrows[i] = tempint;
      temppoint.X = (((temppoint.X | 0) + ((+(16 + ((this.icons[i]).get_Width() | 0)) * +$T04().screenScale) | 0)) | 0);
    }
    this.iconsPerRow = (this.IconCols(
      this.icons.length, 
      ((+(16 + ((this.icons[0]).get_Width() | 0)) * +$T04().screenScale) | 0), 
      ((((this.itemWindow).get_Width() | 0) - 32) | 0)
    ) | 0);
    this.currentSelection = 0;
    this.currentSelectionRect = $S03().Construct((this.iconPositions[this.currentSelection].MemberwiseClone()).ToPoint(), $S01().Construct(((+((this.icons[this.currentSelection]).get_Width()) * +$T04().screenScale) | 0), ((+((this.icons[this.currentSelection]).get_Height()) * +$T04().screenScale) | 0)));
    this.infoTitlePrint = $S02().Construct(((((this.pointsWindow).get_Width() | 0) - Math.imul(Math.imul($T04().font.charHeight, 2), $T04().textScale)) | 0), $T04().font.MemberwiseClone(), $T09().Color$White$value.MemberwiseClone(), false, $S01().Construct(((+this.pointsWindowVector.X + +(($T04().font.charHeight | 0) * ($T04().textScale | 0))) | 0), ((+this.itemInfoVector.Y + +(($T04().font.charHeight | 0) * ((($T04().textScale | 0) + 1) | 0))) | 0)), $T0A().Left, 0.9);
    this.infoTitlePrint.textScale = ((($T04().textScale | 0) + 1) | 0);
    this.infoPrint = $S02().Construct(((((this.itemInfo).get_Width() | 0) - Math.imul(Math.imul($T04().font.charHeight, 2), $T04().textScale)) | 0), $T04().font.MemberwiseClone(), $T09().Color$White$value.MemberwiseClone(), false, $S01().Construct(((+this.itemInfoVector.X + +(($T04().font.charHeight | 0) * ($T04().textScale | 0))) | 0), ((+this.itemInfoVector.Y + ((+($T04().font.charHeight) * 2.5) * +(($T04().textScale | 0) + 1))) | 0)), $T0A().Left, 0.9);
    this.pricePrint = $S02().Construct(((((this.itemInfo).get_Width() | 0) - Math.imul(Math.imul($T04().font.charHeight, 2), $T04().textScale)) | 0), $T04().font.MemberwiseClone(), $T09().Color$White$value.MemberwiseClone(), false, $S01().Construct((((+this.itemInfoVector.X + +((this.itemInfo).get_Width())) - +(($T04().font.charHeight | 0) * ($T04().textScale | 0))) | 0), (((+this.itemInfoVector.Y + +((this.itemInfo).get_Height())) - +(Math.imul($T04().font.charHeight, 2) * ($T04().textScale | 0))) | 0)), $T0A().Right, 0.9);
    this.mainBackground = this.MergeWindows();
  }; 

  function VendingMenu_Draw (sb) {
    $S04().CallVirtual("Draw", null, sb, 
      this.mainBackground, 
      this.mainBackgroundVector.MemberwiseClone(), 
      null, 
      $T09().Color$White$value.MemberwiseClone(), 
      0, 
      $T06().get_Zero().MemberwiseClone(), 
      1, 
      $T0E().None, 
      0.3
    );
    this.pointsPrint.statement = (JSIL.ConcatString("Points: ", ($T04().onslaughtSpawner.get_Points()).toString()));
    (this.pointsPrint).Draw(sb);
    (this.infoTitlePrint).Draw(sb);
    (this.infoPrint).Draw(sb);
    (this.pricePrint).Draw(sb);
    $S05().CallStatic($T12(), "Draw", null, sb, this.currentSelectionRect.MemberwiseClone(), $T09().Color$White$value.MemberwiseClone(), 0.5);

    for (var i = 0; i < (this.icons.length | 0); i = ((i + 1) | 0)) {
      $S04().CallVirtual("Draw", null, sb, 
        this.icons[i], 
        this.iconPositions[i].MemberwiseClone(), 
        (this.icons[i]).get_Bounds().MemberwiseClone(), 
        $T09().Color$White$value.MemberwiseClone(), 
        0, 
        $T06().get_Zero().MemberwiseClone(), 
        $T04().screenScale, 
        $T0E().None, 
        0.4
      );
    }
  }; 

  function VendingMenu_IconCols (icons, iconsize, maxwidth) {
    var cols = 0;
    var width = 0;

  $loop0: 
    for (var i = 0; i < (icons | 0); i = ((i + 1) | 0)) {
      if (((width + (iconsize | 0)) | 0) > (maxwidth | 0)) {
        break $loop0;
      }
      width = ((width + (iconsize | 0)) | 0);
      cols = ((cols + 1) | 0);
    }
    return cols;
  }; 

  function VendingMenu_IconConatains$00 (MouseLocation) {
    var $hoisted00 = new ($T05())();
    var temprect = new ($T0C())();

    for (var i = 0; i < (this.icons.length | 0); i = ((i + 1) | 0)) {
      (temprect = temprect.MemberwiseClone(), 
        $T0C().prototype._ctor.call(temprect, 
          (this.iconPositions[i]).ToPoint(), 
          ($hoisted00._ctor(
              ((+((this.icons[i]).get_Width()) * +$T04().screenScale) | 0), 
              ((+((this.icons[i]).get_Height()) * +$T04().screenScale) | 0)
            ), 
            $hoisted00)
        ));
      if ($S06().CallVirtual("Contains", null, temprect, MouseLocation)) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  }; 

  function VendingMenu_IconConatains$01 (MouseLocation, selection) {
    var temprect = $S03().Construct((this.iconPositions[selection].MemberwiseClone()).ToPoint(), $S01().Construct(((+((this.icons[selection]).get_Width()) * +$T04().screenScale) | 0), ((+((this.icons[selection]).get_Height()) * +$T04().screenScale) | 0)));
    return $S06().CallVirtual("Contains", null, temprect, MouseLocation);
  }; 

  function VendingMenu_IconRows (icons, iconsize, maxwidth) {
    var rows = 0;
    var width = 0;

    for (var i = 0; i < (icons | 0); i = ((i + 1) | 0)) {
      if (((width + (iconsize | 0)) | 0) > (maxwidth | 0)) {
        width = 0;
        rows = ((rows + 1) | 0);
      } else {
        width = ((width + (iconsize | 0)) | 0);
      }
    }
    return rows;
  }; 

  function VendingMenu_MergeWindows () {
    var sb = new ($T0D())($T04().game.get_GraphicsDevice());
    var renderTarget = $S07().Construct($T04().game.get_GraphicsDevice(), ((this.mainBackground).get_Bounds()).get_Size().X, ((this.mainBackground).get_Bounds()).get_Size().Y);
    $T04().game.get_GraphicsDevice().SetRenderTarget(renderTarget);
    $T04().game.get_GraphicsDevice().Clear($T09().Color$Transparent$value.MemberwiseClone());
    sb.Begin(
      $T16().FrontToBack, 
      $T17().AlphaBlend, 
      $T18().PointWrap, 
      $T19().None, 
      $T1A().CullCounterClockwise, 
      null, 
      $T1B().get_Identity().MemberwiseClone()
    );
    $S04().CallVirtual("Draw", null, sb, 
      this.mainBackground, 
      $T06().get_Zero().MemberwiseClone(), 
      null, 
      $T09().Color$White$value.MemberwiseClone(), 
      0, 
      $T06().get_Zero().MemberwiseClone(), 
      1, 
      $T0E().None, 
      0.3
    );
    $S04().CallVirtual("Draw", null, sb, 
      this.itemWindow, 
      $T06().op_Subtraction(this.itemWindowVector.MemberwiseClone(), this.mainBackgroundVector).MemberwiseClone(), 
      null, 
      $T09().Color$White$value.MemberwiseClone(), 
      0, 
      $T06().get_Zero().MemberwiseClone(), 
      1, 
      $T0E().None, 
      0.3
    );
    $S04().CallVirtual("Draw", null, sb, 
      this.itemInfo, 
      $T06().op_Subtraction(this.itemInfoVector.MemberwiseClone(), this.mainBackgroundVector).MemberwiseClone(), 
      null, 
      $T09().Color$White$value.MemberwiseClone(), 
      0, 
      $T06().get_Zero().MemberwiseClone(), 
      1, 
      $T0E().None, 
      0.3
    );
    $S04().CallVirtual("Draw", null, sb, 
      this.pointsWindow, 
      $T06().op_Subtraction(this.pointsWindowVector.MemberwiseClone(), this.mainBackgroundVector).MemberwiseClone(), 
      null, 
      $T09().Color$White$value.MemberwiseClone(), 
      0, 
      $T06().get_Zero().MemberwiseClone(), 
      1, 
      $T0E().None, 
      0.3
    );
    sb.End();
    $T04().game.get_GraphicsDevice().SetRenderTarget(null);
    return renderTarget;
  }; 

  function VendingMenu_MoveSelectionDown () {
    if ((((this.currentSelection | 0) + (this.iconsPerRow | 0)) | 0) < (this.icons.length | 0)) {
      this.currentSelection = (((this.currentSelection | 0) + (this.iconsPerRow | 0)) | 0);
    }
    return this.currentSelection;
  }; 

  function VendingMenu_MoveSelectionUp () {
    if ((((this.currentSelection | 0) - (this.iconsPerRow | 0)) | 0) >= 0) {
      this.currentSelection = (((this.currentSelection | 0) - (this.iconsPerRow | 0)) | 0);
    }
    return this.currentSelection;
  }; 

  function VendingMenu_Update (selection, price, iteminfo, itemname) {
    this.currentSelection = (selection | 0);
    this.currentSelectionRect = $S03().Construct((this.iconPositions[this.currentSelection].MemberwiseClone()).ToPoint(), $S01().Construct(((+((this.icons[this.currentSelection]).get_Width()) * +$T04().screenScale) | 0), ((+((this.icons[this.currentSelection]).get_Height()) * +$T04().screenScale) | 0)));
    this.infoTitlePrint.statement = itemname;
    this.infoPrint.statement = iteminfo;
    this.cost[this.currentSelection] = price;
    this.pricePrint.statement = (JSIL.ConcatString("Cost: ", price));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "VendingMenu", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.UInt64])
        ]), 
      VendingMenu__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      VendingMenu_Draw
    );

    $.Method({Static:false, Public:false}, "IconCols", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      VendingMenu_IconCols
    );

    $.Method({Static:false, Public:true }, "IconConatains", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      VendingMenu_IconConatains$00
    );

    $.Method({Static:false, Public:true }, "IconConatains", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $.Int32]), 
      VendingMenu_IconConatains$01
    );

    $.Method({Static:false, Public:false}, "IconRows", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      VendingMenu_IconRows
    );

    $.Method({Static:false, Public:true }, "MergeWindows", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      VendingMenu_MergeWindows
    );

    $.Method({Static:false, Public:true }, "MoveSelectionDown", 
      JSIL.MethodSignature.Return($.Int32), 
      VendingMenu_MoveSelectionDown
    );

    $.Method({Static:false, Public:true }, "MoveSelectionUp", 
      JSIL.MethodSignature.Return($.Int32), 
      VendingMenu_MoveSelectionUp
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.UInt64, 
          $.String, $.String
        ]), 
      VendingMenu_Update
    );

    $.Field({Static:false, Public:false}, "mainBackground", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "mainBackgroundVector", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "itemWindow", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "itemWindowVector", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "itemInfo", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "itemInfoVector", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "pointsWindow", $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "pointsWindowVector", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "pointsPrint", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "infoTitlePrint", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "infoPrint", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "pricePrint", $asm00.TypeRef("Print"));

    $.Field({Static:false, Public:false}, "icons", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]));

    $.Field({Static:false, Public:false}, "iconPositions", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "itemNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "cost", $jsilcore.TypeRef("System.Array", [$.UInt64]));

    $.Field({Static:false, Public:false}, "iconrows", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "iconsPerRow", $.Int32);

    $.Field({Static:false, Public:false}, "currentSelection", $.Int32);

    $.Field({Static:false, Public:false}, "currentSelectionRect", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Wall */ 

(function Wall$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm02.System.Object))) ();
  };


  function Wall__ctor (top, bottom, left, right) {
    this._top = (top | 0);
    this._bottom = (bottom | 0);
    this._left = (left | 0);
    this._right = (right | 0);
  }; 

  function Wall_Equals$00 (value) {
    return (!(((this._top | 0) !== (value._top | 0)) || 
        ((this._bottom | 0) !== (value._bottom | 0)) || 
        ((this._left | 0) !== (value._left | 0))) && ((this._right | 0) === (value._right | 0)));
  }; 

  function Wall_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  }; 

  function Wall_get_Bottom () {
    return this._bottom;
  }; 

  function Wall_get_Horizontal () {
    return (((this._left | 0) > 0) || ((this._right | 0) > 0));
  }; 

  function Wall_get_Left () {
    return this._left;
  }; 

  function Wall_get_Right () {
    return this._right;
  }; 

  function Wall_get_Top () {
    return this._top;
  }; 

  function Wall_get_Total () {
    return (((((((this._top | 0) + (this._bottom | 0)) | 0) + (this._left | 0)) | 0) + (this._right | 0)) | 0);
  }; 

  function Wall_get_Vertical () {
    return (((this._bottom | 0) > 0) || ((this._top | 0) > 0));
  }; 

  function Wall_get_Zero () {
    return $thisType.zero;
  }; 

  function Wall_GetHashCode () {
    return (((((((JSIL.ObjectHashCode(this._top, false)) + (JSIL.ObjectHashCode(this._bottom, false))) | 0) + (JSIL.ObjectHashCode(this._left, false))) | 0) + (JSIL.ObjectHashCode(this._right, false))) | 0);
  }; 

  function Wall_op_Equality (value1, value2) {
    return (!(((value1._top | 0) !== (value2._top | 0)) || 
        ((value1._bottom | 0) !== (value2._bottom | 0)) || 
        ((value1._left | 0) !== (value2._left | 0))) && ((value1._right | 0) === (value2._right | 0)));
  }; 

  function Wall_op_Inequality (value1, value2) {
    return (((value1._top | 0) !== (value2._top | 0)) || 
      ((value1._bottom | 0) !== (value2._bottom | 0)) || 
      ((value1._left | 0) !== (value2._left | 0)) || ((value1._right | 0) !== (value2._right | 0)));
  }; 

  function Wall_set_Bottom (value) {
    this._bottom = (value | 0);
  }; 

  function Wall_set_Left (value) {
    this._left = (value | 0);
  }; 

  function Wall_set_Right (value) {
    this._right = (value | 0);
  }; 

  function Wall_set_Top (value) {
    this._top = (value | 0);
  }; 

  function Wall_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), ["{Top:", $T00().$Box(this._top), " Bottom:", $T00().$Box(this._bottom), " Left:", $T00().$Box(this._left), " Right:", $T00().$Box(this._right), "}"]));
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Wall", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Wall__ctor
    );

    $.Method({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Wall_Equals$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Wall_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Bottom", 
      JSIL.MethodSignature.Return($.Int32), 
      Wall_get_Bottom
    );

    $.Method({Static:false, Public:true }, "get_Horizontal", 
      JSIL.MethodSignature.Return($.Boolean), 
      Wall_get_Horizontal
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Int32), 
      Wall_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Int32), 
      Wall_get_Right
    );

    $.Method({Static:false, Public:true }, "get_Top", 
      JSIL.MethodSignature.Return($.Int32), 
      Wall_get_Top
    );

    $.Method({Static:false, Public:true }, "get_Total", 
      JSIL.MethodSignature.Return($.Int32), 
      Wall_get_Total
    );

    $.Method({Static:false, Public:true }, "get_Vertical", 
      JSIL.MethodSignature.Return($.Boolean), 
      Wall_get_Vertical
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type), 
      Wall_get_Zero
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Wall_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Wall_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Wall_op_Inequality
    );

    $.Method({Static:false, Public:true }, "set_Bottom", 
      JSIL.MethodSignature.Action($.Int32), 
      Wall_set_Bottom
    );

    $.Method({Static:false, Public:true }, "set_Left", 
      JSIL.MethodSignature.Action($.Int32), 
      Wall_set_Left
    );

    $.Method({Static:false, Public:true }, "set_Right", 
      JSIL.MethodSignature.Action($.Int32), 
      Wall_set_Right
    );

    $.Method({Static:false, Public:true }, "set_Top", 
      JSIL.MethodSignature.Action($.Int32), 
      Wall_set_Top
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Wall_toString
    );

    $.Field({Static:true , Public:false}, "zero", $.Type);

    $.Field({Static:false, Public:false}, "_top", $.Int32);

    $.Field({Static:false, Public:false}, "_bottom", $.Int32);

    $.Field({Static:false, Public:false}, "_left", $.Int32);

    $.Field({Static:false, Public:false}, "_right", $.Int32);


    function Wall__cctor () {
      $thisType.zero = new $thisType();
      $thisType.zero = new $thisType(0, 0, 0, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Wall__cctor
    );

    $.Property({Static:false, Public:true }, "Top", $.Int32);

    $.Property({Static:false, Public:true }, "Bottom", $.Int32);

    $.Property({Static:false, Public:true }, "Left", $.Int32);

    $.Property({Static:false, Public:true }, "Right", $.Int32);

    $.Property({Static:false, Public:true }, "Total", $.Int32);

    $.Property({Static:false, Public:true }, "Horizontal", $.Boolean);

    $.Property({Static:false, Public:true }, "Vertical", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

