/* Generated by JSIL v0.8.2 build 25468. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm08 = JSIL.DeclareAssembly("System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Runtime.Serialization.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Runtime.Serialization.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Runtime.Serialization.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2112.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
/* class System.AppContextDefaultValues */ 

(function AppContextDefaultValues$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.AppContextDefaultValues", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ParseTargetFrameworkName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PopulateDefaultValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateDefaultValuesPartial", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseFrameworkName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.LocalAppContext */ 

(function LocalAppContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };



  function LocalAppContext_get_DisableCaching () {
    return $thisType.LocalAppContext$DisableCaching$value;
  }; 





  function LocalAppContext_set_DisableCaching (value) {
    $thisType.LocalAppContext$DisableCaching$value = value;
  }; 


  JSIL.MakeStaticClass("System.LocalAppContext", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DefineSwitchDefault", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Method({Static:true , Public:false}, "get_DisableCaching", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalAppContext_get_DisableCaching
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValueInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSwitchEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSwitchEnabledLocal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Method({Static:true , Public:false}, "set_DisableCaching", 
      JSIL.MethodSignature.Action($.Boolean), 
      LocalAppContext_set_DisableCaching
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "TryGetSwitchFromCentralAppContext", $asm08.TypeRef("System.LocalAppContext+TryGetSwitchDelegate"));

    $.Field({Static:true , Public:false}, "s_canForwardCalls", $.Boolean);

    $.Field({Static:true , Public:false}, "s_switchMap", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_syncLock", $.Object);

    $.Field({Static:true , Public:false}, "LocalAppContext$DisableCaching$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:false}, "DisableCaching", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.LocalAppContext+TryGetSwitchDelegate */ 

JSIL.MakeDelegate("System.LocalAppContext+TryGetSwitchDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Boolean"), [$asm02.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Boolean")])]));

JSIL.DeclareNamespace("System.Xml");
/* class System.Xml.ArrayHelper`2 */ 

(function ArrayHelper$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.ArrayHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TArgument", "TArray"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TArray")]), [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.GenericParameter("TArgument"), 
          $.GenericParameter("TArgument"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.GenericParameter("TArgument"), 
          $.GenericParameter("TArgument"), $jsilcore.TypeRef("System.Array", [$.GenericParameter("TArray")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.GenericParameter("TArgument"), $.GenericParameter("TArgument"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.GenericParameter("TArgument"), $.GenericParameter("TArgument"), 
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TArray")]), $.Int32, 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BooleanArrayHelperWithString */ 

(function BooleanArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Boolean")]), 
      Name: "System.Xml.BooleanArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BooleanArrayHelperWithDictionaryString */ 

(function BooleanArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Boolean")]), 
      Name: "System.Xml.BooleanArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int16ArrayHelperWithString */ 

(function Int16ArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Int16")]), 
      Name: "System.Xml.Int16ArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int16ArrayHelperWithDictionaryString */ 

(function Int16ArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Int16")]), 
      Name: "System.Xml.Int16ArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int32ArrayHelperWithString */ 

(function Int32ArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Xml.Int32ArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int32ArrayHelperWithDictionaryString */ 

(function Int32ArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Xml.Int32ArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int64ArrayHelperWithString */ 

(function Int64ArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Int64")]), 
      Name: "System.Xml.Int64ArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int64ArrayHelperWithDictionaryString */ 

(function Int64ArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Int64")]), 
      Name: "System.Xml.Int64ArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.SingleArrayHelperWithString */ 

(function SingleArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Single")]), 
      Name: "System.Xml.SingleArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.SingleArrayHelperWithDictionaryString */ 

(function SingleArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Single")]), 
      Name: "System.Xml.SingleArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DoubleArrayHelperWithString */ 

(function DoubleArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Double")]), 
      Name: "System.Xml.DoubleArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DoubleArrayHelperWithDictionaryString */ 

(function DoubleArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Double")]), 
      Name: "System.Xml.DoubleArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DecimalArrayHelperWithString */ 

(function DecimalArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Decimal")]), 
      Name: "System.Xml.DecimalArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DecimalArrayHelperWithDictionaryString */ 

(function DecimalArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Decimal")]), 
      Name: "System.Xml.DecimalArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DateTimeArrayHelperWithString */ 

(function DateTimeArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.DateTime")]), 
      Name: "System.Xml.DateTimeArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DateTimeArrayHelperWithDictionaryString */ 

(function DateTimeArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.DateTime")]), 
      Name: "System.Xml.DateTimeArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.GuidArrayHelperWithString */ 

(function GuidArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Guid")]), 
      Name: "System.Xml.GuidArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.GuidArrayHelperWithDictionaryString */ 

(function GuidArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Guid")]), 
      Name: "System.Xml.GuidArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TimeSpanArrayHelperWithString */ 

(function TimeSpanArrayHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.TimeSpan")]), 
      Name: "System.Xml.TimeSpanArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TimeSpanArrayHelperWithDictionaryString */ 

(function TimeSpanArrayHelperWithDictionaryString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.TimeSpan")]), 
      Name: "System.Xml.TimeSpanArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IFragmentCapableXmlDictionaryWriter */ 

JSIL.MakeInterface(
  "System.Xml.IFragmentCapableXmlDictionaryWriter", true, [], function ($) {
    $.Method({}, "get_CanFragment", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "StartFragment", new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.Boolean]));
    $.Method({}, "EndFragment", JSIL.MethodSignature.Void);
    $.Method({}, "WriteFragment", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Property({}, "CanFragment");
  }, []);

/* interface System.Xml.IStreamProvider */ 

JSIL.MakeInterface(
  "System.Xml.IStreamProvider", true, [], function ($) {
    $.Method({}, "GetStream", JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.Stream")));
    $.Method({}, "ReleaseStream", JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream")));
  }, []);

/* interface System.Xml.IXmlDictionary */ 

JSIL.MakeInterface(
  "System.Xml.IXmlDictionary", true, [], function ($) {
    $.Method({}, "TryLookup", new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])]));
    $.Method({}, "TryLookup", new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])]));
    $.Method({}, "TryLookup", new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])]));
  }, [])
  .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

/* enum System.Xml.XmlBinaryNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlBinaryNodeType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EndElement: 1, 
    Comment: 2, 
    Array: 3, 
    ShortAttribute: 4, 
    MinAttribute: 4, 
    Attribute: 5, 
    ShortDictionaryAttribute: 6, 
    DictionaryAttribute: 7, 
    ShortXmlnsAttribute: 8, 
    XmlnsAttribute: 9, 
    ShortDictionaryXmlnsAttribute: 10, 
    DictionaryXmlnsAttribute: 11, 
    PrefixDictionaryAttributeA: 12, 
    PrefixDictionaryAttributeB: 13, 
    PrefixDictionaryAttributeC: 14, 
    PrefixDictionaryAttributeD: 15, 
    PrefixDictionaryAttributeE: 16, 
    PrefixDictionaryAttributeF: 17, 
    PrefixDictionaryAttributeG: 18, 
    PrefixDictionaryAttributeH: 19, 
    PrefixDictionaryAttributeI: 20, 
    PrefixDictionaryAttributeJ: 21, 
    PrefixDictionaryAttributeK: 22, 
    PrefixDictionaryAttributeL: 23, 
    PrefixDictionaryAttributeM: 24, 
    PrefixDictionaryAttributeN: 25, 
    PrefixDictionaryAttributeO: 26, 
    PrefixDictionaryAttributeP: 27, 
    PrefixDictionaryAttributeQ: 28, 
    PrefixDictionaryAttributeR: 29, 
    PrefixDictionaryAttributeS: 30, 
    PrefixDictionaryAttributeT: 31, 
    PrefixDictionaryAttributeU: 32, 
    PrefixDictionaryAttributeV: 33, 
    PrefixDictionaryAttributeW: 34, 
    PrefixDictionaryAttributeX: 35, 
    PrefixDictionaryAttributeY: 36, 
    PrefixDictionaryAttributeZ: 37, 
    PrefixAttributeA: 38, 
    PrefixAttributeB: 39, 
    PrefixAttributeC: 40, 
    PrefixAttributeD: 41, 
    PrefixAttributeE: 42, 
    PrefixAttributeF: 43, 
    PrefixAttributeG: 44, 
    PrefixAttributeH: 45, 
    PrefixAttributeI: 46, 
    PrefixAttributeJ: 47, 
    PrefixAttributeK: 48, 
    PrefixAttributeL: 49, 
    PrefixAttributeM: 50, 
    PrefixAttributeN: 51, 
    PrefixAttributeO: 52, 
    PrefixAttributeP: 53, 
    PrefixAttributeQ: 54, 
    PrefixAttributeR: 55, 
    PrefixAttributeS: 56, 
    PrefixAttributeT: 57, 
    PrefixAttributeU: 58, 
    PrefixAttributeV: 59, 
    PrefixAttributeW: 60, 
    PrefixAttributeX: 61, 
    PrefixAttributeY: 62, 
    MaxAttribute: 63, 
    PrefixAttributeZ: 63, 
    MinElement: 64, 
    ShortElement: 64, 
    Element: 65, 
    ShortDictionaryElement: 66, 
    DictionaryElement: 67, 
    PrefixDictionaryElementA: 68, 
    PrefixDictionaryElementB: 69, 
    PrefixDictionaryElementC: 70, 
    PrefixDictionaryElementD: 71, 
    PrefixDictionaryElementE: 72, 
    PrefixDictionaryElementF: 73, 
    PrefixDictionaryElementG: 74, 
    PrefixDictionaryElementH: 75, 
    PrefixDictionaryElementI: 76, 
    PrefixDictionaryElementJ: 77, 
    PrefixDictionaryElementK: 78, 
    PrefixDictionaryElementL: 79, 
    PrefixDictionaryElementM: 80, 
    PrefixDictionaryElementN: 81, 
    PrefixDictionaryElementO: 82, 
    PrefixDictionaryElementP: 83, 
    PrefixDictionaryElementQ: 84, 
    PrefixDictionaryElementR: 85, 
    PrefixDictionaryElementS: 86, 
    PrefixDictionaryElementT: 87, 
    PrefixDictionaryElementU: 88, 
    PrefixDictionaryElementV: 89, 
    PrefixDictionaryElementW: 90, 
    PrefixDictionaryElementX: 91, 
    PrefixDictionaryElementY: 92, 
    PrefixDictionaryElementZ: 93, 
    PrefixElementA: 94, 
    PrefixElementB: 95, 
    PrefixElementC: 96, 
    PrefixElementD: 97, 
    PrefixElementE: 98, 
    PrefixElementF: 99, 
    PrefixElementG: 100, 
    PrefixElementH: 101, 
    PrefixElementI: 102, 
    PrefixElementJ: 103, 
    PrefixElementK: 104, 
    PrefixElementL: 105, 
    PrefixElementM: 106, 
    PrefixElementN: 107, 
    PrefixElementO: 108, 
    PrefixElementP: 109, 
    PrefixElementQ: 110, 
    PrefixElementR: 111, 
    PrefixElementS: 112, 
    PrefixElementT: 113, 
    PrefixElementU: 114, 
    PrefixElementV: 115, 
    PrefixElementW: 116, 
    PrefixElementX: 117, 
    PrefixElementY: 118, 
    MaxElement: 119, 
    PrefixElementZ: 119, 
    MinText: 128, 
    ZeroText: 128, 
    ZeroTextWithEndElement: 129, 
    OneText: 130, 
    OneTextWithEndElement: 131, 
    FalseText: 132, 
    FalseTextWithEndElement: 133, 
    TrueText: 134, 
    TrueTextWithEndElement: 135, 
    Int8Text: 136, 
    Int8TextWithEndElement: 137, 
    Int16Text: 138, 
    Int16TextWithEndElement: 139, 
    Int32Text: 140, 
    Int32TextWithEndElement: 141, 
    Int64Text: 142, 
    Int64TextWithEndElement: 143, 
    FloatText: 144, 
    FloatTextWithEndElement: 145, 
    DoubleText: 146, 
    DoubleTextWithEndElement: 147, 
    DecimalText: 148, 
    DecimalTextWithEndElement: 149, 
    DateTimeText: 150, 
    DateTimeTextWithEndElement: 151, 
    Chars8Text: 152, 
    Chars8TextWithEndElement: 153, 
    Chars16Text: 154, 
    Chars16TextWithEndElement: 155, 
    Chars32Text: 156, 
    Chars32TextWithEndElement: 157, 
    Bytes8Text: 158, 
    Bytes8TextWithEndElement: 159, 
    Bytes16Text: 160, 
    Bytes16TextWithEndElement: 161, 
    Bytes32Text: 162, 
    Bytes32TextWithEndElement: 163, 
    StartListText: 164, 
    StartListTextWithEndElement: 165, 
    EndListText: 166, 
    EndListTextWithEndElement: 167, 
    EmptyText: 168, 
    EmptyTextWithEndElement: 169, 
    DictionaryText: 170, 
    DictionaryTextWithEndElement: 171, 
    UniqueIdText: 172, 
    UniqueIdTextWithEndElement: 173, 
    TimeSpanText: 174, 
    TimeSpanTextWithEndElement: 175, 
    GuidText: 176, 
    GuidTextWithEndElement: 177, 
    UInt64Text: 178, 
    UInt64TextWithEndElement: 179, 
    BoolText: 180, 
    BoolTextWithEndElement: 181, 
    UnicodeChars8Text: 182, 
    UnicodeChars8TextWithEndElement: 183, 
    UnicodeChars16Text: 184, 
    UnicodeChars16TextWithEndElement: 185, 
    UnicodeChars32Text: 186, 
    UnicodeChars32TextWithEndElement: 187, 
    QNameDictionaryText: 188, 
    QNameDictionaryTextWithEndElement: 189, 
    MaxText: 189, 
  }
);

/* class System.Xml.XmlBinaryReaderSession */ 

(function XmlBinaryReaderSession$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryReaderSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [$.Int32, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "MaxArrayEntries", $.Int32, 2048);

    $.Field({Static:false, Public:false}, "strings", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "stringDict", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Xml.IXmlDictionary")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Xml.IXmlBinaryWriterInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlBinaryWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ]));
  }, []);

/* class System.Xml.XmlNodeWriter */ 

(function XmlNodeWriter$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWriteBase64Text", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWriteBase64Text", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64TextAsync", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlNodeWriterWriteBase64TextArgs")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.Field({Static:true , Public:false}, "nullNodeWriter", $.Type);

    $.Property({Static:true , Public:true }, "Null", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeWriter+XmlNullNodeWriter */ 

(function XmlNullNodeWriter$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlNodeWriter"), 
      Name: "System.Xml.XmlNodeWriter+XmlNullNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeWriter+WriteBase64TextAsyncResult */ 

(function WriteBase64TextAsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.ScheduleActionItemAsyncResult"), 
      Name: "System.Xml.XmlNodeWriter+WriteBase64TextAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlNodeWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDoWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "trailBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "trailCount", $.Int32);

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "nodeWriter", $asm08.TypeRef("System.Xml.XmlNodeWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter */ 

(function XmlStreamNodeWriter$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlNodeWriter"), 
      Name: "System.Xml.XmlStreamNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginFlushBuffer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [$asm02.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginGetBuffer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginWriteBytes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndFlushBuffer", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndGetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndWriteBytes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByte", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBufferAsync", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Stream", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StreamBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBufferAsync", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm08.TypeRef("System.Xml.XmlStreamNodeWriter+GetBufferAsyncEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBufferFlushComplete", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnFlushBufferCompete", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Stream", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm02.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetUnicodeChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetUTF8Chars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetUTF8Length", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteBytes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteUnicodeChars", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteUTF8Chars", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteByte", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUTF8Char", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteUTF8Chars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUTF8Chars", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "ownsStream", $.Boolean);

    $.Constant({Static:true , Public:false}, "bufferLength", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "maxEntityLength", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "maxBytesPerChar", $.Int32, 3);

    $.Field({Static:false, Public:false}, "encoding", $asm02.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "hasPendingWrite", $.Int32);

    $.Field({Static:false, Public:false}, "flushBufferState", $asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$.Object]));

    $.Field({Static:true , Public:false}, "UTF8Encoding", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false}, "onFlushBufferComplete", $asm02.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "onGetFlushComplete", $asm09.TypeRef("System.Runtime.AsyncEventArgsCallback"));

    $.Property({Static:false, Public:true }, "Stream", $asm02.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true }, "StreamBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "BufferOffset", $.Int32);

    $.Property({Static:false, Public:true }, "Position", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter+GetBufferAsyncResult */ 

(function GetBufferAsyncResult$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlStreamNodeWriter+GetBufferAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleFlushBuffer", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:true , Public:false}, "onComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter+WriteBytesAsyncResult */ 

(function WriteBytesAsyncResult$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlStreamNodeWriter+WriteBytesAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleFlushBuffer", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleGetBuffer", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnHandleFlushBufferComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnHandleGetBufferComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnHandleWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.Field({Static:true , Public:false}, "onHandleGetBufferComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnHandleGetBufferComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:true , Public:false}, "onHandleFlushBufferComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnHandleFlushBufferComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:true , Public:false}, "onHandleWrite", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnHandleWrite", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "byteOffset", $.Int32);

    $.Field({Static:false, Public:false}, "byteCount", $.Int32);

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter+FlushBufferAsyncResult */ 

(function FlushBufferAsyncResult$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlStreamNodeWriter+FlushBufferAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"), $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleFlushBuffer", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.Field({Static:true , Public:false}, "onComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter+GetBufferArgs */ 

(function GetBufferArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };



  function GetBufferArgs_get_Count () {
    return this.GetBufferArgs$Count$value;
  }; 

  function GetBufferArgs_set_Count (value) {
    this.GetBufferArgs$Count$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlStreamNodeWriter+GetBufferArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      GetBufferArgs_get_Count
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Count", 
      JSIL.MethodSignature.Action($.Int32), 
      GetBufferArgs_set_Count
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetBufferArgs$Count$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter+GetBufferEventResult */ 

(function GetBufferEventResult$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm02.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Int32)) ();
  };



  function GetBufferEventResult_get_Buffer () {
    return this.GetBufferEventResult$Buffer$value;
  }; 

  function GetBufferEventResult_get_Offset () {
    return this.GetBufferEventResult$Offset$value;
  }; 

  function GetBufferEventResult_set_Buffer (value) {
    this.GetBufferEventResult$Buffer$value = value;
  }; 

  function GetBufferEventResult_set_Offset (value) {
    this.GetBufferEventResult$Offset$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlStreamNodeWriter+GetBufferEventResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      GetBufferEventResult_get_Buffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32), 
      GetBufferEventResult_get_Offset
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Buffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      GetBufferEventResult_set_Buffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32), 
      GetBufferEventResult_set_Offset
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetBufferEventResult$Buffer$value", $jsilcore.TypeRef("System.Array", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetBufferEventResult$Offset$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Offset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter+GetBufferAsyncEventArgs */ 

(function GetBufferAsyncEventArgs$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncEventArgs`2", [$asm08.TypeRef("System.Xml.XmlStreamNodeWriter+GetBufferArgs"), $asm08.TypeRef("System.Xml.XmlStreamNodeWriter+GetBufferEventResult")]), 
      Name: "System.Xml.XmlStreamNodeWriter+GetBufferAsyncEventArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryNodeWriter */ 

(function XmlBinaryNodeWriter$Members () {
  var $, $thisType;

































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"), 
      Name: "System.Xml.XmlBinaryNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTextNodeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetKey", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteName", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayInfo", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteArrayNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDateTimeArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDictionaryString", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      JSIL.MethodSignature.Action($.Double)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteGuidArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt64", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMultiByteInt32", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteNode", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBinaryNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefixNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextNode", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBinaryNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextNodeWithInt64", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextNodeWithLength", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTimeSpanArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WroteAttributeValue", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm08.TypeRef("System.Xml.IXmlDictionary"));

    $.Field({Static:false, Public:false}, "session", $asm08.TypeRef("System.Xml.XmlBinaryWriterSession"));

    $.Field({Static:false, Public:false}, "inAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "inList", $.Boolean);

    $.Field({Static:false, Public:false}, "wroteAttributeValue", $.Boolean);

    $.Field({Static:false, Public:false}, "attributeValue", $asm08.TypeRef("System.Xml.XmlBinaryNodeWriter+AttributeValue"));

    $.Constant({Static:true , Public:false}, "maxBytesPerChar", $.Int32, 3);

    $.Field({Static:false, Public:false}, "textNodeOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlBinaryNodeWriter+AttributeValue */ 

(function AttributeValue$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlBinaryNodeWriter+AttributeValue", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBinaryNodeWriter"))
    );

    $.Field({Static:false, Public:false}, "captureText", $.String);

    $.Field({Static:false, Public:false}, "captureXText", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "captureStream", $asm02.TypeRef("System.IO.MemoryStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryWriter */ 

(function XmlDictionaryWriter$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Xml.XmlDictionaryWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginWriteBase64", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginWriteValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $asm08.TypeRef("System.Xml.IStreamProvider"), $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryWriterSession")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateDictionaryWriter", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.Xml.XmlWriter")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextWriter", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTextWriter", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTextWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndWriteBase64", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndWriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FastAsync", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $.String
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64Async", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Async", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $.String
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.IStreamProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValueAsync", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$asm08.TypeRef("System.Xml.IStreamProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "FastAsync", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Xml.XmlDictionaryWriter+WriteValueFastAsyncResult */ 

(function WriteValueFastAsyncResult$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlDictionaryWriter+WriteValueFastAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $asm08.TypeRef("System.Xml.IStreamProvider"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteAndReleaseStream", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWork", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleReadComplete", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "OnReadComplete", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWriteComplete", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAsync", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.AsyncCompletionResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAsync", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.AsyncCompletionResult"))
    );

    $.Field({Static:false, Public:false}, "completed", $.Boolean);

    $.Field({Static:false, Public:false}, "blockSize", $.Int32);

    $.Field({Static:false, Public:false}, "block", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bytesRead", $.Int32);

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "nextOperation", $asm08.TypeRef("System.Xml.XmlDictionaryWriter+WriteValueFastAsyncResult+Operation"));

    $.Field({Static:false, Public:false}, "streamProvider", $asm08.TypeRef("System.Xml.IStreamProvider"));

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "writerAsyncState", $asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")]));

    $.Field({Static:false, Public:false}, "writerAsyncArgs", $asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments"));

    $.Field({Static:true , Public:false}, "onReadComplete", $asm02.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "onWriteComplete", $asm09.TypeRef("System.Runtime.AsyncEventArgsCallback"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlDictionaryWriter+WriteValueFastAsyncResult+Operation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlDictionaryWriter+WriteValueFastAsyncResult+Operation", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Read: 0, 
    Write: 1, 
    Complete: 2, 
  }
);

/* class System.Xml.XmlDictionaryWriter+WriteValueAsyncResult */ 

(function WriteValueAsyncResult$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlDictionaryWriter+WriteValueAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $asm08.TypeRef("System.Xml.IStreamProvider"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustBlockSize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteAndReleaseStream", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWork", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleReadBlock", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleWriteBlock", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleWriteBlockAsync", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnContinueWork", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "blockSize", $.Int32);

    $.Field({Static:false, Public:false}, "block", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bytesRead", $.Int32);

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "operation", $asm08.TypeRef("System.Xml.XmlDictionaryWriter+WriteValueAsyncResult+Operation"));

    $.Field({Static:false, Public:false}, "streamProvider", $asm08.TypeRef("System.Xml.IStreamProvider"));

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "writeBlockHandler", $asm02.TypeRef("System.Func`3", [
          $asm02.TypeRef("System.IAsyncResult"), $.Type, 
          $.Boolean
        ]));

    $.Field({Static:true , Public:false}, "handleWriteBlock", $asm02.TypeRef("System.Func`3", [
          $asm02.TypeRef("System.IAsyncResult"), $.Type, 
          $.Boolean
        ]), function ($pi) {
        return $asm02.System.Func$b3.Of(
            $asm02.System.IAsyncResult, $thisType, 
            $asm02.System.Boolean
        ).New(null, null, new JSIL.MethodPointerInfo($thisType, "HandleWriteBlock", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult"), $.Type]), true, false));
      });

    $.Field({Static:true , Public:false}, "handleWriteBlockAsync", $asm02.TypeRef("System.Func`3", [
          $asm02.TypeRef("System.IAsyncResult"), $.Type, 
          $.Boolean
        ]), function ($pi) {
        return $asm02.System.Func$b3.Of(
            $asm02.System.IAsyncResult, $thisType, 
            $asm02.System.Boolean
        ).New(null, null, new JSIL.MethodPointerInfo($thisType, "HandleWriteBlockAsync", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult"), $.Type]), true, false));
      });

    $.Field({Static:true , Public:false}, "onContinueWork", $asm02.TypeRef("System.AsyncCallback"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlDictionaryWriter+WriteValueAsyncResult+Operation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlDictionaryWriter+WriteValueAsyncResult+Operation", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Read: 0, 
    Write: 1, 
  }
);

/* class System.Xml.XmlDictionaryWriter+WriteBase64AsyncResult */ 

(function WriteBase64AsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.ScheduleActionItemAsyncResult"), 
      Name: "System.Xml.XmlDictionaryWriter+WriteBase64AsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDoWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryWriter+XmlWrappedWriter */ 

(function XmlWrappedWriter$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Xml.XmlDictionaryWriter+XmlWrappedWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "writer", $asm0A.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "prefix", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter */ 

(function XmlBaseWriter$Members () {
  var $, $thisType;







































































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Xml.XmlBaseWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoComplete", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginWriteBase64", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndFragment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndWriteBase64", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBufferBounds", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseWriter+Element"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBase64", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushTrailBytes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
      new JSIL.MethodSignature($.String, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BinHexEncoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Text.BinHexEncoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanFragment", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceBoundary", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Signing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedNamePrefix", 
      new JSIL.MethodSignature($.String, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamespaceBoundary", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOutput", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlStreamNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SignScope", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlCanonicalWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartArray", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.String, 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.String, 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartFragment", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64Async", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFragment", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlNodeWriter"));

    $.Field({Static:false, Public:false}, "nsMgr", $asm08.TypeRef("System.Xml.XmlBaseWriter+NamespaceManager"));

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseWriter+Element")]));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "attributeLocalName", $.String);

    $.Field({Static:false, Public:false}, "attributeValue", $.String);

    $.Field({Static:false, Public:false}, "isXmlAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isXmlnsAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "writeState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Field({Static:false, Public:false}, "documentState", $asm08.TypeRef("System.Xml.XmlBaseWriter+DocumentState"));

    $.Field({Static:false, Public:false}, "trailBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "trailByteCount", $.Int32);

    $.Field({Static:false, Public:false}, "nodeWriter", $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"));

    $.Field({Static:false, Public:false}, "signingWriter", $asm08.TypeRef("System.Xml.XmlSigningNodeWriter"));

    $.Field({Static:false, Public:false}, "textFragmentWriter", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.Field({Static:false, Public:false}, "oldWriter", $asm08.TypeRef("System.Xml.XmlNodeWriter"));

    $.Field({Static:false, Public:false}, "oldStream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "oldNamespaceBoundary", $.Int32);

    $.Field({Static:false, Public:false}, "inList", $.Boolean);

    $.Constant({Static:true , Public:false}, "xmlnsNamespace", $.String, "http://www.w3.org/2000/xmlns/");

    $.Constant({Static:true , Public:false}, "xmlNamespace", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Field({Static:true , Public:false}, "binhexEncoding", $asm08.TypeRef("System.Text.BinHexEncoding"));

    $.Field({Static:true , Public:false}, "prefixes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "nodeWriterAsyncHelper", $asm08.TypeRef("System.Xml.XmlBaseWriter+XmlBaseWriterNodeWriterAsyncHelper"));

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:true , Public:false}, "BinHexEncoding", $asm08.TypeRef("System.Text.BinHexEncoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:false}, "NamespaceBoundary", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:false}, "Signing", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanFragment", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm08.TypeRef("System.Xml.IFragmentCapableXmlDictionaryWriter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter+WriteBase64AsyncResult */ 

(function WriteBase64AsyncResult$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlBaseWriter+WriteBase64AsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlBaseWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteBase64Text", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.Field({Static:true , Public:false}, "onComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlBaseWriter"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "actualByteCount", $.Int32);

    $.Field({Static:false, Public:false}, "totalByteCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter+Element */ 

(function Element$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter+Element", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrefixId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrefixId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "prefixId", $.Int32);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "PrefixId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlBaseWriter+DocumentState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlBaseWriter+DocumentState", 
    BaseType: $asm02.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Document: 1, 
    Epilog: 2, 
    End: 3, 
  }
);

/* class System.Xml.XmlBaseWriter+NamespaceManager */ 

(function NamespaceManager$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter+NamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLangAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      new JSIL.MethodSignature($.String, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespaceIfNotDeclared", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSpaceAttribute", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclareNamespaces", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceBoundary", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupAttributePrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceBoundary", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Sign", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlCanonicalWriter"))
    );

    $.Field({Static:false, Public:false}, "namespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseWriter+NamespaceManager+Namespace")]));

    $.Field({Static:false, Public:false}, "lastNameSpace", $asm08.TypeRef("System.Xml.XmlBaseWriter+NamespaceManager+Namespace"));

    $.Field({Static:false, Public:false}, "nsCount", $.Int32);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseWriter+NamespaceManager+XmlAttribute")]));

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "space", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "lang", $.String);

    $.Field({Static:false, Public:false}, "namespaceBoundary", $.Int32);

    $.Field({Static:false, Public:false}, "nsTop", $.Int32);

    $.Field({Static:false, Public:false}, "defaultNamespace", $asm08.TypeRef("System.Xml.XmlBaseWriter+NamespaceManager+Namespace"));

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true }, "NamespaceBoundary", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter+NamespaceManager+XmlAttribute */ 

(function XmlAttribute$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter+NamespaceManager+XmlAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.Field({Static:false, Public:false}, "space", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "lang", $.String);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter+NamespaceManager+Namespace */ 

(function Namespace$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter+NamespaceManager+Namespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrefixChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UriDictionaryString", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Uri", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UriDictionaryString", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "xNs", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "prefixChar", $.Char);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "PrefixChar", $.Char);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Uri", $.String);

    $.Property({Static:false, Public:true }, "UriDictionaryString", $asm08.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter+XmlBaseWriterNodeWriterAsyncHelper */ 

(function XmlBaseWriterNodeWriterAsyncHelper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter+XmlBaseWriterNodeWriterAsyncHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteBase64Text", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWriteComplete", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetArguments", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "StartAsync", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.AsyncCompletionResult"))
    );

    $.Field({Static:true , Public:false}, "onWriteComplete", $asm09.TypeRef("System.Runtime.AsyncEventArgsCallback"));

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlBaseWriter"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "actualByteCount", $.Int32);

    $.Field({Static:false, Public:false}, "totalByteCount", $.Int32);

    $.Field({Static:false, Public:false}, "nodeWriterAsyncState", $asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlNodeWriterWriteBase64TextArgs")]));

    $.Field({Static:false, Public:false}, "nodeWriterArgs", $asm08.TypeRef("System.Xml.XmlNodeWriterWriteBase64TextArgs"));

    $.Field({Static:false, Public:false}, "inputState", $asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriter */ 

(function XmlBinaryWriter$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseWriter"), 
      Name: "System.Xml.XmlBinaryWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm08.TypeRef("System.Xml.XmlBinaryNodeType"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlBinaryNodeType"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlBinaryNodeWriter"));

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 2 */ $asm08.TypeRef("System.Xml.IXmlBinaryWriterInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriterSession */ 

(function XmlBinaryWriterSession$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryWriterSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKeys", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBinaryWriterSession+IntArray"), [$asm08.TypeRef("System.Xml.IXmlDictionary"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryAdd", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "strings", $asm08.TypeRef("System.Xml.XmlBinaryWriterSession+PriorityDictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "maps", $asm08.TypeRef("System.Xml.XmlBinaryWriterSession+PriorityDictionary`2", [$asm08.TypeRef("System.Xml.IXmlDictionary"), $asm08.TypeRef("System.Xml.XmlBinaryWriterSession+IntArray")]));

    $.Field({Static:false, Public:false}, "nextKey", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Xml.XmlBinaryWriterSession+PriorityDictionary`2 */ 

(function PriorityDictionary$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryWriterSession+PriorityDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DecreaseAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Now", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Field({Static:false, Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBinaryWriterSession+PriorityDictionary`2+Entry", [$.GenericParameter("K"), $.GenericParameter("V")])]));

    $.Field({Static:false, Public:false}, "listCount", $.Int32);

    $.Field({Static:false, Public:false}, "now", $.Int32);

    $.Property({Static:false, Public:false}, "Now", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlBinaryWriterSession+PriorityDictionary`2+Entry */ 

(function Entry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlBinaryWriterSession+PriorityDictionary`2+Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Key", $.GenericParameter("K"));

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("V"));

    $.Field({Static:false, Public:true }, "Time", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriterSession+IntArray */ 

(function IntArray$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryWriterSession+IntArray", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "Item", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.XmlDictionary */ 

(function XmlDictionary$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.IXmlDictionary"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false}, "empty", $asm08.TypeRef("System.Xml.IXmlDictionary"));

    $.Field({Static:false, Public:false}, "lookup", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "strings", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "nextId", $.Int32);

    $.Property({Static:true , Public:true }, "Empty", $asm08.TypeRef("System.Xml.IXmlDictionary"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Xml.IXmlDictionary")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Xml.XmlDictionary+EmptyDictionary */ 

(function EmptyDictionary$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionary+EmptyDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Xml.IXmlDictionary")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.OnXmlDictionaryReaderClose */ 

JSIL.MakeDelegate("System.Xml.OnXmlDictionaryReaderClose", true, [], 
  JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader")));

/* class System.Xml.XmlDictionaryReader */ 

(function XmlDictionaryReader$Members () {
  var $, $thisType;
































































































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlDictionaryReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDictionaryReader", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.Xml.XmlReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNonAtomizedNames", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsTextNode", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlNodeType")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadBooleanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadBooleanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.IXmlNamespaceResolver")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsQualifiedName", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), [$.String, $.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetArrayLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetBase64ContentLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetLocalNameAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetNamespaceUriAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValueAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "MaxInitialArrayLength", $.Int32, 65535);

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Xml.XmlDictionaryReader+XmlWrappedReader */ 

(function XmlWrappedReader$Members () {
  var $, $thisType;



































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlDictionaryReader+XmlWrappedReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlReader"), $asm0A.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "reader", $asm0A.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "nsMgr", $asm0A.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0A.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.XmlDictionaryReaderQuotaTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlDictionaryReaderQuotaTypes", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    MaxDepth: 1, 
    MaxStringContentLength: 2, 
    MaxArrayLength: 4, 
    MaxBytesPerRead: 8, 
    MaxNameTableCharCount: 16, 
  }
);

/* class System.Xml.XmlDictionaryReaderQuotas */ 

(function XmlDictionaryReaderQuotas$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionaryReaderQuotas", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotaTypes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Max", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxArrayLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxBytesPerRead", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxDepth", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxNameTableCharCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxStringContentLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ModifiedQuotas", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotaTypes"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InternalCopyTo", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxArrayLength", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxBytesPerRead", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxDepth", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxNameTableCharCount", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxStringContentLength", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "readOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "maxStringContentLength", $.Int32);

    $.Field({Static:false, Public:false}, "maxArrayLength", $.Int32);

    $.Field({Static:false, Public:false}, "maxDepth", $.Int32);

    $.Field({Static:false, Public:false}, "maxNameTableCharCount", $.Int32);

    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32);

    $.Field({Static:false, Public:false}, "modifiedQuotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotaTypes"));

    $.Constant({Static:true , Public:false}, "DefaultMaxDepth", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "DefaultMaxStringContentLength", $.Int32, 8192);

    $.Constant({Static:true , Public:false}, "DefaultMaxArrayLength", $.Int32, 16384);

    $.Constant({Static:true , Public:false}, "DefaultMaxBytesPerRead", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "DefaultMaxNameTableCharCount", $.Int32, 16384);

    $.Field({Static:true , Public:false}, "defaultQuota", $.Type);

    $.Field({Static:true , Public:false}, "maxQuota", $.Type);

    $.Property({Static:true , Public:true }, "Max", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxStringContentLength", $.Int32)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [8192]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxArrayLength", $.Int32)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [16384]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxBytesPerRead", $.Int32)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [4096]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxDepth", $.Int32)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [32]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxNameTableCharCount", $.Int32)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [16384]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ModifiedQuotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotaTypes"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Xml.XmlDictionaryString */ 

(function XmlDictionaryString$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionaryString", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.IXmlDictionary"), $.String, 
          $.Int32
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Dictionary", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.IXmlDictionary"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ToUTF8", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Constant({Static:true , Public:false}, "MinKey", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MaxKey", $.Int32, 536870911);

    $.Field({Static:false, Public:false}, "dictionary", $asm08.TypeRef("System.Xml.IXmlDictionary"));

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "key", $.Int32);

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "emptyStringDictionary", $asm08.TypeRef("System.Xml.XmlDictionaryString+EmptyStringDictionary"));

    $.Property({Static:true , Public:true }, "Empty", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Dictionary", $asm08.TypeRef("System.Xml.IXmlDictionary"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Key", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Xml.XmlDictionaryString+EmptyStringDictionary */ 

(function EmptyStringDictionary$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionaryString+EmptyStringDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmptyString", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.Field({Static:false, Public:false}, "empty", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "EmptyString", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Xml.IXmlDictionary")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlTextWriterInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlTextWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ]));
  }, []);

/* class System.Xml.XmlUTF8TextWriter */ 

(function XmlUTF8TextWriter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseWriter"), 
      Name: "System.Xml.XmlUTF8TextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanFragment", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FastAsync", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.Property({Static:false, Public:false, Virtual:true }, "FastAsync", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanFragment", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm08.TypeRef("System.Xml.IXmlTextWriterInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8NodeWriter */ 

(function XmlUTF8NodeWriter$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlStreamNodeWriter"), 
      Name: "System.Xml.XmlUTF8NodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginInternalWriteBase64Text", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWriteBase64Text", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndInternalWriteBase64Text", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWriteBase64Text", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharEntityBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm02.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToBase16", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteEscapedText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteAmpersandCharEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteApostropheCharEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64TextAsync", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlNodeWriterWriteBase64TextArgs")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteGreaterThanCharEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHexCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteLessThanCharEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefix", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteQuoteCharEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartXmlnsAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "entityChars", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "isEscapedAttributeChar", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "isEscapedElementChar", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "inAttribute", $.Boolean);

    $.Constant({Static:true , Public:false}, "bufferLength", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "maxEntityLength", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "maxBytesPerChar", $.Int32, 3);

    $.Field({Static:false, Public:false}, "encoding", $asm02.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "internalWriteBase64TextAsyncWriter", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter+InternalWriteBase64TextAsyncWriter"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "startDecl", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "endDecl", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "utf8Decl", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "digits", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultIsEscapedAttributeChar", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultIsEscapedElementChar", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Property({Static:false, Public:true }, "Encoding", $asm02.TypeRef("System.Text.Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8NodeWriter+InternalWriteBase64TextAsyncWriter */ 

(function InternalWriteBase64TextAsyncWriter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlUTF8NodeWriter+InternalWriteBase64TextAsyncWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteBase64TextAsync", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnGetBufferComplete", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnTrailBytesComplete", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWriteComplete", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartAsync", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.AsyncCompletionResult"), [$asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlNodeWriterWriteBase64TextArgs")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBufferAsync", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.AsyncCompletionResult"))
    );

    $.Field({Static:false, Public:false}, "nodeState", $asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlNodeWriterWriteBase64TextArgs")]));

    $.Field({Static:false, Public:false}, "writerState", $asm09.TypeRef("System.Runtime.AsyncEventArgs`1", [$asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments")]));

    $.Field({Static:false, Public:false}, "writerArgs", $asm08.TypeRef("System.Xml.XmlWriteBase64AsyncArguments"));

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.Field({Static:false, Public:false}, "getBufferState", $asm08.TypeRef("System.Xml.XmlStreamNodeWriter+GetBufferAsyncEventArgs"));

    $.Field({Static:false, Public:false}, "getBufferArgs", $asm08.TypeRef("System.Xml.XmlStreamNodeWriter+GetBufferArgs"));

    $.Field({Static:true , Public:false}, "onTrailByteComplete", $asm09.TypeRef("System.Runtime.AsyncEventArgsCallback"), function ($pi) {
        return $asm09.System.Runtime.AsyncEventArgsCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnTrailBytesComplete", JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs")), true, false));
      });

    $.Field({Static:true , Public:false}, "onWriteComplete", $asm09.TypeRef("System.Runtime.AsyncEventArgsCallback"), function ($pi) {
        return $asm09.System.Runtime.AsyncEventArgsCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnWriteComplete", JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs")), true, false));
      });

    $.Field({Static:true , Public:false}, "onGetBufferComplete", $asm09.TypeRef("System.Runtime.AsyncEventArgsCallback"), function ($pi) {
        return $asm09.System.Runtime.AsyncEventArgsCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnGetBufferComplete", JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.IAsyncEventArgs")), true, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8NodeWriter+WriteBase64TextAsyncResult */ 

(function WriteBase64TextAsyncResult$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlUTF8NodeWriter+WriteBase64TextAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteBase64Text", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteTrailBytes", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnTrailBytesComplete", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.Field({Static:true , Public:false}, "onTrailBytesComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnTrailBytesComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:true , Public:false}, "onComplete", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnComplete", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.Field({Static:false, Public:false}, "trailBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "trailByteCount", $.Int32);

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8NodeWriter+InternalWriteBase64TextAsyncResult */ 

(function InternalWriteBase64TextAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Xml.XmlUTF8NodeWriter+InternalWriteBase64TextAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"), 
          $asm02.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWork", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteCharacters", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteTrailingCharacters", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWriteCharacters", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWriteTrailingCharacters", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "encoding", $asm08.TypeRef("System.Text.Base64Encoding"));

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.Field({Static:true , Public:false}, "onWriteCharacters", $asm02.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "onWriteTrailingCharacters", $asm09.TypeRef("System.Runtime.AsyncResult+AsyncCompletion"), function ($pi) {
        return $asm09.System.Runtime.AsyncResult_AsyncCompletion.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnWriteTrailingCharacters", new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IAsyncResult")]), true, false));
      });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.UniqueId */ 

(function UniqueId$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.UniqueId", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CharArrayLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsGuid", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToCharArray", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryGetGuid", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryGetGuid", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeDecode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Int16]), $.Char, 
          $.Char
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeEncode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Byte, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetInt32", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetInt64", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeParse", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeSetInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeSetInt64", 
      new JSIL.MethodSignature(null, [$.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "idLow", $.Int64);

    $.Field({Static:false, Public:false}, "idHigh", $.Int64);

    $.Field({Static:false, Public:false}, "s", $.String)
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "guidLength", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "uuidLength", $.Int32, 45);

    $.Field({Static:true , Public:false}, "char2val", $jsilcore.TypeRef("System.Array", [$.Int16]));

    $.Constant({Static:true , Public:false}, "val2char", $.String, "0123456789abcdef");

    $.Property({Static:false, Public:true }, "CharArrayLength", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsGuid", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Xml.IXmlMtomReaderInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlMtomReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
  }, []);

/* class System.Xml.XmlMtomReader */ 

(function XmlMtomReader$Members () {
  var $, $thisType;




























































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlMtomReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceToContentOnElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContentTransferEncodingOnBinaryPart", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ContentTransferEncodingHeader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContentTransferEncodingOnRoot", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ContentTransferEncodingHeader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContentType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecrementBufferQuota", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStartUri", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMessageContentTypeHeader", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.ContentTypeHeader"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMessageMimeVersionHeader", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.MimeVersionHeader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMimePart", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlMtomReader+MimePart"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRootContentTypeHeader", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Text.Encoding"), [
          $asm08.TypeRef("System.Xml.ContentTypeHeader"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRootMimePart", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlMtomReader+MimePart"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]), 
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReadEncodings", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "encodings", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Text.Encoding")]));

    $.Field({Static:false, Public:false}, "xmlReader", $asm08.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Field({Static:false, Public:false}, "infosetReader", $asm08.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Field({Static:false, Public:false}, "mimeReader", $asm08.TypeRef("System.Xml.MimeReader"));

    $.Field({Static:false, Public:false}, "mimeParts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm08.TypeRef("System.Xml.XmlMtomReader+MimePart")]));

    $.Field({Static:false, Public:false}, "onClose", $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose"));

    $.Field({Static:false, Public:false}, "readingBinaryElement", $.Boolean);

    $.Field({Static:false, Public:false}, "maxBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "bufferRemaining", $.Int32);

    $.Field({Static:false, Public:false}, "part", $asm08.TypeRef("System.Xml.XmlMtomReader+MimePart"));

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0A.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0A.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm08.TypeRef("System.Xml.IXmlMtomReaderInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.XmlMtomReader+MimePart */ 

(function MimePart$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlMtomReader+MimePart", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.MimeHeaders")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Headers", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.MimeHeaders"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedFromInfoset", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Stream", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Release", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferencedFromInfoset", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "headers", $asm08.TypeRef("System.Xml.MimeHeaders"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "isReferencedFromInfoset", $.Boolean);

    $.Property({Static:false, Public:false}, "Stream", $asm02.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "Headers", $asm08.TypeRef("System.Xml.MimeHeaders"));

    $.Property({Static:false, Public:false}, "ReferencedFromInfoset", $.Boolean);

    $.Property({Static:false, Public:false}, "Length", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlMtomReader+XopIncludeReader */ 

(function XopIncludeReader$Members () {
  var $, $thisType;

































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlMtomReader+XopIncludeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlMtomReader+MimePart"), $asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseStreams", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0A.TypeRef("System.Xml.IXmlLineInfo"), "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0A.TypeRef("System.Xml.IXmlLineInfo"), "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.Xml.IXmlLineInfo"), "HasLineInfo");

    $.Field({Static:false, Public:false}, "chunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "bytesRemaining", $.Int32);

    $.Field({Static:false, Public:false}, "part", $asm08.TypeRef("System.Xml.XmlMtomReader+MimePart"));

    $.Field({Static:false, Public:false}, "readState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Field({Static:false, Public:false}, "parentReader", $asm08.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Field({Static:false, Public:false}, "stringValue", $.String);

    $.Field({Static:false, Public:false}, "stringOffset", $.Int32);

    $.Field({Static:false, Public:false}, "nodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "binHexStream", $asm02.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "valueBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "valueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "valueCount", $.Int32);

    $.Field({Static:false, Public:false}, "finishedStream", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0A.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0A.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.MimeMessageReader */ 

(function MimeMessageReader$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MimeMessageReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetContentStream", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadHeaders", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.MimeHeaders"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:true , Public:false}, "CRLFCRLF", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "getContentStreamCalled", $.Boolean);

    $.Field({Static:false, Public:false}, "mimeHeaderReader", $asm08.TypeRef("System.Xml.MimeHeaderReader"));

    $.Field({Static:false, Public:false}, "reader", $asm08.TypeRef("System.Xml.DelimittedStreamReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeReader */ 

(function MimeReader$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MimeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BlockRead", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Preface", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetContentStream", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadHeaders", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.MimeHeaders"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadNextPart", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "CRLFCRLF", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "boundaryBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "content", $.String);

    $.Field({Static:false, Public:false}, "currentStream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "mimeHeaderReader", $asm08.TypeRef("System.Xml.MimeHeaderReader"));

    $.Field({Static:false, Public:false}, "reader", $asm08.TypeRef("System.Xml.DelimittedStreamReader"));

    $.Field({Static:false, Public:false}, "scratch", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Preface", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DelimittedStreamReader */ 

(function DelimittedStreamReader$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.DelimittedStreamReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.DelimittedStreamReader+DelimittedReadStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextStream", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchDelimitter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.DelimittedStreamReader+MatchState"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchRemainder", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessRead", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.DelimittedStreamReader+DelimittedReadStream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "canGetNextStream", $.Boolean);

    $.Field({Static:false, Public:false}, "currentStream", $asm08.TypeRef("System.Xml.DelimittedStreamReader+DelimittedReadStream"));

    $.Field({Static:false, Public:false}, "delimitter", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "matchBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "scratch", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "stream", $asm08.TypeRef("System.Xml.BufferedReadStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.DelimittedStreamReader+MatchState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DelimittedStreamReader+MatchState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    True: 0, 
    False: 1, 
    InsufficientData: 2, 
  }
);

/* class System.Xml.DelimittedStreamReader+DelimittedReadStream */ 

(function DelimittedReadStream$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.DelimittedStreamReader+DelimittedReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.DelimittedStreamReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "reader", $asm08.TypeRef("System.Xml.DelimittedStreamReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeaders */ 

(function MimeHeaders$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MimeHeaders", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.MimeHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentID", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.ContentIDHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTransferEncoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.ContentTransferEncodingHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.ContentTypeHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MimeVersion", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.MimeVersionHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Release", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.Field({Static:false, Public:false}, "headers", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm08.TypeRef("System.Xml.MimeHeader")]));

    $.Property({Static:false, Public:true }, "ContentType", $asm08.TypeRef("System.Xml.ContentTypeHeader"));

    $.Property({Static:false, Public:true }, "ContentID", $asm08.TypeRef("System.Xml.ContentIDHeader"));

    $.Property({Static:false, Public:true }, "ContentTransferEncoding", $asm08.TypeRef("System.Xml.ContentTransferEncodingHeader"));

    $.Property({Static:false, Public:true }, "MimeVersion", $asm08.TypeRef("System.Xml.MimeVersionHeader"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeaders+Constants */ 

(function Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xml.MimeHeaders+Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ContentTransferEncoding", $.String, "content-transfer-encoding");

    $.Constant({Static:true , Public:true }, "ContentID", $.String, "content-id");

    $.Constant({Static:true , Public:true }, "ContentType", $.String, "content-type");

    $.Constant({Static:true , Public:true }, "MimeVersion", $.String, "mime-version");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeader */ 

(function MimeHeader$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MimeHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ContentTypeHeader */ 

(function ContentTypeHeader$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.ContentTypeHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MediaSubtype", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MediaType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);

    $.Field({Static:false, Public:false}, "mediaType", $.String);

    $.Field({Static:false, Public:false}, "subType", $.String);

    $.Field({Static:false, Public:false}, "parameters", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "MediaType", $.String);

    $.Property({Static:false, Public:true }, "MediaSubtype", $.String);

    $.Property({Static:false, Public:true }, "Parameters", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ContentTransferEncoding */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ContentTransferEncoding", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SevenBit: 0, 
    EightBit: 1, 
    Binary: 2, 
    Other: 3, 
    Unspecified: 4, 
  }
);

/* class System.Xml.ContentTransferEncodingHeader */ 

(function ContentTransferEncodingHeader$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.ContentTransferEncodingHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.ContentTransferEncoding"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTransferEncoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.ContentTransferEncoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTransferEncodingValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "contentTransferEncoding", $asm08.TypeRef("System.Xml.ContentTransferEncoding"));

    $.Field({Static:false, Public:false}, "contentTransferEncodingValue", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Binary", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "EightBit", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SevenBit", $.Type);

    $.Property({Static:false, Public:true }, "ContentTransferEncoding", $asm08.TypeRef("System.Xml.ContentTransferEncoding"));

    $.Property({Static:false, Public:true }, "ContentTransferEncodingValue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ContentIDHeader */ 

(function ContentIDHeader$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.ContentIDHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeVersionHeader */ 

(function MimeVersionHeader$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.MimeVersionHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeaderReader */ 

(function MimeHeaderReader$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MimeHeaderReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendName", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferEnd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessBuffer", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    );

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "maxOffset", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "readState", $asm08.TypeRef("System.Xml.MimeHeaderReader+ReadState"));

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.MimeHeaderReader+ReadState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.MimeHeaderReader+ReadState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ReadName: 0, 
    SkipWS: 1, 
    ReadValue: 2, 
    ReadLF: 3, 
    ReadWS: 4, 
    EOF: 5, 
  }
);

/* class System.Xml.BufferedReadStream */ 

(function BufferedReadStream$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.BufferedReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "storedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "storedLength", $.Int32);

    $.Field({Static:false, Public:false}, "storedOffset", $.Int32);

    $.Field({Static:false, Public:false}, "readMore", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MailBnfHelper */ 

(function MailBnfHelper$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Xml.MailBnfHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "IsValidMimeBoundary", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadDigits", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm02.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadParameterAttribute", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm02.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadParameterValue", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm02.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadQuotedString", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm02.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadToken", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm02.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SkipCFWS", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:true , Public:false}, "s_fqtext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm02.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "s_ttext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm02.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "s_digits", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm02.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "s_boundary", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm02.System.Boolean, 128);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlMtomWriterInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlMtomWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ]));
  }, []);

/* class System.Xml.XmlMtomWriter */ 

(function XmlMtomWriter$Members () {
  var $, $thisType;







































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Xml.XmlMtomWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CharSet", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfEndContentTypeAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfStartContentTypeAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateUriForMimePart", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBoundaryString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentTypeForMimeMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentTypeForRootMimePart", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Text.Encoding"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUTF8Encoding", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfElementIsXOPInclude", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSizeOfMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64Inline", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64InlineIfPresent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMimeHeaders", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.IStreamProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXOPBinaryParts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXOPInclude", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "MaxInlinedBytes", $.Int32, 767);

    $.Field({Static:false, Public:false}, "maxSizeInBytes", $.Int32);

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "infosetWriter", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "mimeWriter", $asm08.TypeRef("System.Xml.MimeWriter"));

    $.Field({Static:false, Public:false}, "encoding", $asm02.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "isUTF8", $.Boolean);

    $.Field({Static:false, Public:false}, "contentID", $.String);

    $.Field({Static:false, Public:false}, "contentType", $.String);

    $.Field({Static:false, Public:false}, "initialContentTypeForRootPart", $.String);

    $.Field({Static:false, Public:false}, "initialContentTypeForMimeMessage", $.String);

    $.Field({Static:false, Public:false}, "contentTypeStream", $asm02.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "mimeParts", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Xml.XmlMtomWriter+MimePart")]));

    $.Field({Static:false, Public:false}, "binaryDataChunks", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Xml.MtomBinaryData")]));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "totalSizeOfMimeParts", $.Int32);

    $.Field({Static:false, Public:false}, "sizeOfBufferedBinaryData", $.Int32);

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "isClosed", $.Boolean);

    $.Field({Static:false, Public:false}, "ownsStream", $.Boolean);

    $.Property({Static:false, Public:false}, "Writer", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Property({Static:false, Public:false}, "IsInitialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0A.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.ImplementInterfaces(
      /* 1 */ $asm08.TypeRef("System.Xml.IXmlMtomWriterInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlMtomWriter+MimeBoundaryGenerator */ 

(function MimeBoundaryGenerator$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Xml.XmlMtomWriter+MimeBoundaryGenerator", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Next", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "id", $.Int64);

    $.Field({Static:true , Public:false}, "prefix", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlMtomWriter+MimePart */ 

(function MimePart$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlMtomWriter+MimePart", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Xml.MtomBinaryData")]), $.String, 
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSize", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "binaryData", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Xml.MtomBinaryData")]));

    $.Field({Static:false, Public:false}, "contentID", $.String);

    $.Field({Static:false, Public:false}, "contentType", $.String);

    $.Field({Static:false, Public:false}, "contentTransferEncoding", $.String);

    $.Field({Static:false, Public:false}, "sizeInBytes", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MtomGlobals */ 

(function MtomGlobals$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xml.MtomGlobals", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "XopIncludeLocalName", $.String, "Include");

    $.Field({Static:true , Public:false}, "XopIncludeNamespace", $.String, "http://www.w3.org/2004/08/xop/include");

    $.Field({Static:true , Public:false}, "XopIncludePrefix", $.String, "xop");

    $.Field({Static:true , Public:false}, "XopIncludeHrefLocalName", $.String, "href");

    $.Field({Static:true , Public:false}, "XopIncludeHrefNamespace", $.String, function ($pi) {
        return $asm02.System.String.Empty;
      });

    $.Field({Static:true , Public:false}, "MediaType", $.String, "multipart");

    $.Field({Static:true , Public:false}, "MediaSubtype", $.String, "related");

    $.Field({Static:true , Public:false}, "BoundaryParam", $.String, "boundary");

    $.Field({Static:true , Public:false}, "TypeParam", $.String, "type");

    $.Field({Static:true , Public:false}, "XopMediaType", $.String, "application");

    $.Field({Static:true , Public:false}, "XopMediaSubtype", $.String, "xop+xml");

    $.Field({Static:true , Public:false}, "XopType", $.String, "application/xop+xml");

    $.Field({Static:true , Public:false}, "StartParam", $.String, "start");

    $.Field({Static:true , Public:false}, "StartInfoParam", $.String, "start-info");

    $.Field({Static:true , Public:false}, "ActionParam", $.String, "action");

    $.Field({Static:true , Public:false}, "CharsetParam", $.String, "charset");

    $.Field({Static:true , Public:false}, "MimeContentTypeLocalName", $.String, "contentType");

    $.Field({Static:true , Public:false}, "MimeContentTypeNamespace200406", $.String, "http://www.w3.org/2004/06/xmlmime");

    $.Field({Static:true , Public:false}, "MimeContentTypeNamespace200505", $.String, "http://www.w3.org/2005/05/xmlmime");

    $.Field({Static:true , Public:false}, "DefaultContentTypeForBinary", $.String, "application/octet-stream");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeGlobals */ 

(function MimeGlobals$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xml.MimeGlobals", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "MimeVersionHeader", $.String, "MIME-Version");

    $.Field({Static:true , Public:false}, "DefaultVersion", $.String, "1.0");

    $.Field({Static:true , Public:false}, "ContentIDScheme", $.String, "cid:");

    $.Field({Static:true , Public:false}, "ContentIDHeader", $.String, "Content-ID");

    $.Field({Static:true , Public:false}, "ContentTypeHeader", $.String, "Content-Type");

    $.Field({Static:true , Public:false}, "ContentTransferEncodingHeader", $.String, "Content-Transfer-Encoding");

    $.Field({Static:true , Public:false}, "EncodingBinary", $.String, "binary");

    $.Field({Static:true , Public:false}, "Encoding8bit", $.String, "8bit");

    $.Field({Static:true , Public:false}, "COLONSPACE", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "DASHDASH", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "CRLF", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "BoundaryPrefix", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.MimeWriterState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.MimeWriterState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Start: 0, 
    StartPreface: 1, 
    StartPart: 2, 
    Header: 3, 
    Content: 4, 
    Closed: 5, 
  }
);

/* class System.Xml.MimeWriter */ 

(function MimeWriter$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MimeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteState", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.MimeWriterState"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBoundaryBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBoundarySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContentStream", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHeaderSize", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartPart", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartPreface", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeader", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "boundaryBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "state", $asm08.TypeRef("System.Xml.MimeWriterState"));

    $.Field({Static:false, Public:false}, "bufferedWrite", $asm08.TypeRef("System.Xml.BufferedWrite"));

    $.Field({Static:false, Public:false}, "contentStream", $asm02.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "WriteState", $asm08.TypeRef("System.Xml.MimeWriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BufferedWrite */ 

(function BufferedWrite$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.BufferedWrite", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.MtomBinaryDataType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.MtomBinaryDataType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Provider: 0, 
    Segment: 1, 
  }
);

/* class System.Xml.MtomBinaryData */ 

(function MtomBinaryData$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.MtomBinaryData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.IStreamProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.Field({Static:false, Public:false}, "type", $asm08.TypeRef("System.Xml.MtomBinaryDataType"));

    $.Field({Static:false, Public:false}, "provider", $asm08.TypeRef("System.Xml.IStreamProvider"));

    $.Field({Static:false, Public:false}, "chunk", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Length", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCanonicalWriter */ 

(function XmlCanonicalWriter$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlCanonicalWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+Attribute")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAttribute", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+XmlnsAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+XmlnsAttribute")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+XmlnsAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+Attribute")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+Attribute")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureXmlnsBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInclusivePrefix", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+XmlnsAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePrefix", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePrefix", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+Attribute")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePrefixes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SortAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndStartElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+XmlnsAttribute")]))
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.Field({Static:false, Public:false}, "elementStream", $asm02.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "elementBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "elementWriter", $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"));

    $.Field({Static:false, Public:false}, "inStartElement", $.Boolean);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+Scope")]));

    $.Field({Static:false, Public:false}, "xmlnsAttributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "xmlnsAttributes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+XmlnsAttribute")]));

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlCanonicalWriter+Attribute")]));

    $.Field({Static:false, Public:false}, "attribute", $asm08.TypeRef("System.Xml.XmlCanonicalWriter+Attribute"));

    $.Field({Static:false, Public:false}, "element", $asm08.TypeRef("System.Xml.XmlCanonicalWriter+Element"));

    $.Field({Static:false, Public:false}, "xmlnsBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "xmlnsOffset", $.Int32);

    $.Constant({Static:true , Public:false}, "maxBytesPerChar", $.Int32, 3);

    $.Field({Static:false, Public:false}, "xmlnsStartOffset", $.Int32);

    $.Field({Static:false, Public:false}, "includeComments", $.Boolean);

    $.Field({Static:false, Public:false}, "inclusivePrefixes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "xmlnsNamespace", $.String, "http://www.w3.org/2000/xmlns/");

    $.Field({Static:true , Public:false, ReadOnly:true }, "isEscapedAttributeChar", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "isEscapedElementChar", $jsilcore.TypeRef("System.Array", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCanonicalWriter+AttributeSorter */ 

(function AttributeSorter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlCanonicalWriter+AttributeSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlCanonicalWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlCanonicalWriter"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter+Scope */ 

(function Scope$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter+Scope", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "xmlnsAttributeCount", $.Int32);

    $.Field({Static:false, Public:true }, "xmlnsOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter+Element */ 

(function Element$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter+Element", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "prefixOffset", $.Int32);

    $.Field({Static:false, Public:true }, "prefixLength", $.Int32);

    $.Field({Static:false, Public:true }, "localNameOffset", $.Int32);

    $.Field({Static:false, Public:true }, "localNameLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter+Attribute */ 

(function Attribute$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter+Attribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "prefixOffset", $.Int32);

    $.Field({Static:false, Public:true }, "prefixLength", $.Int32);

    $.Field({Static:false, Public:true }, "localNameOffset", $.Int32);

    $.Field({Static:false, Public:true }, "localNameLength", $.Int32);

    $.Field({Static:false, Public:true }, "nsOffset", $.Int32);

    $.Field({Static:false, Public:true }, "nsLength", $.Int32);

    $.Field({Static:false, Public:true }, "offset", $.Int32);

    $.Field({Static:false, Public:true }, "$length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter+XmlnsAttribute */ 

(function XmlnsAttribute$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter+XmlnsAttribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "prefixOffset", $.Int32);

    $.Field({Static:false, Public:true }, "prefixLength", $.Int32);

    $.Field({Static:false, Public:true }, "nsOffset", $.Int32);

    $.Field({Static:false, Public:true }, "nsLength", $.Int32);

    $.Field({Static:false, Public:true }, "referred", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeWriterWriteBase64TextArgs */ 

(function XmlNodeWriterWriteBase64TextArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm02.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Int32)) ();
  };



  function XmlNodeWriterWriteBase64TextArgs_get_Buffer () {
    return this.XmlNodeWriterWriteBase64TextArgs$Buffer$value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_get_Count () {
    return this.XmlNodeWriterWriteBase64TextArgs$Count$value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_get_Offset () {
    return this.XmlNodeWriterWriteBase64TextArgs$Offset$value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_get_TrailBuffer () {
    return this.XmlNodeWriterWriteBase64TextArgs$TrailBuffer$value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_get_TrailCount () {
    return this.XmlNodeWriterWriteBase64TextArgs$TrailCount$value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_set_Buffer (value) {
    this.XmlNodeWriterWriteBase64TextArgs$Buffer$value = value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_set_Count (value) {
    this.XmlNodeWriterWriteBase64TextArgs$Count$value = (value | 0);
  }; 

  function XmlNodeWriterWriteBase64TextArgs_set_Offset (value) {
    this.XmlNodeWriterWriteBase64TextArgs$Offset$value = (value | 0);
  }; 

  function XmlNodeWriterWriteBase64TextArgs_set_TrailBuffer (value) {
    this.XmlNodeWriterWriteBase64TextArgs$TrailBuffer$value = value;
  }; 

  function XmlNodeWriterWriteBase64TextArgs_set_TrailCount (value) {
    this.XmlNodeWriterWriteBase64TextArgs$TrailCount$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNodeWriterWriteBase64TextArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      XmlNodeWriterWriteBase64TextArgs_get_Buffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      XmlNodeWriterWriteBase64TextArgs_get_Count
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32), 
      XmlNodeWriterWriteBase64TextArgs_get_Offset
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_TrailBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      XmlNodeWriterWriteBase64TextArgs_get_TrailBuffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_TrailCount", 
      JSIL.MethodSignature.Return($.Int32), 
      XmlNodeWriterWriteBase64TextArgs_get_TrailCount
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Buffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      XmlNodeWriterWriteBase64TextArgs_set_Buffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Count", 
      JSIL.MethodSignature.Action($.Int32), 
      XmlNodeWriterWriteBase64TextArgs_set_Count
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32), 
      XmlNodeWriterWriteBase64TextArgs_set_Offset
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TrailBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      XmlNodeWriterWriteBase64TextArgs_set_TrailBuffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TrailCount", 
      JSIL.MethodSignature.Action($.Int32), 
      XmlNodeWriterWriteBase64TextArgs_set_TrailCount
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNodeWriterWriteBase64TextArgs$TrailBuffer$value", $jsilcore.TypeRef("System.Array", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNodeWriterWriteBase64TextArgs$TrailCount$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNodeWriterWriteBase64TextArgs$Buffer$value", $jsilcore.TypeRef("System.Array", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNodeWriterWriteBase64TextArgs$Offset$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNodeWriterWriteBase64TextArgs$Count$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "TrailBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "TrailCount", $.Int32);

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Offset", $.Int32);

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlWriteBase64AsyncArguments */ 

(function XmlWriteBase64AsyncArguments$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm02.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Int32)) ();
  };



  function XmlWriteBase64AsyncArguments_get_Buffer () {
    return this.XmlWriteBase64AsyncArguments$Buffer$value;
  }; 

  function XmlWriteBase64AsyncArguments_get_Count () {
    return this.XmlWriteBase64AsyncArguments$Count$value;
  }; 

  function XmlWriteBase64AsyncArguments_get_Index () {
    return this.XmlWriteBase64AsyncArguments$Index$value;
  }; 

  function XmlWriteBase64AsyncArguments_get_Offset () {
    return this.XmlWriteBase64AsyncArguments$Offset$value;
  }; 

  function XmlWriteBase64AsyncArguments_set_Buffer (value) {
    this.XmlWriteBase64AsyncArguments$Buffer$value = value;
  }; 

  function XmlWriteBase64AsyncArguments_set_Count (value) {
    this.XmlWriteBase64AsyncArguments$Count$value = (value | 0);
  }; 

  function XmlWriteBase64AsyncArguments_set_Index (value) {
    this.XmlWriteBase64AsyncArguments$Index$value = (value | 0);
  }; 

  function XmlWriteBase64AsyncArguments_set_Offset (value) {
    this.XmlWriteBase64AsyncArguments$Offset$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlWriteBase64AsyncArguments", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      XmlWriteBase64AsyncArguments_get_Buffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      XmlWriteBase64AsyncArguments_get_Count
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Index", 
      JSIL.MethodSignature.Return($.Int32), 
      XmlWriteBase64AsyncArguments_get_Index
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32), 
      XmlWriteBase64AsyncArguments_get_Offset
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Buffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      XmlWriteBase64AsyncArguments_set_Buffer
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Count", 
      JSIL.MethodSignature.Action($.Int32), 
      XmlWriteBase64AsyncArguments_set_Count
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Index", 
      JSIL.MethodSignature.Action($.Int32), 
      XmlWriteBase64AsyncArguments_set_Index
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32), 
      XmlWriteBase64AsyncArguments_set_Offset
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlWriteBase64AsyncArguments$Buffer$value", $jsilcore.TypeRef("System.Array", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlWriteBase64AsyncArguments$Index$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlWriteBase64AsyncArguments$Count$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlWriteBase64AsyncArguments$Offset$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Index", $.Int32);

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Offset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSigningNodeWriter */ 

(function XmlSigningNodeWriter$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlNodeWriter"), 
      Name: "System.Xml.XmlSigningNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanonicalWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlCanonicalWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NodeWriter", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlNodeWriter"), $asm02.TypeRef("System.IO.Stream"), 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.Field({Static:false, Public:false}, "writer", $asm08.TypeRef("System.Xml.XmlNodeWriter"));

    $.Field({Static:false, Public:false}, "signingWriter", $asm08.TypeRef("System.Xml.XmlCanonicalWriter"));

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "base64Chars", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "text", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeWriter", $asm08.TypeRef("System.Xml.XmlNodeWriter"));

    $.Property({Static:false, Public:true }, "CanonicalWriter", $asm08.TypeRef("System.Xml.XmlCanonicalWriter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader */ 

(function XmlBaseReader$Members () {
  var $, $thisType;



























































































































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlBaseReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"), [$asm08.TypeRef("System.Xml.XmlBaseReader+QNameType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlAttribute", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAttribute", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"), [$asm08.TypeRef("System.Xml.XmlBaseReader+Namespace")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDeclAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $.String, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStandalone", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlElementNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FixXmlAttribute", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Base64Encoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Text.Base64Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BinHexEncoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Text.BinHexEncoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BufferReader", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementNode", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlElementNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Node", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutsideRootElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Signing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode"), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocalName", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceUri", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNonAtomizedNames", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOpenElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"), [$asm08.TypeRef("System.Xml.PrefixHandleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"), [$asm08.TypeRef("System.Xml.PrefixHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAtomicText", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAtomicTextNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToCData", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlCDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToComment", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlCommentNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToComplexText", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlComplexTextNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToDeclaration", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlDeclarationNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToEndOfFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNode", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToWhitespaceText", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("System.Text.Encoding"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SignAttribute", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlSigningNodeWriter"), $asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignEndElement", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SignNode", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SignNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SignStartElement", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetBase64ContentLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetLocalNameAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetNamespaceUriAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValueAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm08.TypeRef("System.Xml.XmlBufferReader"));

    $.Field({Static:false, Public:false}, "node", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"));

    $.Field({Static:false, Public:false}, "nsMgr", $asm08.TypeRef("System.Xml.XmlBaseReader+NamespaceManager"));

    $.Field({Static:false, Public:false}, "elementNodes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlElementNode")]));

    $.Field({Static:false, Public:false}, "attributeNodes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode")]));

    $.Field({Static:false, Public:false}, "atomicTextNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlAtomicTextNode"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "attributeStart", $.Int32);

    $.Field({Static:false, Public:false}, "quotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Field({Static:false, Public:false}, "nameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "declarationNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlDeclarationNode"));

    $.Field({Static:false, Public:false}, "complexTextNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlComplexTextNode"));

    $.Field({Static:false, Public:false}, "whitespaceTextNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlWhitespaceTextNode"));

    $.Field({Static:false, Public:false}, "cdataNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlCDataNode"));

    $.Field({Static:false, Public:false}, "commentNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlCommentNode"));

    $.Field({Static:false, Public:false}, "rootElementNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlElementNode"));

    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32);

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "trailCharCount", $.Int32);

    $.Field({Static:false, Public:false}, "trailByteCount", $.Int32);

    $.Field({Static:false, Public:false}, "trailChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "trailBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "rootElement", $.Boolean);

    $.Field({Static:false, Public:false}, "readingElement", $.Boolean);

    $.Field({Static:false, Public:false}, "signingWriter", $asm08.TypeRef("System.Xml.XmlSigningNodeWriter"));

    $.Field({Static:false, Public:false}, "signing", $.Boolean);

    $.Field({Static:false, Public:false}, "attributeSorter", $asm08.TypeRef("System.Xml.XmlBaseReader+AttributeSorter"));

    $.Field({Static:true , Public:false}, "initialNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlInitialNode"));

    $.Field({Static:true , Public:false}, "endOfFileNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlEndOfFileNode"));

    $.Field({Static:true , Public:false}, "closedNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlClosedNode"));

    $.Field({Static:true , Public:false}, "binhexEncoding", $asm08.TypeRef("System.Text.BinHexEncoding"));

    $.Field({Static:true , Public:false}, "base64Encoding", $asm08.TypeRef("System.Text.Base64Encoding"));

    $.Constant({Static:true , Public:false}, "xmlns", $.String, "xmlns");

    $.Constant({Static:true , Public:false}, "xml", $.String, "xml");

    $.Constant({Static:true , Public:false}, "xmlnsNamespace", $.String, "http://www.w3.org/2000/xmlns/");

    $.Constant({Static:true , Public:false}, "xmlNamespace", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Property({Static:true , Public:false}, "BinHexEncoding", $asm08.TypeRef("System.Text.BinHexEncoding"));

    $.Property({Static:true , Public:false}, "Base64Encoding", $asm08.TypeRef("System.Text.Base64Encoding"));

    $.Property({Static:false, Public:false}, "BufferReader", $asm08.TypeRef("System.Xml.XmlBufferReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:false}, "Node", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"));

    $.Property({Static:false, Public:false}, "ElementNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlElementNode"));

    $.Property({Static:false, Public:false}, "OutsideRootElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:false}, "Signing", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.XmlBaseReader+QNameType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlBaseReader+QNameType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Normal: 0, 
    Xmlns: 1, 
  }
);

/* class System.Xml.XmlBaseReader+XmlNode */ 

(function XmlNode$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader+XmlNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.XmlNodeType"), $asm08.TypeRef("System.Xml.PrefixHandle"), 
          $asm08.TypeRef("System.Xml.StringHandle"), $asm08.TypeRef("System.Xml.ValueHandle"), 
          $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode+XmlNodeFlags"), $asm0A.TypeRef("System.Xml.ReadState"), 
          $asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeTextNode"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeText", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeTextNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanGetAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanMoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DepthDelta", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExitScope", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAtomicValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.StringHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.PrefixHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QNameType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+QNameType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SkipValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.ValueHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalNameAndNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalNameAndNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPrefixAndLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExitScope", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAtomicValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEmptyElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NodeType", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QNameType", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+QNameType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QuoteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetLocalNameAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetNamespaceUriAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValueAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.Field({Static:false, Public:false}, "nodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "prefix", $asm08.TypeRef("System.Xml.PrefixHandle"));

    $.Field({Static:false, Public:false}, "localName", $asm08.TypeRef("System.Xml.StringHandle"));

    $.Field({Static:false, Public:false}, "value", $asm08.TypeRef("System.Xml.ValueHandle"));

    $.Field({Static:false, Public:false}, "ns", $asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"));

    $.Field({Static:false, Public:false}, "hasValue", $.Boolean);

    $.Field({Static:false, Public:false}, "canGetAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "canMoveToElement", $.Boolean);

    $.Field({Static:false, Public:false}, "readState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Field({Static:false, Public:false}, "attributeTextNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeTextNode"));

    $.Field({Static:false, Public:false}, "exitScope", $.Boolean);

    $.Field({Static:false, Public:false}, "depthDelta", $.Int32);

    $.Field({Static:false, Public:false}, "isAtomicValue", $.Boolean);

    $.Field({Static:false, Public:false}, "skipValue", $.Boolean);

    $.Field({Static:false, Public:false}, "qnameType", $asm08.TypeRef("System.Xml.XmlBaseReader+QNameType"));

    $.Field({Static:false, Public:false}, "hasContent", $.Boolean);

    $.Field({Static:false, Public:false}, "isEmptyElement", $.Boolean);

    $.Field({Static:false, Public:false}, "quoteChar", $.Char);

    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true }, "LocalName", $asm08.TypeRef("System.Xml.StringHandle"));

    $.Property({Static:false, Public:true }, "Prefix", $asm08.TypeRef("System.Xml.PrefixHandle"));

    $.Property({Static:false, Public:true }, "CanGetAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "CanMoveToElement", $.Boolean);

    $.Property({Static:false, Public:true }, "AttributeText", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeTextNode"));

    $.Property({Static:false, Public:true }, "SkipValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm08.TypeRef("System.Xml.ValueHandle"));

    $.Property({Static:false, Public:true }, "DepthDelta", $.Int32);

    $.Property({Static:false, Public:true }, "HasContent", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "QNameType", $asm08.TypeRef("System.Xml.XmlBaseReader+QNameType"));

    $.Property({Static:false, Public:true }, "Namespace", $asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"));

    $.Property({Static:false, Public:true }, "IsAtomicValue", $.Boolean);

    $.Property({Static:false, Public:true }, "ExitScope", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true }, "ValueAsString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlBaseReader+XmlNode+XmlNodeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlBaseReader+XmlNode+XmlNodeFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    CanGetAttribute: 1, 
    CanMoveToElement: 2, 
    HasValue: 4, 
    AtomicValue: 8, 
    SkipValue: 16, 
    HasContent: 32, 
  }
);

/* class System.Xml.XmlBaseReader+XmlElementNode */ 

(function XmlElementNode$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlElementNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.PrefixHandle"), $asm08.TypeRef("System.Xml.StringHandle"), 
          $asm08.TypeRef("System.Xml.ValueHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndElement", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlEndElementNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BufferOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "endElementNode", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlEndElementNode"));

    $.Field({Static:false, Public:false}, "bufferOffset", $.Int32);

    $.Field({Static:false, Public:true }, "NameOffset", $.Int32);

    $.Field({Static:false, Public:true }, "NameLength", $.Int32);

    $.Property({Static:false, Public:true }, "EndElement", $asm08.TypeRef("System.Xml.XmlBaseReader+XmlEndElementNode"));

    $.Property({Static:false, Public:true }, "BufferOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlAttributeNode */ 

(function XmlAttributeNode$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlAttributeNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.PrefixHandle"), $asm08.TypeRef("System.Xml.StringHandle"), 
          $asm08.TypeRef("System.Xml.ValueHandle")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlEndElementNode */ 

(function XmlEndElementNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlEndElementNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.PrefixHandle"), $asm08.TypeRef("System.Xml.StringHandle"), 
          $asm08.TypeRef("System.Xml.ValueHandle")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlTextNode */ 

(function XmlTextNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.XmlNodeType"), $asm08.TypeRef("System.Xml.PrefixHandle"), 
          $asm08.TypeRef("System.Xml.StringHandle"), $asm08.TypeRef("System.Xml.ValueHandle"), 
          $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode+XmlNodeFlags"), $asm0A.TypeRef("System.Xml.ReadState"), 
          $asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeTextNode"), $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlAtomicTextNode */ 

(function XmlAtomicTextNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader+XmlAtomicTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlComplexTextNode */ 

(function XmlComplexTextNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader+XmlComplexTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlWhitespaceTextNode */ 

(function XmlWhitespaceTextNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader+XmlWhitespaceTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlCDataNode */ 

(function XmlCDataNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader+XmlCDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlAttributeTextNode */ 

(function XmlAttributeTextNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader+XmlAttributeTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.PrefixHandle"), $asm08.TypeRef("System.Xml.StringHandle"), 
          $asm08.TypeRef("System.Xml.ValueHandle")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlInitialNode */ 

(function XmlInitialNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlInitialNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlDeclarationNode */ 

(function XmlDeclarationNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlDeclarationNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlCommentNode */ 

(function XmlCommentNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlCommentNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlEndOfFileNode */ 

(function XmlEndOfFileNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlEndOfFileNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+XmlClosedNode */ 

(function XmlClosedNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader+XmlNode"), 
      Name: "System.Xml.XmlBaseReader+XmlClosedNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+AttributeSorter */ 

(function AttributeSorter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader+AttributeSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareQNameType", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Xml.XmlBaseReader+QNameType"), $asm08.TypeRef("System.Xml.XmlBaseReader+QNameType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndeces", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSorted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "indeces", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "attributeNodes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeNode")]));

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "attributeIndex1", $.Int32);

    $.Field({Static:false, Public:false}, "attributeIndex2", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+NamespaceManager */ 

(function NamespaceManager$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader+NamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLangAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSpaceAttribute", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EmptyNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"), [$asm08.TypeRef("System.Xml.PrefixHandleType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"), [$asm08.TypeRef("System.Xml.PrefixHandle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Register", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Sign", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetShortPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.PrefixHandleType")])])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm08.TypeRef("System.Xml.XmlBufferReader"));

    $.Field({Static:false, Public:false}, "namespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+Namespace")]));

    $.Field({Static:false, Public:false}, "nsCount", $.Int32);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "shortPrefixUri", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+Namespace")]));

    $.Field({Static:true , Public:false}, "emptyNamespace", $asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"));

    $.Field({Static:true , Public:false}, "xmlNamespace", $asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"));

    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlBaseReader+NamespaceManager+XmlAttribute")]));

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "space", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "lang", $.String);

    $.Property({Static:true , Public:true }, "XmlNamespace", $asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"));

    $.Property({Static:true , Public:true }, "EmptyNamespace", $asm08.TypeRef("System.Xml.XmlBaseReader+Namespace"));

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+NamespaceManager+XmlAttribute */ 

(function XmlAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader+NamespaceManager+XmlAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.Field({Static:false, Public:false}, "space", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "lang", $.String);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+Namespace */ 

(function Namespace$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader+Namespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OuterUri", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.PrefixHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.StringHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OuterUri", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "prefix", $asm08.TypeRef("System.Xml.PrefixHandle"));

    $.Field({Static:false, Public:false}, "uri", $asm08.TypeRef("System.Xml.StringHandle"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "outerUri", $.Type);

    $.Field({Static:false, Public:false}, "uriString", $.String);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "Prefix", $asm08.TypeRef("System.Xml.PrefixHandle"));

    $.Property({Static:false, Public:true }, "Uri", $asm08.TypeRef("System.Xml.StringHandle"));

    $.Property({Static:false, Public:true }, "OuterUri", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader+QuotaNameTable */ 

(function QuotaNameTable$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Xml.XmlNameTable"), 
      Name: "System.Xml.XmlBaseReader+QuotaNameTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "reader", $asm08.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Field({Static:false, Public:false}, "nameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "maxCharCount", $.Int32);

    $.Field({Static:false, Public:false}, "charCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlTextReaderInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlTextReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
  }, []);

/* class System.Xml.XmlUTF8TextReader */ 

(function XmlUTF8TextReader$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader"), 
      Name: "System.Xml.XmlUTF8TextReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BreakText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPosition", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNextCharacterNonFFFE", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributeText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCharRef", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDeclaration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEscapedText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNonFFFE", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadQualifiedName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.PrefixHandle"), $asm08.TypeRef("System.Xml.StringHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTextAndWatchForInvalidCharacters", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWhitespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWhitespace", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhitespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyNCName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "MaxTextChunk", $.Int32, 2048);

    $.Field({Static:false, Public:false}, "prefix", $asm08.TypeRef("System.Xml.PrefixHandle"));

    $.Field({Static:false, Public:false}, "localName", $asm08.TypeRef("System.Xml.StringHandle"));

    $.Field({Static:false, Public:false}, "rowOffsets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "onClose", $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose"));

    $.Field({Static:false, Public:false}, "buffered", $.Boolean);

    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32);

    $.Field({Static:true , Public:false}, "charType", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0A.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm08.TypeRef("System.Xml.IXmlTextReaderInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8TextReader+CharType */ 

(function CharType$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xml.XmlUTF8TextReader+CharType", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "None", $.Byte, 0);

    $.Constant({Static:true , Public:true }, "FirstName", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "Name", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "Whitespace", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "Text", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "AttributeText", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "SpecialWhitespace", $.Byte, 32);

    $.Constant({Static:true , Public:true }, "Comment", $.Byte, 64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlBinaryReaderInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlBinaryReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
  }, []);

/* class System.Xml.XmlBinaryReader */ 

(function XmlBinaryReader$Members () {
  var $, $thisType;




















































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader"), 
      Name: "System.Xml.XmlBinaryReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CanOptimizeReadElementContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBinaryNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertNode", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm08.TypeRef("System.Xml.XmlBinaryNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlBinaryNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidArrayType", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToArrayElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAtomicTextWithEndElement", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAtomicTextNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributeText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+XmlAttributeTextNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBinaryText", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDictionaryKey", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDictionaryName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.StringHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMultiByteUInt31", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ValueHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.StringHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.PrefixHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPartialBinaryText", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPartialUnicodeText", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPartialUTF8Text", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlBaseReader+XmlTextNode"), $asm08.TypeRef("System.Xml.ValueHandleType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTextWithEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUInt16", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUInt31", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUInt8", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnicodeText", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipArrayElements", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipNodeType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetArrayLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetBase64ContentLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "isTextWithEndElement", $.Boolean);

    $.Field({Static:false, Public:false}, "buffered", $.Boolean);

    $.Field({Static:false, Public:false}, "arrayState", $asm08.TypeRef("System.Xml.XmlBinaryReader+ArrayState"));

    $.Field({Static:false, Public:false}, "arrayCount", $.Int32);

    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32);

    $.Field({Static:false, Public:false}, "arrayNodeType", $asm08.TypeRef("System.Xml.XmlBinaryNodeType"));

    $.Field({Static:false, Public:false}, "onClose", $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose"));

    $.ImplementInterfaces(
      /* 1 */ $asm08.TypeRef("System.Xml.IXmlBinaryReaderInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlBinaryReader+ArrayState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlBinaryReader+ArrayState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Element: 1, 
    Content: 2, 
  }
);

/* class System.Xml.XmlBufferReader */ 

(function XmlBufferReader$Members () {
  var $, $thisType;

































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBufferReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Advance", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByte", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBytes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndOfFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStreamed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAmpersandCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApostropheCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBase64", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBufferHard", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByteHard", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetDecimalCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDictionaryString", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetEscapedChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEscapedString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEscapedString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Int32, 
          $asm0A.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGreaterThanCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGuid", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHexCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt8", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLessThanCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNodeType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlBinaryNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQuoteCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRows", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Int32, 
          $asm0A.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnicodeString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUniqueId", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.UniqueId"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttrChar", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespaceKey", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespaceUnicode", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespaceUTF8", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBytes", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadDictionaryKey", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadDouble", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt16", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt8", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadList", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ValueHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadMultiByteUInt31", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadQName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ValueHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSingle", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUInt16", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUInt31", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUInt8", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnicodeValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.ValueHandle"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUTF8String", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlBinaryNodeType"), $asm08.TypeRef("System.Xml.ValueHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.ValueHandle"), $asm08.TypeRef("System.Xml.ValueHandleType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBuffer", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryReaderSession")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBuffer", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.IXmlDictionary"), 
          $asm08.TypeRef("System.Xml.XmlBinaryReaderSession")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBuffer", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm08.TypeRef("System.Xml.IXmlDictionary"), $asm08.TypeRef("System.Xml.XmlBinaryReaderSession")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetWindow", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipByte", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipNodeType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnsureByte", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnsureBytes", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeReadArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeReadArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "reader", $asm08.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "streamBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offsetMin", $.Int32);

    $.Field({Static:false, Public:false}, "offsetMax", $.Int32);

    $.Field({Static:false, Public:false}, "dictionary", $asm08.TypeRef("System.Xml.IXmlDictionary"));

    $.Field({Static:false, Public:false}, "session", $asm08.TypeRef("System.Xml.XmlBinaryReaderSession"));

    $.Field({Static:false, Public:false}, "guid", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Constant({Static:true , Public:false}, "maxBytesPerChar", $.Int32, 3);

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "windowOffset", $.Int32);

    $.Field({Static:false, Public:false}, "windowOffsetMax", $.Int32);

    $.Field({Static:false, Public:false}, "listValue", $asm08.TypeRef("System.Xml.ValueHandle"));

    $.Field({Static:true , Public:false}, "emptyByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm02.System.Byte, 0);
      });

    $.Field({Static:true , Public:false}, "empty", $.Type);

    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "IsStreamed", $.Boolean);

    $.Property({Static:false, Public:true }, "EndOfFile", $.Boolean);

    $.Property({Static:false, Public:true }, "Offset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlConverter */ 

(function XmlConverter$Members () {
  var $, $thisType;











































































  JSIL.MakeStaticClass("System.Xml.XmlConverter", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_Base64Encoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Text.Base64Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnicodeEncoding", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Text.UnicodeEncoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UTF8Encoding", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Text.UTF8Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
      new JSIL.MethodSignature($.Boolean, [$.Single])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripWhitespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToAsciiChars", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Double, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("System.Decimal"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("System.DateTime"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToCharsD2", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToCharsD4", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToCharsD7", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToCharsR", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToCharsR", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm02.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm02.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm02.TypeRef("System.DateTime"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Guid"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Guid"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInfinity", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32D2", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32D4", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32D7", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToStringUnicode", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm02.TypeRef("System.TimeSpan"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm02.TypeRef("System.TimeSpan"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUniqueId", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.UniqueId"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUniqueId", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.UniqueId"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToZero", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trim", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDateTime", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.DateTime")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDouble", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Double])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseInt32", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseInt64", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseSingle", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ])
    );

    $.Constant({Static:true , Public:true }, "MaxDateTimeChars", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "MaxInt32Chars", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "MaxInt64Chars", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "MaxBoolChars", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "MaxFloatChars", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "MaxDoubleChars", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "MaxDecimalChars", $.Int32, 40);

    $.Constant({Static:true , Public:true }, "MaxUInt64Chars", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "MaxPrimitiveChars", $.Int32, 64);

    $.Field({Static:true , Public:false}, "whiteSpaceChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "utf8Encoding", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false}, "unicodeEncoding", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false}, "base64Encoding", $asm08.TypeRef("System.Text.Base64Encoding"));

    $.Property({Static:true , Public:true }, "Base64Encoding", $asm08.TypeRef("System.Text.Base64Encoding"));

    $.Property({Static:true , Public:false}, "UTF8Encoding", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Property({Static:true , Public:false}, "UnicodeEncoding", $asm02.TypeRef("System.Text.UnicodeEncoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlExceptionHelper */ 

(function XmlExceptionHelper$Members () {
  var $, $thisType;















































  JSIL.MakeStaticClass("System.Xml.XmlExceptionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateConversionException", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlException"), [
          $.String, $.String, 
          $asm02.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEncodingException", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlException"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEncodingException", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlException"), [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWhatWasFound", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowBase64DataExpected", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowConversionOverflow", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowDeclarationNotFirst", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowDuplicateAttribute", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowDuplicateXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowEmptyNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowEndElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidBinaryFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidCharRef", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidRootData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidXml", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxArrayLengthExceeded", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxArrayLengthOrMaxItemsQuotaExceeded", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxBytesPerReadExceeded", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxDepthExceeded", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxNameTableCharCountExceeded", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxStringContentLengthExceeded", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMultipleRootElements", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowProcessingInstructionNotSupported", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTagMismatch", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTokenExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTokenExpected", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowUndefinedPrefix", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowUnexpectedEndElement", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowUnexpectedEndOfFile", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlDictionaryStringIDOutOfRange", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlDictionaryStringIDUndefinedSession", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlDictionaryStringIDUndefinedStatic", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $asm0A.TypeRef("System.Xml.XmlException")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.PrefixHandleType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.PrefixHandleType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    A: 1, 
    B: 2, 
    C: 3, 
    D: 4, 
    E: 5, 
    F: 6, 
    G: 7, 
    H: 8, 
    I: 9, 
    J: 10, 
    K: 11, 
    L: 12, 
    M: 13, 
    N: 14, 
    O: 15, 
    P: 16, 
    Q: 17, 
    R: 18, 
    S: 19, 
    T: 20, 
    U: 21, 
    V: 22, 
    W: 23, 
    X: 24, 
    Y: 25, 
    Z: 26, 
    Buffer: 27, 
    Max: 28, 
  }
);

/* class System.Xml.PrefixHandle */ 

(function PrefixHandle$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.PrefixHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXml", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXmlns", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAlphaPrefix", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.PrefixHandleType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.PrefixHandleType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm08.TypeRef("System.Xml.PrefixHandleType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.PrefixHandleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetShortPrefix", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.PrefixHandleType")])])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm08.TypeRef("System.Xml.XmlBufferReader"));

    $.Field({Static:false, Public:false}, "type", $asm08.TypeRef("System.Xml.PrefixHandleType"));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:true , Public:false}, "prefixStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "prefixBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXmlns", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXml", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.StringHandleConstStringType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.StringHandleConstStringType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Type: 0, 
    Root: 1, 
    Item: 2, 
  }
);

/* class System.Xml.StringHandle */ 

(function StringHandle$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.StringHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm08.TypeRef("System.Xml.XmlBufferReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm08.TypeRef("System.Xml.XmlBufferReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXmlns", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetConstantValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.StringHandleConstStringType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToPrefixHandle", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.PrefixHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm08.TypeRef("System.Xml.XmlBufferReader"));

    $.Field({Static:false, Public:false}, "type", $asm08.TypeRef("System.Xml.StringHandle+StringHandleType"));

    $.Field({Static:false, Public:false}, "key", $.Int32);

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:true , Public:false}, "constStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXmlns", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.StringHandle+StringHandleType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.StringHandle+StringHandleType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Dictionary: 0, 
    UTF8: 1, 
    EscapedUTF8: 2, 
    ConstString: 3, 
  }
);

/* enum System.Xml.ValueHandleConstStringType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ValueHandleConstStringType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    String: 0, 
    Number: 1, 
    Array: 2, 
    Object: 3, 
    Boolean: 4, 
    Null: 5, 
  }
);

/* class System.Xml.ValueHandleLength */ 

(function ValueHandleLength$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xml.ValueHandleLength", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Int8", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "Int16", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "Int32", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "Int64", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "UInt64", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "Single", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "Double", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "Decimal", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "DateTime", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "TimeSpan", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "Guid", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "UniqueId", $.Int32, 16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ValueHandleType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ValueHandleType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    True: 1, 
    False: 2, 
    Zero: 3, 
    One: 4, 
    Int8: 5, 
    Int16: 6, 
    Int32: 7, 
    Int64: 8, 
    UInt64: 9, 
    Single: 10, 
    Double: 11, 
    Decimal: 12, 
    DateTime: 13, 
    TimeSpan: 14, 
    Guid: 15, 
    UniqueId: 16, 
    UTF8: 17, 
    EscapedUTF8: 18, 
    Base64: 19, 
    Dictionary: 20, 
    List: 21, 
    Char: 22, 
    Unicode: 23, 
    QName: 24, 
    ConstString: 25, 
  }
);

/* class System.Xml.ValueHandle */ 

(function ValueHandle$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Xml.ValueHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBufferReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Base64Encoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Text.Base64Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChar", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharsText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDictionaryString", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEscapedCharsText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt16", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt8", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQNameDictionaryText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSingle", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt64", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnicodeCharsText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCharValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetConstantValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ValueHandleConstStringType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDictionaryValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetQNameValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.ValueHandleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.ValueHandleType"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sign", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToULong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToUniqueId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetByteArrayLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadBase64", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadChars", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadUnicodeChars", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm08.TypeRef("System.Xml.XmlBufferReader"));

    $.Field({Static:false, Public:false}, "type", $asm08.TypeRef("System.Xml.ValueHandleType"));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:true , Public:false}, "base64Encoding", $asm08.TypeRef("System.Text.Base64Encoding"));

    $.Field({Static:true , Public:false}, "constStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:true , Public:false}, "Base64Encoding", $asm08.TypeRef("System.Text.Base64Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.EncodingStreamWrapper */ 

(function EncodingStreamWrapper$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.EncodingStreamWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckUTF8DeclarationEncoding", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"), 
          $asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCharBreak", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareCaseInsensitive", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByteBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FillBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Text.Encoding"), [$asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingName", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSafeEncoding", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Text.Encoding"), [$asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedEncoding", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"), [$asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessBuffer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.ArraySegment`1", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBOMEncoding", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadBOMEncoding", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"), [
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReadDocumentEncoding", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowEncodingMismatch", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowEncodingMismatch", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowExpectedEncodingMismatch", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"), $asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF8", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeBEUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF8", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingBEUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Constant({Static:true , Public:false}, "BufferLength", $.Int32, 128);

    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingAttr", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUTF8", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUnicode", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUnicodeLE", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUnicodeBE", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "encodingCode", $asm08.TypeRef("System.Xml.EncodingStreamWrapper+SupportedEncoding"));

    $.Field({Static:false, Public:false}, "encoding", $asm02.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "enc", $asm02.TypeRef("System.Text.Encoder"));

    $.Field({Static:false, Public:false}, "dec", $asm02.TypeRef("System.Text.Decoder"));

    $.Field({Static:false, Public:false}, "isReading", $.Boolean);

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "byteOffset", $.Int32);

    $.Field({Static:false, Public:false}, "byteCount", $.Int32);

    $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.EncodingStreamWrapper+SupportedEncoding */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.EncodingStreamWrapper+SupportedEncoding", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UTF8: 0, 
    UTF16LE: 1, 
    UTF16BE: 2, 
    None: 3, 
  }
);

JSIL.DeclareNamespace("System.Text");
/* class System.Text.Base64Encoding */ 

(function Base64Encoding$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.Base64Encoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidLeadBytes", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidTailBytes", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.Field({Static:true , Public:false}, "char2val", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "val2char", $.String, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

    $.Field({Static:true , Public:false}, "val2byte", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.BinHexEncoding */ 

(function BinHexEncoding$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.BinHexEncoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "char2val", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "val2char", $.String, "0123456789ABCDEF");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Text.SurrogateChar */ 

(function SurrogateChar$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Text.SurrogateChar", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Char", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HighChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LowChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.Field({Static:false, Public:false}, "lowChar", $.Char);

    $.Field({Static:false, Public:false}, "highChar", $.Char);

    $.Constant({Static:true , Public:true }, "MinValue", $.Int32, 65536);

    $.Constant({Static:true , Public:true }, "MaxValue", $.Int32, 1114111);

    $.Constant({Static:true , Public:false}, "surHighMin", $.Char, "\ud800");

    $.Constant({Static:true , Public:false}, "surHighMax", $.Char, "\udbff");

    $.Constant({Static:true , Public:false}, "surLowMin", $.Char, "\udc00");

    $.Constant({Static:true , Public:false}, "surLowMax", $.Char, "\udfff");

    $.Property({Static:false, Public:true }, "LowChar", $.Char);

    $.Property({Static:false, Public:true }, "HighChar", $.Char);

    $.Property({Static:false, Public:true }, "Char", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.Serialization");
/* class System.Runtime.Serialization.DiagnosticUtility */ 

(function DiagnosticUtility$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("System.Runtime.Serialization.DiagnosticUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_DiagnosticTrace", 
      JSIL.MethodSignature.Return($asm0C.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExceptionUtility", 
      JSIL.MethodSignature.Return($asm0C.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionUtility", 
      JSIL.MethodSignature.Return($asm0C.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDiagnosticTraceImpl", 
      new JSIL.MethodSignature(null, [$asm0C.TypeRef("System.ServiceModel.Diagnostics.TraceSourceKind"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm0C.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "TraceSourceName", $.String, "System.Runtime.Serialization");

    $.Constant({Static:true , Public:false}, "EventSourceName", $.String, "System.Runtime.Serialization 4.0.0.0");

    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", $.String, "Default");

    $.Field({Static:true , Public:false}, "level", $asm03.TypeRef("System.Diagnostics.SourceLevels"), function ($pi) {
        return $asm03.System.Diagnostics.SourceLevels.Off;
      });

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldUseActivity", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, false);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm0C.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "exceptionUtility", $asm0C.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), null);

    $.Property({Static:true , Public:false}, "DiagnosticTrace", $asm0C.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Property({Static:true , Public:false}, "ExceptionUtility", $asm0C.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"));

    $.Property({Static:true , Public:false}, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceVerbose", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.AppSettings */ 

(function AppSettings$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Runtime.Serialization.AppSettings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureSettingsLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MaxMimeParts", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Constant({Static:true , Public:false}, "MaxMimePartsAppSettingsString", $.String, "microsoft:xmldictionaryreader:maxmimeparts");

    $.Constant({Static:true , Public:false}, "DefaultMaxMimeParts", $.Int32, 1000);

    $.Field({Static:true , Public:false}, "maxMimeParts", $.Int32);

    $.Field({Static:true , Public:false}, "settingsInitalized", $asm02.TypeRef("System.Boolean"), false);

    $.Field({Static:true , Public:false}, "appSettingsLock", $.Object);

    $.Property({Static:true , Public:false}, "MaxMimeParts", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataContractAttribute */ 

(function CollectionDataContractAttribute$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.CollectionDataContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsItemNameSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsKeyNameSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsNameSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsNamespaceSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsReference", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsReferenceSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsValueNameSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ItemName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ValueName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_IsReference", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ItemName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_KeyName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ValueName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "itemName", $.String);

    $.Field({Static:false, Public:false}, "keyName", $.String);

    $.Field({Static:false, Public:false}, "valueName", $.String);

    $.Field({Static:false, Public:false}, "isReference", $.Boolean);

    $.Field({Static:false, Public:false}, "isNameSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isNamespaceSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isReferenceSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isItemNameSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isKeyNameSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isValueNameSetExplicitly", $.Boolean);

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsNamespaceSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsNameSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ItemName", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsItemNameSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "KeyName", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsReference", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsReferenceSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsKeyNameSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ValueName", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsValueNameSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Class", "Struct")]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.ContractNamespaceAttribute */ 

(function ContractNamespaceAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.ContractNamespaceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ClrNamespace", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContractNamespace", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ClrNamespace", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "clrNamespace", $.String);

    $.Field({Static:false, Public:false}, "contractNamespace", $.String);

    $.Property({Static:false, Public:true }, "ClrNamespace", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContractNamespace", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Assembly", "Module")]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.DataContractAttribute */ 

(function DataContractAttribute$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.DataContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsNameSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsNamespaceSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsReference", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsReferenceSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_IsReference", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "isNameSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isNamespaceSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "isReference", $.Boolean);

    $.Field({Static:false, Public:false}, "isReferenceSetExplicitly", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReference", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsReferenceSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsNamespaceSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsNameSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Class", "Enum", "Struct")]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.DataMemberAttribute */ 

(function DataMemberAttribute$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.DataMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_EmitDefaultValue", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsNameSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_EmitDefaultValue", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "isNameSetExplicitly", $.Boolean);

    $.Field({Static:false, Public:false}, "order", $.Int32);

    $.Field({Static:false, Public:false}, "isRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "emitDefaultValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsNameSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Order", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "EmitDefaultValue", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Field", "Property")]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.EnumMemberAttribute */ 

(function EnumMemberAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.EnumMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsValueSetExplicitly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "isValueSetExplicitly", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsValueSetExplicitly", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Field]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Runtime.Serialization.IExtensibleDataObject */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IExtensibleDataObject", true, [], function ($) {
    $.Method({}, "get_ExtensionData", JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject")));
    $.Method({}, "set_ExtensionData", JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject")));
    $.Property({}, "ExtensionData");
  }, []);

/* class System.Runtime.Serialization.KnownTypeAttribute */ 

(function KnownTypeAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.KnownTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MethodName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "methodName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "MethodName", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Class", "Struct")]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.ExtensionDataObject */ 

(function ExtensionDataObject$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ExtensionDataObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]))
    );

    $.Field({Static:false, Public:false}, "members", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]));

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ExtensionDataMember */ 

(function ExtensionDataMember$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ExtensionDataMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "value", $asm08.TypeRef("System.Runtime.Serialization.IDataNode"));

    $.Field({Static:false, Public:false}, "memberIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Value", $asm08.TypeRef("System.Runtime.Serialization.IDataNode"));

    $.Property({Static:false, Public:true }, "MemberIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.IDataNode */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IDataNode", false, [], function ($) {
    $.Method({}, "get_DataType", JSIL.MethodSignature.Return($asm02.TypeRef("System.Type")));
    $.Method({}, "get_Value", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Value", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_DataContractName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_DataContractName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_DataContractNamespace", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_DataContractNamespace", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ClrTypeName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ClrTypeName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ClrAssemblyName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ClrAssemblyName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_Id", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Id", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_PreservesReferences", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "GetData", JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ElementData")));
    $.Method({}, "get_IsFinalValue", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_IsFinalValue", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "Clear", JSIL.MethodSignature.Void);
    $.Property({}, "DataType");
    $.Property({}, "Value");
    $.Property({}, "DataContractName");
    $.Property({}, "DataContractNamespace");
    $.Property({}, "ClrTypeName");
    $.Property({}, "ClrAssemblyName");
    $.Property({}, "Id");
    $.Property({}, "PreservesReferences");
    $.Property({}, "IsFinalValue");
  }, []);

/* class System.Runtime.Serialization.DataNode`1 */ 

(function DataNode$b1$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataNode`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddQualifiedNameAttribute", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.ElementData"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClrAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClrTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataContractName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataContractNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreservesReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ElementData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ClrAssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ClrTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DataContractName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DataContractNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDataNode.get_IsFinalValue", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), "get_IsFinalValue");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDataNode.set_IsFinalValue", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Overrides($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), "set_IsFinalValue");

    $.Field({Static:false, Public:false}, "dataType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "dataContractName", $.String);

    $.Field({Static:false, Public:false}, "dataContractNamespace", $.String);

    $.Field({Static:false, Public:false}, "clrTypeName", $.String);

    $.Field({Static:false, Public:false}, "clrAssemblyName", $.String);

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "isFinalValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DataType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDataNode.IsFinalValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DataContractName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DataContractNamespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClrTypeName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClrAssemblyName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PreservesReferences", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Runtime.Serialization.IDataNode")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataNode */ 

(function ClassDataNode$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm02.TypeRef("System.Object")]), 
      Name: "System.Runtime.Serialization.ClassDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]))
    );

    $.Field({Static:false, Public:false}, "members", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]));

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataNode */ 

(function CollectionDataNode$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm02.TypeRef("System.Array")]), 
      Name: "System.Runtime.Serialization.CollectionDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Items", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.IDataNode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ElementData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Items", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.IDataNode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "items", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.IDataNode")]));

    $.Field({Static:false, Public:false}, "itemName", $.String);

    $.Field({Static:false, Public:false}, "itemNamespace", $.String);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Property({Static:false, Public:false}, "Items", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.IDataNode")]));

    $.Property({Static:false, Public:false}, "ItemName", $.String);

    $.Property({Static:false, Public:false}, "ItemNamespace", $.String);

    $.Property({Static:false, Public:false}, "Size", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlDataNode */ 

(function XmlDataNode$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm02.TypeRef("System.Object")]), 
      Name: "System.Runtime.Serialization.XmlDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlAttributes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlChildNodes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OwnerDocument", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlAttributes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlChildNodes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlNode")]))
    );

    $.Field({Static:false, Public:false}, "xmlAttributes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlAttribute")]));

    $.Field({Static:false, Public:false}, "xmlChildNodes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "ownerDocument", $asm0A.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false}, "XmlAttributes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlAttribute")]));

    $.Property({Static:false, Public:false}, "XmlChildNodes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlNode")]));

    $.Property({Static:false, Public:false}, "OwnerDocument", $asm0A.TypeRef("System.Xml.XmlDocument"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ISerializableDataNode */ 

(function ISerializableDataNode$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm02.TypeRef("System.Object")]), 
      Name: "System.Runtime.Serialization.ISerializableDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryTypeNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ISerializableDataMember")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ElementData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FactoryTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FactoryTypeNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ISerializableDataMember")]))
    );

    $.Field({Static:false, Public:false}, "factoryTypeName", $.String);

    $.Field({Static:false, Public:false}, "factoryTypeNamespace", $.String);

    $.Field({Static:false, Public:false}, "members", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ISerializableDataMember")]));

    $.Property({Static:false, Public:false}, "FactoryTypeName", $.String);

    $.Property({Static:false, Public:false}, "FactoryTypeNamespace", $.String);

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm08.TypeRef("System.Runtime.Serialization.ISerializableDataMember")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ISerializableDataMember */ 

(function ISerializableDataMember$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ISerializableDataMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $asm08.TypeRef("System.Runtime.Serialization.IDataNode"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $asm08.TypeRef("System.Runtime.Serialization.IDataNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IgnoreDataMemberAttribute */ 

(function IgnoreDataMemberAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.IgnoreDataMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Field", "Property")]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.DataContractResolver */ 

(function DataContractResolver$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveName", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $.String, $.String, 
          $asm02.TypeRef("System.Type"), $.Type
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryResolveType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.Type, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.XmlObjectSerializer */ 

(function XmlObjectSerializer$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckIfNeedsContractNsAtRoot", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSerializationException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Runtime.Serialization.SerializationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSerializationException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Runtime.Serialization.SerializationException"), [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSerializationExceptionWithReaderDetails", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.String, $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FormatterConverter", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.IFormatterConverter"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDeserializeType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSerializeType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInfo", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInfoError", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsContractDeclared", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRootElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRootXmlAny", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsStartObjectHandleExceptions", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectHandleExceptions", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectHandleExceptions", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryAddLineInfo", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryWriter"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEndObjectHandleExceptions", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteNull", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectContentHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteStartObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.Field({Static:true , Public:false}, "formatterConverter", $asm02.TypeRef("System.Runtime.Serialization.IFormatterConverter"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:true , Public:false}, "FormatterConverter", $asm02.TypeRef("System.Runtime.Serialization.IFormatterConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.DataContractSerializer */ 

(function DataContractSerializer$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "System.Runtime.Serialization.DataContractSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $.String
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $.String, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $.String, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $.String, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializerSettings")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractResolver", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Type")]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveObjectReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_RootContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDeserializeType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSerializeType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SurrogateToDataContractType", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Object, 
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryWriter"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "rootType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "rootContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "needsContractNsAtRoot", $.Boolean);

    $.Field({Static:false, Public:false}, "rootName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "rootNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32);

    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean);

    $.Field({Static:false, Public:false}, "preserveObjectReferences", $.Boolean);

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Field({Static:false, Public:false}, "knownTypeCollection", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "knownTypeList", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "dataContractResolver", $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"));

    $.Field({Static:false, Public:false}, "serializeReadOnlyTypes", $.Boolean);

    $.Property({Static:false, Public:true }, "KnownTypes", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "PreserveObjectReferences", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DataContractResolver", $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"));

    $.Property({Static:false, Public:true }, "SerializeReadOnlyTypes", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "RootContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.DataContractSerializerSettings */ 

(function DataContractSerializerSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.System.Runtime.Serialization.DataContractResolver)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.System.Runtime.Serialization.IDataContractSurrogate)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Collections.Generic.IEnumerable$b1.Of($asm02.System.Type))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.System.Xml.XmlDictionaryString)) ();
  };



  function DataContractSerializerSettings_get_DataContractResolver () {
    return this.DataContractSerializerSettings$DataContractResolver$value;
  }; 

  function DataContractSerializerSettings_get_DataContractSurrogate () {
    return this.DataContractSerializerSettings$DataContractSurrogate$value;
  }; 

  function DataContractSerializerSettings_get_IgnoreExtensionDataObject () {
    return this.DataContractSerializerSettings$IgnoreExtensionDataObject$value;
  }; 

  function DataContractSerializerSettings_get_KnownTypes () {
    return this.DataContractSerializerSettings$KnownTypes$value;
  }; 


  function DataContractSerializerSettings_get_PreserveObjectReferences () {
    return this.DataContractSerializerSettings$PreserveObjectReferences$value;
  }; 

  function DataContractSerializerSettings_get_RootName () {
    return this.DataContractSerializerSettings$RootName$value;
  }; 

  function DataContractSerializerSettings_get_RootNamespace () {
    return this.DataContractSerializerSettings$RootNamespace$value;
  }; 

  function DataContractSerializerSettings_get_SerializeReadOnlyTypes () {
    return this.DataContractSerializerSettings$SerializeReadOnlyTypes$value;
  }; 

  function DataContractSerializerSettings_set_DataContractResolver (value) {
    this.DataContractSerializerSettings$DataContractResolver$value = value;
  }; 

  function DataContractSerializerSettings_set_DataContractSurrogate (value) {
    this.DataContractSerializerSettings$DataContractSurrogate$value = value;
  }; 

  function DataContractSerializerSettings_set_IgnoreExtensionDataObject (value) {
    this.DataContractSerializerSettings$IgnoreExtensionDataObject$value = value;
  }; 

  function DataContractSerializerSettings_set_KnownTypes (value) {
    this.DataContractSerializerSettings$KnownTypes$value = value;
  }; 


  function DataContractSerializerSettings_set_PreserveObjectReferences (value) {
    this.DataContractSerializerSettings$PreserveObjectReferences$value = value;
  }; 

  function DataContractSerializerSettings_set_RootName (value) {
    this.DataContractSerializerSettings$RootName$value = value;
  }; 

  function DataContractSerializerSettings_set_RootNamespace (value) {
    this.DataContractSerializerSettings$RootNamespace$value = value;
  }; 

  function DataContractSerializerSettings_set_SerializeReadOnlyTypes (value) {
    this.DataContractSerializerSettings$SerializeReadOnlyTypes$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractSerializerSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_DataContractResolver", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")), 
      DataContractSerializerSettings_get_DataContractResolver
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")), 
      DataContractSerializerSettings_get_DataContractSurrogate
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Return($.Boolean), 
      DataContractSerializerSettings_get_IgnoreExtensionDataObject
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KnownTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])), 
      DataContractSerializerSettings_get_KnownTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_PreserveObjectReferences", 
      JSIL.MethodSignature.Return($.Boolean), 
      DataContractSerializerSettings_get_PreserveObjectReferences
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_RootName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString")), 
      DataContractSerializerSettings_get_RootName
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_RootNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString")), 
      DataContractSerializerSettings_get_RootNamespace
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      DataContractSerializerSettings_get_SerializeReadOnlyTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_DataContractResolver", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")), 
      DataContractSerializerSettings_set_DataContractResolver
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_DataContractSurrogate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")), 
      DataContractSerializerSettings_set_DataContractSurrogate
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Action($.Boolean), 
      DataContractSerializerSettings_set_IgnoreExtensionDataObject
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KnownTypes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])), 
      DataContractSerializerSettings_set_KnownTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_PreserveObjectReferences", 
      JSIL.MethodSignature.Action($.Boolean), 
      DataContractSerializerSettings_set_PreserveObjectReferences
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_RootName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString")), 
      DataContractSerializerSettings_set_RootName
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_RootNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString")), 
      DataContractSerializerSettings_set_RootNamespace
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($.Boolean), 
      DataContractSerializerSettings_set_SerializeReadOnlyTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32);

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$RootName$value", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$RootNamespace$value", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$KnownTypes$value", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$IgnoreExtensionDataObject$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$PreserveObjectReferences$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$DataContractSurrogate$value", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$DataContractResolver$value", $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractSerializerSettings$SerializeReadOnlyTypes$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "RootName", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RootNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "KnownTypes", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:true }, "PreserveObjectReferences", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "DataContractResolver", $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "SerializeReadOnlyTypes", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Runtime.Serialization.IDataContractSurrogate */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IDataContractSurrogate", true, [], function ($) {
    $.Method({}, "GetDataContractType", new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")]));
    $.Method({}, "GetObjectToSerialize", new JSIL.MethodSignature($.Object, [$.Object, $asm02.TypeRef("System.Type")]));
    $.Method({}, "GetDeserializedObject", new JSIL.MethodSignature($.Object, [$.Object, $asm02.TypeRef("System.Type")]));
    $.Method({}, "GetCustomDataToExport", new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Type")]));
    $.Method({}, "GetCustomDataToExport", new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")]));
    $.Method({}, "GetKnownCustomDataTypes", JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("System.Type")])));
    $.Method({}, "GetReferencedTypeOnImport", new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $.String, $.String, 
          $.Object
        ]));
    $.Method({}, "ProcessImportedType", new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm03.TypeRef("System.CodeDom.CodeCompileUnit")]));
  }, []);

/* class System.Runtime.Serialization.DataContractSurrogateCaller */ 

(function DataContractSurrogateCaller$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.Runtime.Serialization.DataContractSurrogateCaller", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetCustomDataToExport", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm02.TypeRef("System.Reflection.MemberInfo"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomDataToExport", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDeserializedObject", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Object, 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKnownCustomDataTypes", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm02.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetObjectToSerialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Object, 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReferencedTypeOnImport", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.String, 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessImportedType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), 
          $asm03.TypeRef("System.CodeDom.CodeCompileUnit")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.InvalidDataContractException */ 

(function InvalidDataContractException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Exception"), 
      Name: "System.Runtime.Serialization.InvalidDataContractException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.NetDataContractSerializer */ 

(function NetDataContractSerializer$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "System.Runtime.Serialization.NetDataContractSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.Serialization.StreamingContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyFormat", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Binder", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.StreamingContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SurrogateSelector", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnsafeTypeForwardingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Hashtable")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Hashtable")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Hashtable")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractFromSurrogateSelector", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Hashtable")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSurrogate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"), 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInformation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.TypeInformation"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblyNameForwardingSafe", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPublicKeyTokenForwardingSafe", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyFormat", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Binder", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Context", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.Serialization.StreamingContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SurrogateSelector", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"), $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    );

    $.Field({Static:false, Public:false}, "rootName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "rootNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "context", $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Field({Static:false, Public:false}, "binder", $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Field({Static:false, Public:false}, "surrogateSelector", $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32);

    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean);

    $.Field({Static:false, Public:false}, "assemblyFormat", $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"));

    $.Field({Static:false, Public:false}, "cachedDataContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:true , Public:false}, "typeNameCache", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "unsafeTypeForwardingEnabled", $asm02.TypeRef("System.Nullable`1", [$.Boolean]));


    function NetDataContractSerializer__cctor () {
      $thisType.unsafeTypeForwardingEnabled = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NetDataContractSerializer__cctor
    );

    $.Property({Static:true , Public:false}, "UnsafeTypeForwardingEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Context", $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "Binder", $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Property({Static:false, Public:true , Virtual:true }, "SurrogateSelector", $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.Property({Static:false, Public:true }, "AssemblyFormat", $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32);

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Runtime.Serialization.IFormatter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XPathQueryGenerator */ 

(function XPathQueryGenerator$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Runtime.Serialization.XPathQueryGenerator", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateFromDataContractSerializer", 
      new JSIL.MethodSignature($.String, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.XmlNamespaceManager")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromDataContractSerializer", 
      new JSIL.MethodSignature($.String, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.MemberInfo")]), 
          $asm02.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.XmlNamespaceManager")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataMembers", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm08.System.Runtime.Serialization.XPathQueryGenerator_$lGetDataMembers$gd__6.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "ProcessClassDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm08.TypeRef("System.Runtime.Serialization.XPathQueryGenerator+ExportContext"), 
          $asm02.TypeRef("System.Reflection.MemberInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XPathQueryGenerator+ExportContext"), 
          $asm02.TypeRef("System.Reflection.MemberInfo")
        ])
    );

    $.Constant({Static:true , Public:false}, "XPathSeparator", $.String, "/");

    $.Constant({Static:true , Public:false}, "NsSeparator", $.String, ":");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XPathQueryGenerator+ExportContext */ 

(function ExportContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XPathQueryGenerator+ExportContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteChildToContext", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.DataMember"), $.String])
    );

    $.Field({Static:false, Public:false}, "namespaces", $asm0A.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "nextPrefix", $.Int32);

    $.Field({Static:false, Public:false}, "xPathBuilder", $asm02.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:true }, "Namespaces", $asm0A.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true }, "XPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XPathQueryGenerator+<GetDataMembers>d__6 */ 

(function $lGetDataMembers$gd__6$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XPathQueryGenerator+<GetDataMembers>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Runtime.Serialization.DataMember$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Runtime.Serialization.DataMember$g.get_Current", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataMember"))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm08.TypeRef("System.Runtime.Serialization.DataMember"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "contract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    $.Field({Static:false, Public:true }, "$l$g3__contract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm02.TypeRef("System.Collections.Generic.List`1+Enumerator", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Runtime.Serialization.DataMember$g.Current", $asm08.TypeRef("System.Runtime.Serialization.DataMember"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.Serialization.XsdDataContractExporter */ 

(function XsdDataContractExporter$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XsdDataContractExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKnownTypes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddType", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CanExport", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Reflection.Assembly")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanExport", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanExport", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAndAddType", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Reflection.Assembly")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Export", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataContractSet", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContractSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ExportOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRootElementName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaSet", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemaType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemaTypeName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ExportOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceExportBegin", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceExportEnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceExportError", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Exception"))
    );

    $.Field({Static:false, Public:false}, "options", $asm08.TypeRef("System.Runtime.Serialization.ExportOptions"));

    $.Field({Static:false, Public:false}, "schemas", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "dataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Property({Static:false, Public:true }, "Options", $asm08.TypeRef("System.Runtime.Serialization.ExportOptions"));

    $.Property({Static:false, Public:true }, "Schemas", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "DataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XsdDataContractImporter */ 

(function XsdDataContractImporter$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XsdDataContractImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeCompileUnit", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataContractSet", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContractSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportXmlDataType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ImportOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SingleElementArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SingleTypeNameArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeCompileUnit", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKnownTypeReferences", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm03.TypeRef("System.CodeDom.CodeTypeReference")]), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalCanImport", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalImport", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ImportOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceImportError", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Exception"))
    );

    $.Field({Static:false, Public:false}, "options", $asm08.TypeRef("System.Runtime.Serialization.ImportOptions"));

    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm03.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Field({Static:false, Public:false}, "dataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "emptyTypeNameArray", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), function ($pi) {
        return JSIL.Array.New($asm0A.System.Xml.XmlQualifiedName, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "emptyElementArray", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]), function ($pi) {
        return JSIL.Array.New($asm0A.System.Xml.Schema.XmlSchemaElement, 0);
      });

    $.Field({Static:false, Public:false}, "singleTypeNameArray", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:false, Public:false}, "singleElementArray", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]));

    $.Property({Static:false, Public:true }, "Options", $asm08.TypeRef("System.Runtime.Serialization.ImportOptions"));

    $.Property({Static:false, Public:true }, "CodeCompileUnit", $asm03.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Property({Static:false, Public:false}, "DataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Property({Static:false, Public:false}, "SingleTypeNameArray", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Property({Static:false, Public:false}, "SingleElementArray", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]));

    $.Property({Static:false, Public:false}, "ImportXmlDataType", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContract */ 

(function DataContract$Members () {
  var $, $thisType;
























































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Type]), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Type, $.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAndAdd", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type])])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckExplicitDataContractNamespaceUri", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckRootTypeInConfigIsGeneric", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConstructorRequiresMemberAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateQualifiedName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeLocalName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandGenericParameters", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandGenericParameters", 
      new JSIL.MethodSignature($.String, [$.String, $asm08.TypeRef("System.Runtime.Serialization.IGenericNameProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldRequiresMemberAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConfigSection", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GenericInfo", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.GenericInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Helper", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalUnderlyingType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ParseMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_StableName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TypeForInitialization", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetArrayPrefix", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayTypeName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetClrAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrNameAndNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullName", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullNameForArray", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullNameForNonArrayTypes", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullNameUsingTypeForwardedFromAttribute", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeString", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContractAttribute")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Object]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContractAttribute")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Runtime.Serialization.SerializationMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm08.TypeRef("System.Runtime.Serialization.SerializationMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractForInitialization", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractNameForGenericName", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [$.String, $asm02.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractNamespaceFromUri", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDCTypeStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContractAttribute")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultDataContractNamespace", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableLocalName", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableName", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.CodeDom.CodeTypeReference"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableNamespace", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetOnlyCollectionDataContract", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.SerializationMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetOnlyCollectionDataContractSkipValidation", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetGlobalDataContractNamespace", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.Reflection.ICustomAttributeProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.RuntimeTypeHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetIdForInitialization", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNamespacesDigest", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonDCTypeStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Runtime.Serialization.SerializationMode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypeAttributes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type]), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypeAttributes", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAlpha", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAsciiLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblyFriendOfSerialization", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBuiltInNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionElementTypeEqualToRootType", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsElemTypeNullOrNotEqualToRootType", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEqualOrChecked", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMemberVisibleInSerializationModule", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOpenGenericType", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeAndDeclaringTypeVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeNullable", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeSerializable", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeSerializable", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeVisibleInSerializationModule", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidContract", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.SerializationMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidNCName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadKnownTypesFromConfig", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type])])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MethodRequiresMemberAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_GenericInfo", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.GenericInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsValueType", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_StableName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidDataContractException", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidDataContractException", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTypeNotSerializable", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetBuiltInXmlAndArrayTypeStableName", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetDCAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContractAttribute")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnwrapNullableType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnwrapRedundantNullableType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidatePreviousCollectionTypes", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:false}, "$name", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "ns", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "configSection", $asm08.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "Helper", $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"));

    $.Property({Static:false, Public:false}, "UnderlyingType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "OriginalUnderlyingType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeForInitialization", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "StableName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericInfo", $asm08.TypeRef("System.Runtime.Serialization.GenericInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Type]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "Name", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    $.Property({Static:false, Public:false}, "ParseMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ConfigSection", $asm08.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContract+DataContractCriticalHelper */ 

(function DataContractCriticalHelper$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContract+DataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AssignDataContractToId", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContractMatches", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateGetOnlyCollectionDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericInfo", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.GenericInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalUnderlyingType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParseMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StableName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeForInitialization", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeString", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractAdapterType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractAdapterTypeHandle", 
      new JSIL.MethodSignature($asm02.TypeRef("System.RuntimeTypeHandle"), [$asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractForInitialization", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractOriginalType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetOnlyCollectionDataContractSkipValidation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIdForInitialization", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextId", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IntRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_GenericInfo", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.GenericInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsValueType", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StableName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataContractName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataContractName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTypeForInitialization", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidDataContractException", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidDataContractException", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.Field({Static:true , Public:false}, "typeToIDCache", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef"), $asm08.TypeRef("System.Runtime.Serialization.IntRef")]));

    $.Field({Static:true , Public:false}, "dataContractCache", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), function ($pi) {
        return JSIL.Array.New($asm08.System.Runtime.Serialization.DataContract, 32);
      });

    $.Field({Static:true , Public:false}, "dataContractID", $.Int32, 0);

    $.Field({Static:true , Public:false}, "typeToBuiltInContract", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:true , Public:false}, "nameToBuiltInContract", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:true , Public:false}, "typeNameToBuiltInContract", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:true , Public:false}, "namespaces", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false}, "clrTypeStrings", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:true , Public:false}, "clrTypeStringsDictionary", $asm08.TypeRef("System.Xml.XmlDictionary"));

    $.Field({Static:true , Public:false}, "typeHandleRef", $asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef"));

    $.Field({Static:true , Public:false}, "cacheLock", $.Object);

    $.Field({Static:true , Public:false}, "createDataContractLock", $.Object);

    $.Field({Static:true , Public:false}, "initBuiltInContractsLock", $.Object);

    $.Field({Static:true , Public:false}, "namespacesLock", $.Object);

    $.Field({Static:true , Public:false}, "clrTypeStringsLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "underlyingType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "originalUnderlyingType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "isReference", $.Boolean);

    $.Field({Static:false, Public:false}, "isValueType", $.Boolean);

    $.Field({Static:false, Public:false}, "stableName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "genericInfo", $asm08.TypeRef("System.Runtime.Serialization.GenericInfo"));

    $.Field({Static:false, Public:false}, "$name", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "ns", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "typeForInitialization", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "parseMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "parseMethodSet", $.Boolean);

    $.Property({Static:false, Public:false}, "UnderlyingType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "OriginalUnderlyingType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeForInitialization", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "StableName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericInfo", $asm08.TypeRef("System.Runtime.Serialization.GenericInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "Name", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Namespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    $.Property({Static:false, Public:false}, "ParseMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.ClassDataContract */ 

(function ClassDataContract$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.ClassDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckAndAddMember", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]), $asm08.TypeRef("System.Runtime.Serialization.DataMember"), 
          $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm08.TypeRef("System.Runtime.Serialization.DataMember")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateChildElementNamespaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateClassDataContractForKeyValue", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureMethodsImported", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContract", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DeserializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataSetMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasExtensionData", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsNonAttributedType", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnlyContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserialized", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserializing", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerialized", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerializing", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetChildNamespaceToDeclare", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Xml.XmlDictionary")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetISerializableConstructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNonAttributedTypeConstructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitClassDataContract", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsEveryDataMemberOptional", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNonAttributedTypeValidForSerialization", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForRead", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Security.SecurityException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Security.SecurityException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContract", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:true }, "ContractNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:true }, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:true }, "MemberNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "childElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "BaseContract", $.Type);

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:true }, "ChildElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false}, "OnSerializing", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnSerialized", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserializing", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserialized", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "ExtensionDataSetMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNonAttributedType", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "HasExtensionData", $.Boolean);

    $.Property({Static:false, Public:false}, "SerializationExceptionMessage", $.String);

    $.Property({Static:false, Public:false}, "DeserializationExceptionMessage", $.String);

    $.Property({Static:false, Public:false}, "IsReadOnlyContract", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper */ 

(function ClassDataContractCriticalHelper$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureIsReferenceImported", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureMethodsImported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeserializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataSetMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasExtensionData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNonAttributedType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserialized", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserializing", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerialized", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerializing", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SerInfoCtorArgs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetISerializableConstructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNonAttributedTypeConstructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableNameAndSetHasDataContract", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportDataMembers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMethodOverriding", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidCallback", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")]), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidExtensionDataSetMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChildElementNamespaces", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatReaderDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatWriterDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIfGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataMember"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIfMembersHaveConflict", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIsNonAttributedType", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "baseContract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    $.Field({Static:false, Public:false}, "members", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Field({Static:false, Public:false}, "onSerializing", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "onSerialized", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "onDeserializing", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "onDeserialized", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "extensionDataSetMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "serializationExceptionMessage", $.String);

    $.Field({Static:false, Public:false}, "isISerializable", $.Boolean);

    $.Field({Static:false, Public:false}, "isKnownTypeAttributeChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "isMethodChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "hasExtensionData", $.Boolean);

    $.Field({Static:false, Public:false}, "isNonAttributedType", $.Boolean);

    $.Field({Static:false, Public:false}, "hasDataContract", $.Boolean);

    $.Field({Static:false, Public:false}, "childElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "xmlFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"));

    $.Field({Static:false, Public:false}, "xmlFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"));

    $.Field({Static:false, Public:true }, "ContractNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:true }, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:true }, "MemberNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:true , Public:false}, "serInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "BaseContract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false}, "OnSerializing", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnSerialized", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserializing", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserialized", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "ExtensionDataSetMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "SerializationExceptionMessage", $.String);

    $.Property({Static:false, Public:false}, "DeserializationExceptionMessage", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "HasExtensionData", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNonAttributedType", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"));

    $.Property({Static:false, Public:true }, "ChildElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:true , Public:false}, "SerInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* struct System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+Member */ 

(function Member$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+Member", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataMember"), $.String, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "member", $asm08.TypeRef("System.Runtime.Serialization.DataMember"));

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "baseTypeIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+DataMemberConflictComparer */ 

(function DataMemberConflictComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+DataMemberConflictComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+Member"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+Member")])
    );

    $.Field({Static:true , Public:false}, "Singleton", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract+ClassDataContractCriticalHelper+Member")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataContract+DataMemberComparer */ 

(function DataMemberComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ClassDataContract+DataMemberComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.DataMember"), $asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.Field({Static:true , Public:false}, "Singleton", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.KeyValue`2 */ 

(function KeyValue$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.KeyValue`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($.GenericParameter("K"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("V"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Key", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("V")])
    );

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("K"));

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("V"));

    $.Property({Static:false, Public:true }, "Key", $.GenericParameter("K"))
      .Attribute($asm08.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("V"))
      .Attribute($asm08.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* enum System.Runtime.Serialization.CollectionKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.CollectionKind", 
    BaseType: $asm02.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    GenericDictionary: 1, 
    Dictionary: 2, 
    GenericList: 3, 
    GenericCollection: 4, 
    List: 5, 
    GenericEnumerable: 6, 
    Collection: 7, 
    Enumerable: 8, 
    Array: 9, 
  }
);

/* class System.Runtime.Serialization.CollectionDataContract */ 

(function CollectionDataContract$Members () {
  var $, $thisType;








































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.CollectionDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionKind"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.String, $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.ConstructorInfo")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.ConstructorInfo"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConstructor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCollectionMethodsOnInterface", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Constructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DeserializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidCollectionInSharedContractMessage", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsConstructorCheckRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsDictionary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsItemTypeNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnlyContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ItemName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ItemNameSetExplicit", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_KeyName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CollectionKind"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_KnownInterfaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SharedTypeContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ValueName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatGetOnlyCollectionReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionMethods", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInvalidCollectionMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReadOnlyCollectionExceptionMessages", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.Boolean, 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSharedTypeContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTargetMethodWithName", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm08.TypeRef("System.Runtime.Serialization.SerializationMode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleIfInvalidCollection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitCollectionDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitSharedTypeContract", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArraySegment", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionDataContract", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionHelper", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionOrTryCreate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKnownInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidContract", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.SerializationMode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForRead", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Security.SecurityException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Security.SecurityException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConstructorCheckRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsItemTypeNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ItemContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_ItemName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_KeyName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_ValueName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInvalid", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCreate", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCreateGetOnlyCollectionDataContract", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:false}, "collectionItemName", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "childElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "itemContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract+CollectionDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:true , Public:false}, "KnownInterfaces", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "Kind", $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"));

    $.Property({Static:false, Public:false}, "ItemType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ItemContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "SharedTypeContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "ItemName", $.String);

    $.Property({Static:false, Public:true }, "CollectionItemName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "KeyName", $.String);

    $.Property({Static:false, Public:false}, "ValueName", $.String);

    $.Property({Static:false, Public:false}, "IsDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "ChildElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsItemTypeNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsConstructorCheckRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "GetEnumeratorMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "AddMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "Constructor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "InvalidCollectionInSharedContractMessage", $.String);

    $.Property({Static:false, Public:false}, "SerializationExceptionMessage", $.String);

    $.Property({Static:false, Public:false}, "DeserializationExceptionMessage", $.String);

    $.Property({Static:false, Public:false}, "IsReadOnlyContract", $.Boolean);

    $.Property({Static:false, Public:false}, "ItemNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatGetOnlyCollectionReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataContract+CollectionDataContractCriticalHelper */ 

(function CollectionDataContractCriticalHelper$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.CollectionDataContract+CollectionDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.ConstructorInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.ConstructorInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Constructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeserializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidCollectionInSharedContractMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConstructorCheckRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDictionary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsItemTypeNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemNameSetExplicit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CollectionKind"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_KnownInterfaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializationExceptionMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SharedTypeContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatGetOnlyCollectionReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContractAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChildElementNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConstructorCheckRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsItemTypeNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_KeyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SharedTypeContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValueName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatGetOnlyCollectionReaderDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatReaderDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatWriterDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"))
    );

    $.Field({Static:true , Public:false}, "_knownInterfaces", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "itemType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "isItemTypeNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "kind", $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "getEnumeratorMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "addMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "$constructor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializationExceptionMessage", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "deserializationExceptionMessage", $.String);

    $.Field({Static:false, Public:false}, "itemContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "sharedTypeContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "isKnownTypeAttributeChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "itemName", $.String);

    $.Field({Static:false, Public:false}, "itemNameSetExplicit", $.Boolean);

    $.Field({Static:false, Public:false}, "collectionItemName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "keyName", $.String);

    $.Field({Static:false, Public:false}, "valueName", $.String);

    $.Field({Static:false, Public:false}, "childElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "invalidCollectionInSharedContractMessage", $.String);

    $.Field({Static:false, Public:false}, "xmlFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"));

    $.Field({Static:false, Public:false}, "xmlFormatGetOnlyCollectionReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"));

    $.Field({Static:false, Public:false}, "xmlFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"));

    $.Field({Static:false, Public:false}, "isConstructorCheckRequired", $.Boolean);

    $.Property({Static:true , Public:false}, "KnownInterfaces", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "Kind", $asm08.TypeRef("System.Runtime.Serialization.CollectionKind"));

    $.Property({Static:false, Public:false}, "ItemType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ItemContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "SharedTypeContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "ItemName", $.String);

    $.Property({Static:false, Public:false}, "IsConstructorCheckRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "CollectionItemName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "KeyName", $.String);

    $.Property({Static:false, Public:false}, "ValueName", $.String);

    $.Property({Static:false, Public:false}, "IsDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "SerializationExceptionMessage", $.String);

    $.Property({Static:false, Public:true }, "DeserializationExceptionMessage", $.String);

    $.Property({Static:false, Public:true }, "ChildElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsItemTypeNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "GetEnumeratorMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "AddMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "Constructor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "InvalidCollectionInSharedContractMessage", $.String);

    $.Property({Static:false, Public:false}, "ItemNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatGetOnlyCollectionReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.CollectionDataContract+DictionaryEnumerator */ 

(function DictionaryEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CollectionDataContract+DictionaryEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.IDictionaryEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.Object, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "enumerator", $asm02.TypeRef("System.Collections.IDictionaryEnumerator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm08.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.Object, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm08.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.Object, $.Object])]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataContract+GenericDictionaryEnumerator`2 */ 

(function GenericDictionaryEnumerator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CollectionDataContract+GenericDictionaryEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "enumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm08.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm08.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.IGenericNameProvider */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IGenericNameProvider", false, [], function ($) {
    $.Method({}, "GetParameterCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetNestedParameterCounts", JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Int32])));
    $.Method({}, "GetParameterName", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "GetNamespaces", JSIL.MethodSignature.Return($.String));
    $.Method({}, "GetGenericTypeName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_ParametersFromBuiltInNamespaces", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "ParametersFromBuiltInNamespaces");
  }, []);

/* class System.Runtime.Serialization.GenericNameProvider */ 

(function GenericNameProvider$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.GenericNameProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParametersFromBuiltInNamespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGenericTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespaces", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNestedParameterCounts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "genericTypeName", $.String);

    $.Field({Static:false, Public:false}, "genericParams", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "nestedParamCounts", $asm02.TypeRef("System.Collections.Generic.IList`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ParametersFromBuiltInNamespaces", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Runtime.Serialization.IGenericNameProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GenericInfo */ 

(function GenericInfo$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.GenericInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToLevel", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParametersFromBuiltInNamespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StableName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandedStableName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGenericTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespaces", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNestedParameterCounts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "genericTypeName", $.String);

    $.Field({Static:false, Public:false}, "stableName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "paramGenericInfos", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "nestedParamCounts", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Property({Static:false, Public:false}, "StableName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Parameters", $asm02.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:true , Virtual:true }, "ParametersFromBuiltInNamespaces", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("System.Runtime.Serialization.IGenericNameProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContractPairKey */ 

(function DataContractPairKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractPairKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "object1", $.Object);

    $.Field({Static:false, Public:false}, "object2", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TypeHandleRefEqualityComparer */ 

(function TypeHandleRefEqualityComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.TypeHandleRefEqualityComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef"), $asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TypeHandleRef */ 

(function TypeHandleRef$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.TypeHandleRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.RuntimeTypeHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.RuntimeTypeHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.RuntimeTypeHandle"))
    );

    $.Field({Static:false, Public:false}, "value", $asm02.TypeRef("System.RuntimeTypeHandle"));

    $.Property({Static:false, Public:true }, "Value", $asm02.TypeRef("System.RuntimeTypeHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IntRef */ 

(function IntRef$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.IntRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataMember */ 

(function DataMember$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MemberInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BindGenericParameters", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConflictingMember", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDefaultValue", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasConflictingNameAndType", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsGetOnlyCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberInfo", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberTypeContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Order", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForGet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConflictingMember", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_EmitDefaultValue", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_HasConflictingNameAndType", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsGetOnlyCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_MemberTypeContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Order", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.DataMember+CriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "MemberInfo", $asm02.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Order", $.Int32);

    $.Property({Static:false, Public:false}, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "EmitDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "MemberType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "MemberTypeContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "HasConflictingNameAndType", $.Boolean);

    $.Property({Static:false, Public:false}, "ConflictingMember", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataMember+CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataMember+CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConflictingMember", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataMember"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDefaultValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasConflictingNameAndType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGetOnlyCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberInfo", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberTypeContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Order", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConflictingMember", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataMember"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EmitDefaultValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasConflictingNameAndType", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsGetOnlyCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberTypeContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Order", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "memberTypeContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "order", $.Int32);

    $.Field({Static:false, Public:false}, "isRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "emitDefaultValue", $.Boolean);

    $.Field({Static:false, Public:false}, "isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "isGetOnlyCollection", $.Boolean);

    $.Field({Static:false, Public:false}, "memberInfo", $asm02.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "hasConflictingNameAndType", $.Boolean);

    $.Field({Static:false, Public:false}, "conflictingMember", $asm08.TypeRef("System.Runtime.Serialization.DataMember"));

    $.Property({Static:false, Public:false}, "MemberInfo", $asm02.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Order", $.Int32);

    $.Property({Static:false, Public:false}, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "EmitDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "MemberType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "MemberTypeContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "HasConflictingNameAndType", $.Boolean);

    $.Property({Static:false, Public:false}, "ConflictingMember", $asm08.TypeRef("System.Runtime.Serialization.DataMember"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.DateTimeFormat */ 

(function DateTimeFormat$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DateTimeFormat", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DateTimeStyles", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.DateTimeStyles"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FormatProvider", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IFormatProvider"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FormatString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_DateTimeStyles", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Globalization.DateTimeStyles"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "formatString", $.String);

    $.Field({Static:false, Public:false}, "formatProvider", $asm02.TypeRef("System.IFormatProvider"));

    $.Field({Static:false, Public:false}, "dateTimeStyles", $asm02.TypeRef("System.Globalization.DateTimeStyles"));

    $.Property({Static:false, Public:true }, "FormatString", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "FormatProvider", $asm02.TypeRef("System.IFormatProvider"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DateTimeStyles", $asm02.TypeRef("System.Globalization.DateTimeStyles"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum System.Runtime.Serialization.EmitTypeInformation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.EmitTypeInformation", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AsNeeded: 0, 
    Always: 1, 
    Never: 2, 
  }
);

/* class System.Runtime.Serialization.EnumDataContract */ 

(function EnumDataContract$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.EnumDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContractName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildElementNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsULong", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetBaseContractName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetBaseType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetEnumValueFromString", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringFromEnumValue", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEnumValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEnumValue", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContractName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Values", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.EnumDataContract+EnumDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "BaseContractName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false}, "Values", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]));

    $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "IsULong", $.Boolean);

    $.Property({Static:false, Public:false}, "ChildElementNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.EnumDataContract+EnumDataContractCriticalHelper */ 

(function EnumDataContractCriticalHelper$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.EnumDataContract+EnumDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContractName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildElementNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsULong", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBaseContractName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBaseType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportBaseType", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDataMembers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContractName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Values", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]))
    );

    $.Field({Static:true , Public:false}, "typeToName", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:true , Public:false}, "nameToType", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "baseContractName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "members", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Field({Static:false, Public:false}, "values", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "isULong", $.Boolean);

    $.Field({Static:false, Public:false}, "isFlags", $.Boolean);

    $.Field({Static:false, Public:false}, "hasDataContract", $.Boolean);

    $.Field({Static:false, Public:false}, "childElementNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false}, "BaseContractName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Members", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false}, "Values", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Int64]));

    $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "IsULong", $.Boolean);

    $.Property({Static:false, Public:false}, "ChildElementNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.GenericParameterDataContract */ 

(function GenericParameterDataContract$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.GenericParameterDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterPosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.GenericParameterDataContract+GenericParameterDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "ParameterPosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GenericParameterDataContract+GenericParameterDataContractCriticalHelper */ 

(function GenericParameterDataContractCriticalHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.GenericParameterDataContract+GenericParameterDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "parameterPosition", $.Int32);

    $.Property({Static:false, Public:false}, "ParameterPosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.PrimitiveDataContract */ 

(function PrimitiveDataContract$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.PrimitiveDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatContentWriterMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveDataContract", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveDataContract", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleReadValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadNullAtTopLevel", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract+PrimitiveDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatContentWriterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.PrimitiveDataContract+PrimitiveDataContractCriticalHelper */ 

(function PrimitiveDataContractCriticalHelper$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.PrimitiveDataContract+PrimitiveDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatContentWriterMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatContentWriterMethod", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatReaderMethod", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatWriterMethod", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Field({Static:false, Public:false}, "xmlFormatWriterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "xmlFormatContentWriterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "xmlFormatReaderMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatWriterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatContentWriterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.CharDataContract */ 

(function CharDataContract$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.CharDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.AsmxCharDataContract */ 

(function AsmxCharDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.CharDataContract"), 
      Name: "System.Runtime.Serialization.AsmxCharDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.BooleanDataContract */ 

(function BooleanDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.BooleanDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SignedByteDataContract */ 

(function SignedByteDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.SignedByteDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedByteDataContract */ 

(function UnsignedByteDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedByteDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ShortDataContract */ 

(function ShortDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.ShortDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedShortDataContract */ 

(function UnsignedShortDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedShortDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IntDataContract */ 

(function IntDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.IntDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedIntDataContract */ 

(function UnsignedIntDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedIntDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.LongDataContract */ 

(function LongDataContract$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.LongDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IntegerDataContract */ 

(function IntegerDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.IntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.PositiveIntegerDataContract */ 

(function PositiveIntegerDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.PositiveIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NegativeIntegerDataContract */ 

(function NegativeIntegerDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.NegativeIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NonPositiveIntegerDataContract */ 

(function NonPositiveIntegerDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.NonPositiveIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NonNegativeIntegerDataContract */ 

(function NonNegativeIntegerDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.NonNegativeIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedLongDataContract */ 

(function UnsignedLongDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedLongDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.FloatDataContract */ 

(function FloatDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.FloatDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DoubleDataContract */ 

(function DoubleDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.DoubleDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DecimalDataContract */ 

(function DecimalDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.DecimalDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DateTimeDataContract */ 

(function DateTimeDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.DateTimeDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.StringDataContract */ 

(function StringDataContract$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.StringDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TimeDataContract */ 

(function TimeDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.TimeDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DateDataContract */ 

(function DateDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.DateDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.HexBinaryDataContract */ 

(function HexBinaryDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.HexBinaryDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GYearMonthDataContract */ 

(function GYearMonthDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GYearMonthDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GYearDataContract */ 

(function GYearDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GYearDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GMonthDayDataContract */ 

(function GMonthDayDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GMonthDayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GDayDataContract */ 

(function GDayDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GDayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GMonthDataContract */ 

(function GMonthDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GMonthDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NormalizedStringDataContract */ 

(function NormalizedStringDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NormalizedStringDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TokenDataContract */ 

(function TokenDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.TokenDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.LanguageDataContract */ 

(function LanguageDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.LanguageDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NameDataContract */ 

(function NameDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NCNameDataContract */ 

(function NCNameDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NCNameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IDDataContract */ 

(function IDDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.IDDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IDREFDataContract */ 

(function IDREFDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.IDREFDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IDREFSDataContract */ 

(function IDREFSDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.IDREFSDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ENTITYDataContract */ 

(function ENTITYDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.ENTITYDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ENTITIESDataContract */ 

(function ENTITIESDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.ENTITIESDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NMTOKENDataContract */ 

(function NMTOKENDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NMTOKENDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NMTOKENSDataContract */ 

(function NMTOKENSDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NMTOKENSDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ByteArrayDataContract */ 

(function ByteArrayDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.ByteArrayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ObjectDataContract */ 

(function ObjectDataContract$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.ObjectDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TimeSpanDataContract */ 

(function TimeSpanDataContract$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.TimeSpanDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XsDurationDataContract */ 

(function XsDurationDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.TimeSpanDataContract"), 
      Name: "System.Runtime.Serialization.XsDurationDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GuidDataContract */ 

(function GuidDataContract$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.GuidDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.AsmxGuidDataContract */ 

(function AsmxGuidDataContract$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.GuidDataContract"), 
      Name: "System.Runtime.Serialization.AsmxGuidDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UriDataContract */ 

(function UriDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UriDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.QNameDataContract */ 

(function QNameDataContract$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.QNameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SpecialTypeDataContract */ 

(function SpecialTypeDataContract$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.SpecialTypeDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.SpecialTypeDataContract+SpecialTypeDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SpecialTypeDataContract+SpecialTypeDataContractCriticalHelper */ 

(function SpecialTypeDataContractCriticalHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.SpecialTypeDataContract+SpecialTypeDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* delegate System.Runtime.Serialization.CreateXmlSerializableDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.CreateXmlSerializableDelegate", false, [], 
  JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Serialization.IXmlSerializable")));

/* class System.Runtime.Serialization.XmlDataContract */ 

(function XmlDataContract$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.XmlDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCreateXmlSerializableDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreateXmlSerializableDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymous", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelElementNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsTypeDefinedOnImport", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetConstructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForCreate", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Security.SecurityException")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelElementNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsTypeDefinedOnImport", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_XsdType", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetTopLevelElementName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.XmlDataContract+XmlDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "XsdType", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "IsAnonymous", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsTopLevelElementNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTypeDefinedOnImport", $.Boolean);

    $.Property({Static:false, Public:false}, "CreateXmlSerializableDelegate", $asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlDataContract+XmlDataContractCriticalHelper */ 

(function XmlDataContractCriticalHelper$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.XmlDataContract+XmlDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreateXmlSerializableDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymous", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelElementNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTypeDefinedOnImport", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CreateXmlSerializableDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelElementNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsTypeDefinedOnImport", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XsdType", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "isKnownTypeAttributeChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "topLevelElementName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "topLevelElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "isTopLevelElementNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "isTypeDefinedOnImport", $.Boolean);

    $.Field({Static:false, Public:false}, "xsdType", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "hasRoot", $.Boolean);

    $.Field({Static:false, Public:false}, "createXmlSerializable", $asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "XsdType", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "IsAnonymous", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsTopLevelElementNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTypeDefinedOnImport", $.Boolean);

    $.Property({Static:false, Public:false}, "CreateXmlSerializableDelegate", $asm08.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Attributes */ 

(function Attributes$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Attributes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArraySize", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFactoryType", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadId", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRef", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXsiNil", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXsiType", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "serializationLocalNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "schemaInstanceLocalNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "Id", $.String);

    $.Field({Static:false, Public:false}, "Ref", $.String);

    $.Field({Static:false, Public:false}, "XsiTypeName", $.String);

    $.Field({Static:false, Public:false}, "XsiTypeNamespace", $.String);

    $.Field({Static:false, Public:false}, "XsiTypePrefix", $.String);

    $.Field({Static:false, Public:false}, "XsiNil", $.Boolean);

    $.Field({Static:false, Public:false}, "ClrAssembly", $.String);

    $.Field({Static:false, Public:false}, "ClrType", $.String);

    $.Field({Static:false, Public:false}, "ArraySZSize", $.Int32);

    $.Field({Static:false, Public:false}, "FactoryTypeName", $.String);

    $.Field({Static:false, Public:false}, "FactoryTypeNamespace", $.String);

    $.Field({Static:false, Public:false}, "FactoryTypePrefix", $.String);

    $.Field({Static:false, Public:false}, "UnrecognizedAttributesFound", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CodeGenerator */ 

(function CodeGenerator$Members () {
  var $, $thisType;




















































































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CodeGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "And", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.DynamicMethod"), $asm02.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $.String, $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginWhileBody", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Cmp"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginWhileCondition", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Bgt", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ble", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Blt", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Box", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Br", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Break", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Brfalse", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Brtrue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CallStringFormat", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "values", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "Case", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.Label"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Castclass", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ceq", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Concat2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Concat3", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertAddress", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValue", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dec", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareLocal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareLocal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareLocal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefaultCase", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Dup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Else", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ElseIf", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("System.Runtime.Serialization.Cmp"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElseIfIsEmptyString", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceInstruction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceLabel", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStackTop", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndCase", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndFor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndForEach", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndIf", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Delegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndSwitch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndWhile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "For", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ForEach", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArraySetValue", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GetTypeFromHandle", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_LocalNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ObjectEquals", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ObjectToString", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SerializationModule", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Module"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StringConcat2", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StringConcat3", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StringFormat", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetArg", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBranchCode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.OpCode"), [$asm08.TypeRef("System.Runtime.Serialization.Cmp")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCmpInverse", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Cmp"), [$asm08.TypeRef("System.Runtime.Serialization.Cmp")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConvOpCode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.OpCode"), [$asm02.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLdelemOpCode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.OpCode"), [$asm02.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLdindOpCode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.OpCode"), [$asm02.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStelemOpCode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.OpCode"), [$asm02.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetVariableType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "If", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "If", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Cmp"))
    );

    $.ExternalMethod({Static:false, Public:false}, "If", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("System.Runtime.Serialization.Cmp"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IfFalseBreak", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "IfNot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IfNotDefaultValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "IfNotIsEmptyString", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IfTrueBreak", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "IgnoreReturnValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Inc", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitILGeneration", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitObj", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalBreakFor", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Reflection.Emit.OpCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalConvert", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIf", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStruct", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarg", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarg", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarga", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarga", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "LdargAddress", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldelem", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldelema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldlen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloc", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloc", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloca", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloca", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "LdlocAddress", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldobj", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldstr", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldtoken", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Load", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAddress", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadArrayElement", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDefaultValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMember", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadParam", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $asm02.TypeRef("System.Reflection.MethodBase")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadThis", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkLabel", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "New", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "New", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.ConstructorInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewArray", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Not", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Or", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopIfState", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IfState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ret", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Starg", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Starg", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Stelem", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Stloc", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Stloc", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Stobj", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Store", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreArrayElement", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreMember", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Subtract", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Switch", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.Emit.Label")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowMismatchException", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToDebuggableString", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Unbox", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyParameterCount", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MethodInfo"), $.Int32])
    );

    $.Field({Static:true , Public:false}, "getTypeFromHandle", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "stringFormat", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "stringConcat2", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "stringConcat3", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "objectToString", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "objectEquals", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "arraySetValue", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "delegateType", $asm02.TypeRef("System.Type"));

    $.Field({Static:true , Public:false}, "serializationModule", $asm02.TypeRef("System.Reflection.Module"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "dynamicMethod", $asm02.TypeRef("System.Reflection.Emit.DynamicMethod"));

    $.Field({Static:false, Public:false}, "ilGen", $asm02.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Field({Static:false, Public:false}, "argList", $asm02.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "blockStack", $asm02.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "methodEndLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "stringFormatArray", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "localNames", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "lineNo", $.Int32);

    $.Field({Static:false, Public:false}, "codeGenTrace", $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator+CodeGenTrace"));

    $.Field({Static:true , Public:false}, "stringLength", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetTypeFromHandle", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StringFormat", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StringConcat2", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StringConcat3", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ObjectToString", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ObjectEquals", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ArraySetValue", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "SerializationModule", $asm02.TypeRef("System.Reflection.Module"));

    $.Property({Static:false, Public:false}, "CurrentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "LocalNames", $asm02.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.CodeGenerator+CodeGenTrace */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.CodeGenerator+CodeGenTrace", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Save: 1, 
    Tron: 2, 
  }
);

/* class System.Runtime.Serialization.ArgBuilder */ 

(function ArgBuilder$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ArgBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm02.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "Index", $.Int32);

    $.Field({Static:false, Public:false}, "ArgType", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ForState */ 

(function ForState$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ForState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.Label"), 
          $asm02.TypeRef("System.Reflection.Emit.Label"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BeginLabel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_End", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndLabel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Index", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequiresEndLabel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TestLabel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EndLabel", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequiresEndLabel", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "indexVar", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "beginLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "testLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "endLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "requiresEndLabel", $.Boolean);

    $.Field({Static:false, Public:false}, "end", $.Object);

    $.Property({Static:false, Public:false}, "Index", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Property({Static:false, Public:false}, "BeginLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "TestLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "EndLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "RequiresEndLabel", $.Boolean);

    $.Property({Static:false, Public:false}, "End", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Cmp */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Cmp", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LessThan: 0, 
    EqualTo: 1, 
    LessThanOrEqualTo: 2, 
    GreaterThan: 3, 
    NotEqualTo: 4, 
    GreaterThanOrEqualTo: 5, 
  }
);

/* class System.Runtime.Serialization.IfState */ 

(function IfState$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.IfState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElseBegin", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndIf", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElseBegin", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EndIf", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.Field({Static:false, Public:false}, "elseBegin", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "endIf", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "EndIf", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "ElseBegin", $asm02.TypeRef("System.Reflection.Emit.Label"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SwitchState */ 

(function SwitchState$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SwitchState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.Label"), $asm02.TypeRef("System.Reflection.Emit.Label")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultDefined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultLabel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndOfSwitchLabel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DefaultDefined", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "defaultLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "endOfSwitchLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "defaultDefined", $.Boolean);

    $.Property({Static:false, Public:false}, "DefaultLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "EndOfSwitchLabel", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "DefaultDefined", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.DateTimeOffsetAdapter */ 

(function DateTimeOffsetAdapter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.DateTimeOffsetAdapter", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.DateTime"), $.Int16])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OffsetMinutes", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UtcDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm02.TypeRef("System.DateTimeOffset"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDateTimeOffsetAdapter", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OffsetMinutes", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UtcDateTime", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.IFormatProvider")])
    );

    $.Field({Static:false, Public:false}, "utcDateTime", $asm02.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "offsetMinutes", $.Int16);

    $.Property({Static:false, Public:true }, "UtcDateTime", $asm02.TypeRef("System.DateTime"))
      .Attribute($asm08.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "OffsetMinutes", $.Int16)
      .Attribute($asm08.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.Runtime.Serialization.DictionaryGlobals */ 

(function DictionaryGlobals$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Runtime.Serialization.DictionaryGlobals", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyString", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SchemaInstanceNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SchemaNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SerializationNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "XmlnsNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "XsiTypeLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "XsiNilLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ClrTypeLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ClrAssemblyLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ArraySizeLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "IdLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "RefLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ISerializableFactoryTypeLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "CharLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "BooleanLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SignedByteLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedByteLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ShortLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedShortLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "IntLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedIntLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "LongLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedLongLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "FloatLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DoubleLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DecimalLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DateTimeLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "StringLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ByteArrayLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ObjectLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "TimeSpanLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "GuidLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "QNameLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Space", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "timeLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "dateLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "hexBinaryLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "gYearMonthLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "gYearLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "gMonthDayLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "gDayLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "gMonthLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "integerLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "positiveIntegerLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "negativeIntegerLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "nonPositiveIntegerLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "nonNegativeIntegerLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "normalizedStringLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "tokenLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "languageLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NameLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NCNameLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "XSDIDLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "IDREFLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "IDREFSLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ENTITYLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ENTITIESLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NMTOKENLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NMTOKENSLocalName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "AsmxTypesNamespace", $asm08.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Globals */ 

(function Globals$Members () {
  var $, $thisType;






















































































  JSIL.MakeStaticClass("System.Runtime.Serialization.Globals", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_DataContractXsdBaseNamespaceUri", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Uri"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyObjectArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyTypeArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IdQualifiedName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MemberAccessPermission", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Permissions.ReflectionPermission"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_RefQualifiedName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_SerializationFormatterPermission", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Permissions.SecurityPermission"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfArray", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfByteArray", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfClassDataNode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfCollectionDataContractAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfCollectionDataNode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfContractNamespaceAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDataContractAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDataMemberAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDateTimeOffset", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDateTimeOffsetAdapter", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDBNull", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDictionaryEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDictionaryGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfEnumMemberAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfExtensionDataObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfFlagsAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfGenericDictionaryEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfHashtable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfICollection", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfICollectionGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDeserializationCallback", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDictionary", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDictionaryEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDictionaryGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumerable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumerableGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumeratorGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIExtensibleDataObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIList", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIListGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfInt", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIObjectReference", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIPropertyChange", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfISerializable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfISerializableDataNode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIXmlSerializable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfKeyValue", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfKeyValuePair", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfKnownTypeAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfListGeneric", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfNonSerializedAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfNullable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfObjectArray", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnDeserializedAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnDeserializingAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnSerializedAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnSerializingAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOptionalFieldAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfReflectionPointer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializableAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializationEntry", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializationInfo", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializationInfoEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfStreamingContext", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfString", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfTypeEnumerable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfULong", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfUri", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfVoid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlDataNode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlElement", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatClassReaderDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatClassWriterDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatCollectionReaderDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatCollectionWriterDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatGetOnlyCollectionReaderDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlNodeArray", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlQualifiedName", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlRootAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSchemaProviderAttribute", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSchemaSet", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSchemaType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSerializableServices", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "ScanAllMembers", $asm02.TypeRef("System.Reflection.BindingFlags"), 60);

    $.Field({Static:true , Public:false}, "idQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "refQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfObject", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfValueType", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfArray", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfString", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfInt", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfULong", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfVoid", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfByteArray", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfTimeSpan", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfGuid", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDateTimeOffset", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDateTimeOffsetAdapter", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfUri", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfTypeEnumerable", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfStreamingContext", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfISerializable", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIDeserializationCallback", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIObjectReference", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlFormatClassWriterDelegate", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlFormatCollectionWriterDelegate", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlFormatClassReaderDelegate", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlFormatCollectionReaderDelegate", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlFormatGetOnlyCollectionReaderDelegate", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfKnownTypeAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDataContractAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfContractNamespaceAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDataMemberAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfEnumMemberAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfCollectionDataContractAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfOptionalFieldAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfObjectArray", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfOnSerializingAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfOnSerializedAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfOnDeserializingAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfOnDeserializedAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfFlagsAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfSerializableAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfNonSerializedAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfSerializationInfo", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfSerializationInfoEnumerator", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfSerializationEntry", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIXmlSerializable", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlSchemaProviderAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlRootAttribute", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlQualifiedName", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlSchemaType", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlSerializableServices", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlNodeArray", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlSchemaSet", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "emptyTypeArray", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIPropertyChange", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIExtensibleDataObject", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfExtensionDataObject", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfISerializableDataNode", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfClassDataNode", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfCollectionDataNode", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlDataNode", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfNullable", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfReflectionPointer", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIDictionaryGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIDictionary", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIListGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIList", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfICollectionGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfICollection", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIEnumerableGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIEnumerable", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIEnumeratorGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIEnumerator", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfKeyValuePair", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfKeyValue", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfIDictionaryEnumerator", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDictionaryEnumerator", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfGenericDictionaryEnumerator", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDictionaryGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfHashtable", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfListGeneric", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfXmlElement", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeOfDBNull", $asm02.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "dataContractXsdBaseNamespaceUri", $asm03.TypeRef("System.Uri"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "serializationFormatterPermission", $asm02.TypeRef("System.Security.Permissions.SecurityPermission"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "memberAccessPermission", $asm02.TypeRef("System.Security.Permissions.ReflectionPermission"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "DefaultIsRequired", $.Boolean, false);

    $.Constant({Static:true , Public:true }, "DefaultEmitDefaultValue", $.Boolean, true);

    $.Constant({Static:true , Public:true }, "DefaultOrder", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "DefaultIsReference", $.Boolean, false);

    $.Field({Static:true , Public:true , ReadOnly:true }, "NewObjectId", $.String, function ($pi) {
        return $asm02.System.String.Empty;
      });

    $.Constant({Static:true , Public:true }, "SimpleSRSInternalsVisiblePattern", $.String, "^[\\s]*System\\.Runtime\\.Serialization[\\s]*$");

    $.Constant({Static:true , Public:true }, "FullSRSInternalsVisiblePattern", $.String, "^[\\s]*System\\.Runtime\\.Serialization[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00000000000000000400000000000000)[\\s]*$");

    $.Constant({Static:true , Public:true }, "NullObjectId", $.String, null);

    $.Constant({Static:true , Public:true }, "Space", $.String, " ");

    $.Constant({Static:true , Public:true }, "OpenBracket", $.String, "[");

    $.Constant({Static:true , Public:true }, "CloseBracket", $.String, "]");

    $.Constant({Static:true , Public:true }, "Comma", $.String, ",");

    $.Constant({Static:true , Public:true }, "XsiPrefix", $.String, "i");

    $.Constant({Static:true , Public:true }, "XsdPrefix", $.String, "x");

    $.Constant({Static:true , Public:true }, "SerPrefix", $.String, "z");

    $.Constant({Static:true , Public:true }, "SerPrefixForSchema", $.String, "ser");

    $.Constant({Static:true , Public:true }, "ElementPrefix", $.String, "q");

    $.Constant({Static:true , Public:true }, "DataContractXsdBaseNamespace", $.String, "http://schemas.datacontract.org/2004/07/");

    $.Constant({Static:true , Public:true }, "DataContractXmlNamespace", $.String, "http://schemas.datacontract.org/2004/07/System.Xml");

    $.Constant({Static:true , Public:true }, "SchemaInstanceNamespace", $.String, "http://www.w3.org/2001/XMLSchema-instance");

    $.Constant({Static:true , Public:true }, "SchemaNamespace", $.String, "http://www.w3.org/2001/XMLSchema");

    $.Constant({Static:true , Public:true }, "XsiNilLocalName", $.String, "nil");

    $.Constant({Static:true , Public:true }, "XsiTypeLocalName", $.String, "type");

    $.Constant({Static:true , Public:true }, "TnsPrefix", $.String, "tns");

    $.Constant({Static:true , Public:true }, "OccursUnbounded", $.String, "unbounded");

    $.Constant({Static:true , Public:true }, "AnyTypeLocalName", $.String, "anyType");

    $.Constant({Static:true , Public:true }, "StringLocalName", $.String, "string");

    $.Constant({Static:true , Public:true }, "IntLocalName", $.String, "int");

    $.Constant({Static:true , Public:true }, "True", $.String, "true");

    $.Constant({Static:true , Public:true }, "False", $.String, "false");

    $.Constant({Static:true , Public:true }, "ArrayPrefix", $.String, "ArrayOf");

    $.Constant({Static:true , Public:true }, "XmlnsNamespace", $.String, "http://www.w3.org/2000/xmlns/");

    $.Constant({Static:true , Public:true }, "XmlnsPrefix", $.String, "xmlns");

    $.Constant({Static:true , Public:true }, "SchemaLocalName", $.String, "schema");

    $.Constant({Static:true , Public:true }, "CollectionsNamespace", $.String, "http://schemas.microsoft.com/2003/10/Serialization/Arrays");

    $.Constant({Static:true , Public:true }, "DefaultClrNamespace", $.String, "GeneratedNamespace");

    $.Constant({Static:true , Public:true }, "DefaultTypeName", $.String, "GeneratedType");

    $.Constant({Static:true , Public:true }, "DefaultGeneratedMember", $.String, "GeneratedMember");

    $.Constant({Static:true , Public:true }, "DefaultFieldSuffix", $.String, "Field");

    $.Constant({Static:true , Public:true }, "DefaultPropertySuffix", $.String, "Property");

    $.Constant({Static:true , Public:true }, "DefaultMemberSuffix", $.String, "Member");

    $.Constant({Static:true , Public:true }, "NameProperty", $.String, "Name");

    $.Constant({Static:true , Public:true }, "NamespaceProperty", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "OrderProperty", $.String, "Order");

    $.Constant({Static:true , Public:true }, "IsReferenceProperty", $.String, "IsReference");

    $.Constant({Static:true , Public:true }, "IsRequiredProperty", $.String, "IsRequired");

    $.Constant({Static:true , Public:true }, "EmitDefaultValueProperty", $.String, "EmitDefaultValue");

    $.Constant({Static:true , Public:true }, "ClrNamespaceProperty", $.String, "ClrNamespace");

    $.Constant({Static:true , Public:true }, "ItemNameProperty", $.String, "ItemName");

    $.Constant({Static:true , Public:true }, "KeyNameProperty", $.String, "KeyName");

    $.Constant({Static:true , Public:true }, "ValueNameProperty", $.String, "ValueName");

    $.Constant({Static:true , Public:true }, "SerializationInfoPropertyName", $.String, "SerializationInfo");

    $.Constant({Static:true , Public:true }, "SerializationInfoFieldName", $.String, "info");

    $.Constant({Static:true , Public:true }, "NodeArrayPropertyName", $.String, "Nodes");

    $.Constant({Static:true , Public:true }, "NodeArrayFieldName", $.String, "nodesField");

    $.Constant({Static:true , Public:true }, "ExportSchemaMethod", $.String, "ExportSchema");

    $.Constant({Static:true , Public:true }, "IsAnyProperty", $.String, "IsAny");

    $.Constant({Static:true , Public:true }, "ContextFieldName", $.String, "context");

    $.Constant({Static:true , Public:true }, "GetObjectDataMethodName", $.String, "GetObjectData");

    $.Constant({Static:true , Public:true }, "GetEnumeratorMethodName", $.String, "GetEnumerator");

    $.Constant({Static:true , Public:true }, "MoveNextMethodName", $.String, "MoveNext");

    $.Constant({Static:true , Public:true }, "AddValueMethodName", $.String, "AddValue");

    $.Constant({Static:true , Public:true }, "CurrentPropertyName", $.String, "Current");

    $.Constant({Static:true , Public:true }, "ValueProperty", $.String, "Value");

    $.Constant({Static:true , Public:true }, "EnumeratorFieldName", $.String, "enumerator");

    $.Constant({Static:true , Public:true }, "SerializationEntryFieldName", $.String, "entry");

    $.Constant({Static:true , Public:true }, "ExtensionDataSetMethod", $.String, "set_ExtensionData");

    $.Constant({Static:true , Public:true }, "ExtensionDataSetExplicitMethod", $.String, "System.Runtime.Serialization.IExtensibleDataObject.set_ExtensionData");

    $.Constant({Static:true , Public:true }, "ExtensionDataObjectPropertyName", $.String, "ExtensionData");

    $.Constant({Static:true , Public:true }, "ExtensionDataObjectFieldName", $.String, "extensionDataField");

    $.Constant({Static:true , Public:true }, "AddMethodName", $.String, "Add");

    $.Constant({Static:true , Public:true }, "ParseMethodName", $.String, "Parse");

    $.Constant({Static:true , Public:true }, "GetCurrentMethodName", $.String, "get_Current");

    $.Constant({Static:true , Public:true }, "SerializationNamespace", $.String, "http://schemas.microsoft.com/2003/10/Serialization/");

    $.Constant({Static:true , Public:true }, "ClrTypeLocalName", $.String, "Type");

    $.Constant({Static:true , Public:true }, "ClrAssemblyLocalName", $.String, "Assembly");

    $.Constant({Static:true , Public:true }, "IsValueTypeLocalName", $.String, "IsValueType");

    $.Constant({Static:true , Public:true }, "EnumerationValueLocalName", $.String, "EnumerationValue");

    $.Constant({Static:true , Public:true }, "SurrogateDataLocalName", $.String, "Surrogate");

    $.Constant({Static:true , Public:true }, "GenericTypeLocalName", $.String, "GenericType");

    $.Constant({Static:true , Public:true }, "GenericParameterLocalName", $.String, "GenericParameter");

    $.Constant({Static:true , Public:true }, "GenericNameAttribute", $.String, "Name");

    $.Constant({Static:true , Public:true }, "GenericNamespaceAttribute", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "GenericParameterNestedLevelAttribute", $.String, "NestedLevel");

    $.Constant({Static:true , Public:true }, "IsDictionaryLocalName", $.String, "IsDictionary");

    $.Constant({Static:true , Public:true }, "ActualTypeLocalName", $.String, "ActualType");

    $.Constant({Static:true , Public:true }, "ActualTypeNameAttribute", $.String, "Name");

    $.Constant({Static:true , Public:true }, "ActualTypeNamespaceAttribute", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "DefaultValueLocalName", $.String, "DefaultValue");

    $.Constant({Static:true , Public:true }, "EmitDefaultValueAttribute", $.String, "EmitDefaultValue");

    $.Constant({Static:true , Public:true }, "ISerializableFactoryTypeLocalName", $.String, "FactoryType");

    $.Constant({Static:true , Public:true }, "IdLocalName", $.String, "Id");

    $.Constant({Static:true , Public:true }, "RefLocalName", $.String, "Ref");

    $.Constant({Static:true , Public:true }, "ArraySizeLocalName", $.String, "Size");

    $.Constant({Static:true , Public:true }, "KeyLocalName", $.String, "Key");

    $.Constant({Static:true , Public:true }, "ValueLocalName", $.String, "Value");

    $.Constant({Static:true , Public:true }, "MscorlibAssemblyName", $.String, "0");

    $.Constant({Static:true , Public:true }, "MscorlibAssemblySimpleName", $.String, "mscorlib");

    $.Constant({Static:true , Public:true }, "MscorlibFileName", $.String, "mscorlib.dll");

    $.Constant({Static:true , Public:true }, "SerializationSchema", $.String, "<?xml version='1.0' encoding='utf-8'?>\r\n<xs:schema elementFormDefault='qualified' attributeFormDefault='qualified' xmlns:tns='http://schemas.microsoft.com/2003/10/Serialization/' targetNamespace='http://schemas.microsoft.com/2003/10/Serialization/' xmlns:xs='http://www.w3.org/2001/XMLSchema'>\r\n  <xs:element name='anyType' nillable='true' type='xs:anyType' />\r\n  <xs:element name='anyURI' nillable='true' type='xs:anyURI' />\r\n  <xs:element name='base64Binary' nillable='true' type='xs:base64Binary' />\r\n  <xs:element name='boolean' nillable='true' type='xs:boolean' />\r\n  <xs:element name='byte' nillable='true' type='xs:byte' />\r\n  <xs:element name='dateTime' nillable='true' type='xs:dateTime' />\r\n  <xs:element name='decimal' nillable='true' type='xs:decimal' />\r\n  <xs:element name='double' nillable='true' type='xs:double' />\r\n  <xs:element name='float' nillable='true' type='xs:float' />\r\n  <xs:element name='int' nillable='true' type='xs:int' />\r\n  <xs:element name='long' nillable='true' type='xs:long' />\r\n  <xs:element name='QName' nillable='true' type='xs:QName' />\r\n  <xs:element name='short' nillable='true' type='xs:short' />\r\n  <xs:element name='string' nillable='true' type='xs:string' />\r\n  <xs:element name='unsignedByte' nillable='true' type='xs:unsignedByte' />\r\n  <xs:element name='unsignedInt' nillable='true' type='xs:unsignedInt' />\r\n  <xs:element name='unsignedLong' nillable='true' type='xs:unsignedLong' />\r\n  <xs:element name='unsignedShort' nillable='true' type='xs:unsignedShort' />\r\n  <xs:element name='char' nillable='true' type='tns:char' />\r\n  <xs:simpleType name='char'>\r\n    <xs:restriction base='xs:int'/>\r\n  </xs:simpleType>  \r\n  <xs:element name='duration' nillable='true' type='tns:duration' />\r\n  <xs:simpleType name='duration'>\r\n    <xs:restriction base='xs:duration'>\r\n      <xs:pattern value='\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?' />\r\n      <xs:minInclusive value='-P10675199DT2H48M5.4775808S' />\r\n      <xs:maxInclusive value='P10675199DT2H48M5.4775807S' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:element name='guid' nillable='true' type='tns:guid' />\r\n  <xs:simpleType name='guid'>\r\n    <xs:restriction base='xs:string'>\r\n      <xs:pattern value='[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:attribute name='FactoryType' type='xs:QName' />\r\n  <xs:attribute name='Id' type='xs:ID' />\r\n  <xs:attribute name='Ref' type='xs:IDREF' />\r\n</xs:schema>\r\n");

    $.Property({Static:true , Public:false}, "IdQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "RefQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "TypeOfObject", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfArray", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfString", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfInt", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfULong", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfVoid", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfByteArray", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfTimeSpan", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfGuid", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDateTimeOffset", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDateTimeOffsetAdapter", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfUri", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfTypeEnumerable", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfStreamingContext", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfISerializable", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDeserializationCallback", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIObjectReference", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatClassWriterDelegate", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatCollectionWriterDelegate", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatClassReaderDelegate", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatCollectionReaderDelegate", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatGetOnlyCollectionReaderDelegate", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfKnownTypeAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDataContractAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfContractNamespaceAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDataMemberAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfEnumMemberAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfCollectionDataContractAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOptionalFieldAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfObjectArray", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnSerializingAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnSerializedAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnDeserializingAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnDeserializedAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfFlagsAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializableAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfNonSerializedAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializationInfo", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializationInfoEnumerator", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializationEntry", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIXmlSerializable", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSchemaProviderAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlRootAttribute", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlQualifiedName", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSchemaType", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSerializableServices", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlNodeArray", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSchemaSet", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "EmptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:true , Public:false}, "EmptyTypeArray", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "TypeOfIPropertyChange", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIExtensibleDataObject", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfExtensionDataObject", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfISerializableDataNode", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfClassDataNode", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfCollectionDataNode", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlDataNode", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfNullable", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfReflectionPointer", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDictionaryGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDictionary", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIListGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIList", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfICollectionGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfICollection", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumerableGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumerable", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumeratorGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumerator", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfKeyValuePair", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfKeyValue", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDictionaryEnumerator", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDictionaryEnumerator", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfGenericDictionaryEnumerator", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDictionaryGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfHashtable", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfListGeneric", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlElement", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDBNull", $asm02.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DataContractXsdBaseNamespaceUri", $asm03.TypeRef("System.Uri"));

    $.Property({Static:true , Public:true }, "SerializationFormatterPermission", $asm02.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Property({Static:true , Public:true }, "MemberAccessPermission", $asm02.TypeRef("System.Security.Permissions.ReflectionPermission"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.HybridObjectCache */ 

(function HybridObjectCache$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.HybridObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsObjectReferenced", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "objectDictionary", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "referencedObjectDictionary", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.KnownTypeDataContractResolver */ 

(function KnownTypeDataContractResolver$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"), 
      Name: "System.Runtime.Serialization.KnownTypeDataContractResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveName", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $.String, $.String, 
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryResolveType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
        ])
    );

    $.Field({Static:false, Public:false}, "context", $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.ObjectReferenceStack */ 

(function ObjectReferenceStack$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.ObjectReferenceStack", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSetAsIsReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Constant({Static:true , Public:false}, "MaximumArraySize", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "InitialArraySize", $.Int32, 4);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "objectArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "isReferenceArray", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "objectDictionary", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Object]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ObjectToIdCache */ 

(function ObjectToIdCache$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ObjectToIdCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeStartPosition", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElement", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetId", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrime", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrime", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReassignId", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rehash", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_currentCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_ids", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_objs", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "m_isWrapped", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "primes", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.ScopedKnownTypes */ 

(function ScopedKnownTypes$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.ScopedKnownTypes", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.Field({Static:false, Public:false}, "dataContractDictionaries", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.SerializationMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.SerializationMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SharedContract: 0, 
    SharedType: 1, 
  }
);

/* class System.Runtime.Serialization.SerializationTrace */ 

(function SerializationTrace$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Runtime.Serialization.SerializationTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_CodeGenerationSwitch", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.SourceSwitch"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CodeGenerationTraceSource", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.TraceSource"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TraceInstruction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteInstruction", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.Field({Static:true , Public:false}, "codeGen", $asm03.TypeRef("System.Diagnostics.TraceSource"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:true , Public:false}, "CodeGenerationSwitch", $asm03.TypeRef("System.Diagnostics.SourceSwitch"));

    $.Property({Static:true , Public:false}, "CodeGenerationTraceSource", $asm03.TypeRef("System.Diagnostics.TraceSource"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SurrogateDataContract */ 

(function SurrogateDataContract$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.SurrogateDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationSurrogate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetRealObject", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Runtime.Serialization.IObjectReference"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializationSurrogateGetObjectData", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SerializationSurrogateSetObjectData", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.SurrogateDataContract+SurrogateDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "SerializationSurrogate", $asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SurrogateDataContract+SurrogateDataContractCriticalHelper */ 

(function SurrogateDataContractCriticalHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.DataContract+DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.SurrogateDataContract+SurrogateDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationSurrogate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"))
    );

    $.Field({Static:false, Public:false}, "serializationSurrogate", $asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"));

    $.Property({Static:false, Public:false}, "SerializationSurrogate", $asm02.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.ExtensionDataReader */ 

(function ExtensionDataReader$Members () {
  var $, $thisType;





























































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Runtime.Serialization.ExtensionDataReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDeserializedDataNode", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddPrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckIfNodeHandled", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.IDataNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsXmlDataNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentNode", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextElement", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ElementData"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GrowElementsIfNeeded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementNode", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.ExtensionDataReader+ExtensionDataNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInClass", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInISerializable", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ISerializableDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInXml", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlDataNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToDeserializedObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToText", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.IDataNode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataNode", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDeserializedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNextElement", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataNode"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "cache", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.ElementData")]));

    $.Field({Static:false, Public:false}, "element", $asm08.TypeRef("System.Runtime.Serialization.ElementData"));

    $.Field({Static:false, Public:false}, "nextElement", $asm08.TypeRef("System.Runtime.Serialization.ElementData"));

    $.Field({Static:false, Public:false}, "readState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Field({Static:false, Public:false}, "internalNodeType", $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataReader+ExtensionDataNodeType"));

    $.Field({Static:false, Public:false}, "nodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32);

    $.Field({Static:false, Public:false}, "xmlNodeReader", $asm0A.TypeRef("System.Xml.XmlNodeReader"));

    $.Field({Static:false, Public:false}, "deserializedDataNodes", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm08.TypeRef("System.Runtime.Serialization.IDataNode")]));

    $.Field({Static:false, Public:false}, "context", $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"));

    $.Field({Static:true , Public:false}, "nsToPrefixTable", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "prefixToNsTable", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "IsXmlDataNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Runtime.Serialization.ExtensionDataReader+ExtensionDataNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.ExtensionDataReader+ExtensionDataNodeType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Element: 1, 
    EndElement: 2, 
    Text: 3, 
    Xml: 4, 
    ReferencedElement: 5, 
    NullElement: 6, 
  }
);

/* class System.Runtime.Serialization.AttributeData */ 

(function AttributeData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.AttributeData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "prefix", $.String);

    $.Field({Static:false, Public:true }, "ns", $.String);

    $.Field({Static:false, Public:true }, "localName", $.String);

    $.Field({Static:false, Public:true }, "value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ElementData */ 

(function ElementData$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ElementData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowAttributesIfNeeded", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "localName", $.String);

    $.Field({Static:false, Public:true }, "ns", $.String);

    $.Field({Static:false, Public:true }, "prefix", $.String);

    $.Field({Static:false, Public:true }, "attributeCount", $.Int32);

    $.Field({Static:false, Public:true }, "attributes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.AttributeData")]));

    $.Field({Static:false, Public:true }, "dataNode", $asm08.TypeRef("System.Runtime.Serialization.IDataNode"));

    $.Field({Static:false, Public:true }, "childElementIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlFormatGeneratorStatics */ 

(function XmlFormatGeneratorStatics$Members () {
  var $, $thisType;

















































































  JSIL.MakeStaticClass("System.Runtime.Serialization.XmlFormatGeneratorStatics", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_AddNewObjectMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_AddNewObjectWithIdMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_BoxPointer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CheckEndOfArrayMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ChildElementNamespaceProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ChildElementNamespacesProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSerializationExceptionMessageProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionItemNameProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionSerializationExceptionMessageProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ContractNamespacesField", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.FieldInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CreateUnexpectedStateExceptionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DemandMemberAccessPermissionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DemandSerializationFormatterPermissionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DictionaryEnumeratorCtor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EnsureArraySizeMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionDataObjectCtor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionDataProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionDataSetExplicitMethodInfo", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetArrayLengthMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetArraySizeMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetCollectionMemberMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetCurrentMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetDateTimeOffsetAdapterMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetDateTimeOffsetMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetDefaultValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetExistingObjectMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetHasValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetItemContractMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetMemberIndexMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetMemberIndexWithRequiredMembersMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetNullableValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetObjectIdMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetRealObjectMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetStreamingContextMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetUninitializedObjectMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_HashtableCtor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementArrayCountMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementCollectionCountGenericMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementCollectionCountMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementItemCountMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InternalDeserializeMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSerializeMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSerializeReferenceMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IsStartElementMethod0", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IsStartElementMethod2", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_MemberNamesField", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.FieldInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_MoveNextMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_MoveToNextElementMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NamespaceProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NodeTypeProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_OnDeserializationMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadAttributesMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadIfNullOrRefMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadSerializationInfoMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadXmlValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReplaceDeserializedObjectMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ResetAttributesMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SerializationExceptionCtor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SerializeReadOnlyTypesProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SkipUnknownElementMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StoreCollectionMemberInfoMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StoreIsGetOnlyCollectionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowArrayExceededSizeExceptionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowInvalidDataContractExceptionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowRequiredMemberMissingExceptionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowRequiredMemberMustBeEmittedMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowTypeNotSerializableMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TraceInstructionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TrimArraySizeMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_UnboxPointer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteEndElementMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteExtensionDataMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteISerializableMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteNamespaceDeclMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteNullMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteStartElementMethod2", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteStartElementMethod3", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteXmlValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeStartElementMethod2", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeStartElementMethod3", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeEndElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeNamespaceDeclMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "extensionDataProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "boxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "dictionaryEnumeratorCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "ienumeratorMoveNextMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "ienumeratorGetCurrentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getItemContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isStartElementMethod2", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isStartElementMethod0", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getUninitializedObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "onDeserializationMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "unboxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "nodeTypeProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "serializationExceptionCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "extensionDataObjectCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "hashtableCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getStreamingContextMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getCollectionMemberMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "storeCollectionMemberInfoMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "storeIsGetOnlyCollectionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwNullValueReturnedForGetOnlyCollectionExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwArrayExceededSizeExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "incrementItemCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "demandSerializationFormatterPermissionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "demandMemberAccessPermissionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "internalDeserializeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "moveToNextElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getMemberIndexMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getMemberIndexWithRequiredMembersMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwRequiredMemberMissingExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "skipUnknownElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "readIfNullOrRefMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "readAttributesMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "resetAttributesMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getObjectIdMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getArraySizeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "addNewObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "addNewObjectWithIdMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "replaceDeserializedObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getExistingObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getRealObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "readMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "ensureArraySizeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "trimArraySizeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "checkEndOfArrayMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getArrayLengthMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "readSerializationInfoMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "createUnexpectedStateExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "internalSerializeReferenceMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "internalSerializeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeNullMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "incrementArrayCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "incrementCollectionCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "incrementCollectionCountGenericMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getDefaultValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getNullableValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwRequiredMemberMustBeEmittedMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getHasValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeISerializableMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeExtensionDataMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeXmlValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "readXmlValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwTypeNotSerializableMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "namespaceProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "contractNamespacesField", $asm02.TypeRef("System.Reflection.FieldInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "memberNamesField", $asm02.TypeRef("System.Reflection.FieldInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "extensionDataSetExplicitMethodInfo", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "childElementNamespacesProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "collectionItemNameProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "childElementNamespaceProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getDateTimeOffsetMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getDateTimeOffsetAdapterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "traceInstructionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwInvalidDataContractExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "serializeReadOnlyTypesProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "classSerializationExceptionMessageProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "collectionSerializationExceptionMessageProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:true , Public:false}, "WriteStartElementMethod2", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteStartElementMethod3", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteEndElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteNamespaceDeclMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ExtensionDataProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "BoxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DictionaryEnumeratorCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "MoveNextMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetCurrentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetItemContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IsStartElementMethod2", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IsStartElementMethod0", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetUninitializedObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "OnDeserializationMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "UnboxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "NodeTypeProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "SerializationExceptionCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "ExtensionDataObjectCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "HashtableCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "GetStreamingContextMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetCollectionMemberMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StoreCollectionMemberInfoMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StoreIsGetOnlyCollectionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowArrayExceededSizeExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementItemCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DemandSerializationFormatterPermissionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DemandMemberAccessPermissionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "InternalDeserializeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "MoveToNextElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetMemberIndexMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetMemberIndexWithRequiredMembersMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowRequiredMemberMissingExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "SkipUnknownElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadIfNullOrRefMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadAttributesMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ResetAttributesMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetObjectIdMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetArraySizeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "AddNewObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "AddNewObjectWithIdMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReplaceDeserializedObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetExistingObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetRealObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "EnsureArraySizeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "TrimArraySizeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "CheckEndOfArrayMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetArrayLengthMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadSerializationInfoMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "CreateUnexpectedStateExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "InternalSerializeReferenceMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "InternalSerializeMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteNullMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementArrayCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementCollectionCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementCollectionCountGenericMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetDefaultValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetNullableValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowRequiredMemberMustBeEmittedMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetHasValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteISerializableMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteExtensionDataMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteXmlValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadXmlValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowTypeNotSerializableMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "NamespaceProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "ContractNamespacesField", $asm02.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "MemberNamesField", $asm02.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "ExtensionDataSetExplicitMethodInfo", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ChildElementNamespacesProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "CollectionItemNameProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "ChildElementNamespaceProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "GetDateTimeOffsetMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetDateTimeOffsetAdapterMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "TraceInstructionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowInvalidDataContractExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "SerializeReadOnlyTypesProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "ClassSerializationExceptionMessageProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "CollectionSerializationExceptionMessageProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.XmlFormatClassReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatClassReaderDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Object"), [
      $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), 
      $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    ]));

/* delegate System.Runtime.Serialization.XmlFormatCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Object"), [
      $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), 
      $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
      $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
    ]));

/* delegate System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), 
      $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
      $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
    ]));

/* class System.Runtime.Serialization.XmlFormatReaderGenerator */ 

(function XmlFormatReaderGenerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatReaderGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatReaderGenerator+CriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlFormatReaderGenerator+CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatReaderGenerator+CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionReaderHelper", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequiredMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequiredMembers", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("System.Array", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnexpectedItemInCollection", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserialized", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserializing", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"), $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadClass", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollectionItem", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadGetOnlyCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadISerializable", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.Emit.Label")]), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreCollectionValue", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedStateException", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowValidationException", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "values", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ThrowValidationException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapNullableObject", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"));

    $.Field({Static:false, Public:false}, "objectLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "objectType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "xmlReaderArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "contextArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "memberNamesArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "memberNamespacesArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "collectionContractArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerContext */ 

(function XmlObjectSerializerContext$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfTypeSerializable", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "DemandMemberAccessPermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DemandSerializationFormatterPermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DataContractResolver", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementItemCountMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsGetOnlyCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownTypeResolver", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.KnownTypeDataContractResolver"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.SerializationMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemainingItemCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializerKnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContractFromSerializerKnownTypes", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractsForKnownTypes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]), [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStreamingContext", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Runtime.Serialization.StreamingContext"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementItemCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractFromDataContractResolver", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractFromKnownTypes", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractFromKnownTypes", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.String, $.String, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromRootDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveNameFromKnownTypes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsGetOnlyCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "serializer", $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"));

    $.Field({Static:false, Public:false}, "rootTypeDataContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "scopedKnownTypes", $asm08.TypeRef("System.Runtime.Serialization.ScopedKnownTypes"));

    $.Field({Static:false, Public:false}, "serializerKnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "isSerializerKnownDataContractsSetExplicit", $.Boolean);

    $.Field({Static:false, Public:false}, "serializerKnownTypeList", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "demandedSerializationFormatterPermission", $.Boolean)
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "demandedMemberAccessPermission", $.Boolean)
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "itemCount", $.Int32);

    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32);

    $.Field({Static:false, Public:false}, "streamingContext", $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean);

    $.Field({Static:false, Public:false}, "dataContractResolver", $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"));

    $.Field({Static:false, Public:false}, "knownTypeResolver", $asm08.TypeRef("System.Runtime.Serialization.KnownTypeDataContractResolver"));

    $.Field({Static:true , Public:false}, "incrementItemCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "Mode", $asm08.TypeRef("System.Runtime.Serialization.SerializationMode"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:true , Public:false}, "IncrementItemCountMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "RemainingItemCount", $.Int32);

    $.Property({Static:false, Public:false}, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:false}, "DataContractResolver", $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver"));

    $.Property({Static:false, Public:false}, "KnownTypeResolver", $asm08.TypeRef("System.Runtime.Serialization.KnownTypeDataContractResolver"));

    $.Property({Static:false, Public:false}, "SerializerKnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContext */ 

(function XmlObjectSerializerReadContext$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespaceDeclaration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNewObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNewObjectWithId", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckEndOfArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReaderDelegatorForReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReaderOverChildNodes", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlAttribute")]), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlNode")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateUnexpectedStateException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$asm0A.TypeRef("System.Xml.XmlNodeType"), $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWrapperXmlElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlNode"), [
          $asm0A.TypeRef("System.Xml.XmlDocument"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlAttribute")]), 
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Xml.XmlNode")]), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeFromExtensionData", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataNode"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EnsureArraySize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeserializedObjects", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.HybridObjectCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsGetOnlyCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetArraySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCollectionMember", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExistingObject", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExistingObjectOrExtensionData", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberIndex", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $.Int32, 
          $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberIndexWithRequiredMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetObjectId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRealObject", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Runtime.Serialization.IObjectReference"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleMemberNotFound", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnknownElement", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeExtensionDataNode", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm02.TypeRef("System.RuntimeTypeHandle"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String, $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsContentNode", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingClassExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingCollectionExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveToNextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAndResolveUnknownXmlData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributes", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadDataContractValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadExtensionDataMember", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember"), [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadExtensionDataValue", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadExtensionDataValue", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadIfNullOrRef", 
      new JSIL.MethodSignature($.String, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIXmlSerializable", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadIXmlSerializable", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlSerializableReader"), $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
          $asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadPrimitiveExtensionDataValue", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadRootIXmlSerializable", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSerializationInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownClassData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ClassDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownCollectionData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.CollectionDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownISerializableData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ISerializableDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownPrimitiveData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownXmlData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReplaceDeserializedObject", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceScopedKnownTypesTop", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromTypeName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsGetOnlyCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipUnknownElement", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartReadExtensionDataValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreCollectionMemberInfo", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowArrayExceededSizeException", 
      new JSIL.MethodSignature(null, [$.Int32, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowNullValueReturnedForGetOnlyCollectionException", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowRequiredMemberMissingException", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimArraySize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryHandleNullOrRef", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "attributes", $asm08.TypeRef("System.Runtime.Serialization.Attributes"));

    $.Field({Static:false, Public:false}, "deserializedObjects", $asm08.TypeRef("System.Runtime.Serialization.HybridObjectCache"));

    $.Field({Static:false, Public:false}, "xmlSerializableReader", $asm08.TypeRef("System.Runtime.Serialization.XmlSerializableReader"));

    $.Field({Static:false, Public:false}, "xmlDocument", $asm0A.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "attributesInXmlData", $asm08.TypeRef("System.Runtime.Serialization.Attributes"));

    $.Field({Static:false, Public:false}, "extensionDataReader", $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"));

    $.Field({Static:false, Public:false}, "getOnlyCollectionValue", $.Object);

    $.Field({Static:false, Public:false}, "isGetOnlyCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "DeserializedObjects", $asm08.TypeRef("System.Runtime.Serialization.HybridObjectCache"));

    $.Property({Static:false, Public:false}, "Document", $asm0A.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsGetOnlyCollection", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerWriteContext */ 

(function XmlObjectSerializerWriteContext$Members () {
  var $, $thisType;



































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerWriteContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"), $asm02.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsGetOnlyCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializedObjects", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ObjectToIdCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnsafeTypeForwardingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDefaultValue", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHasValue", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Nullable`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNullableValue", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Nullable`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Runtime.Serialization.ISerializable"), $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HandleGraphAtTopLevel", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementArrayCount", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementCollectionCount", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementCollectionCount", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementCollectionCountGeneric", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InternalSerializeReference", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndHandleReference", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnHandleIsReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnHandleReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeAndVerifyType", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $.Boolean, 
          $asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeWithoutXsiType", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiType", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type"), 
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiTypeAtTopLevel", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsGetOnlyCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreIsGetOnlyCollection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowRequiredMemberMustBeEmitted", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWriteDeserializedExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.IDataNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArraySize", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDataContractValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionClassData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionCollectionData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.CollectionDataNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteExtensionData", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionDataMember", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataMember")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteExtensionDataTypeInfo", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.IDataNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionDataValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.IDataNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionISerializableData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.ISerializableDataNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionXmlData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.XmlDataNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteISerializable", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Runtime.Serialization.ISerializable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIXmlSerializable", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteIXmlSerializable", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.XmlSerializableWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteNull", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNull", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $.Boolean, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNull", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteResolvedTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteRootIXmlSerializable", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSerializationInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm03.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm03.TypeRef("System.Uri"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.Field({Static:false, Public:false}, "byValObjectsInScope", $asm08.TypeRef("System.Runtime.Serialization.ObjectReferenceStack"));

    $.Field({Static:false, Public:false}, "xmlSerializableWriter", $asm08.TypeRef("System.Runtime.Serialization.XmlSerializableWriter"));

    $.Constant({Static:true , Public:false}, "depthToCheckCyclicReference", $.Int32, 512);

    $.Field({Static:false, Public:false}, "preserveObjectReferences", $.Boolean);

    $.Field({Static:false, Public:false}, "serializedObjects", $asm08.TypeRef("System.Runtime.Serialization.ObjectToIdCache"));

    $.Field({Static:false, Public:false}, "isGetOnlyCollection", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "unsafeTypeForwardingEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "serializeReadOnlyTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "SerializedObjects", $asm08.TypeRef("System.Runtime.Serialization.ObjectToIdCache"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "SerializeReadOnlyTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "UnsafeTypeForwardingEnabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.XmlFormatClassWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatClassWriterDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Object"), 
      $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")
    ]));

/* delegate System.Runtime.Serialization.XmlFormatCollectionWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Object"), 
      $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext"), $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
    ]));

/* class System.Runtime.Serialization.XmlFormatWriterGenerator */ 

(function XmlFormatWriterGenerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatWriterGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.XmlFormatWriterGenerator+CriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlFormatWriterGenerator+CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatWriterGenerator+CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfConflictingMembersHaveDifferentTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfMemberHasConflict", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.DataMember"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerialized", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerializing", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMemberValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedsPrefix", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfCannotSerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfCannotSerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfCannotSerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnwrapNullableObject", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClass", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"));

    $.Field({Static:false, Public:false}, "xmlWriterArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "contextArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "dataContractArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "objectLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "contractNamespacesLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "memberNamesLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "childElementNamespacesLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "typeIndex", $.Int32);

    $.Field({Static:false, Public:false}, "childElementIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex */ 

(function XmlObjectSerializerReadContextComplex$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfTypeSerializable", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfTypeSerializableForSharedTypeMode", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckTypeForwardedTo", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Assembly"), $asm02.TypeRef("System.Reflection.Assembly"), 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.SerializationMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetArraySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm02.TypeRef("System.RuntimeTypeHandle"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserializeInSharedTypeMode", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm02.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserializeWithSurrogate", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm02.TypeRef("System.Type"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromTypeName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractInSharedTypeMode", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.Assembly")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractTypeInSharedTypeMode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.Assembly")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveSimpleAssemblyName", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Assembly"), [$asm02.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveSimpleAssemblyName", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.Field({Static:true , Public:false}, "dataContractTypeCache", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "preserveObjectReferences", $.Boolean);

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Field({Static:false, Public:false}, "mode", $asm08.TypeRef("System.Runtime.Serialization.SerializationMode"));

    $.Field({Static:false, Public:false}, "binder", $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Field({Static:false, Public:false}, "surrogateSelector", $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.Field({Static:false, Public:false}, "assemblyFormat", $asm02.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"));

    $.Field({Static:false, Public:false}, "surrogateDataContracts", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false, Virtual:true }, "Mode", $asm08.TypeRef("System.Runtime.Serialization.SerializationMode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex+TopLevelAssemblyTypeResolver */ 

(function TopLevelAssemblyTypeResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex+TopLevelAssemblyTypeResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $asm02.TypeRef("System.Reflection.Assembly"), $.String, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "topLevelAssembly", $asm02.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex+XmlObjectDataContractTypeInfo */ 

(function XmlObjectDataContractTypeInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex+XmlObjectDataContractTypeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Assembly"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assembly", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "assembly", $asm02.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Assembly", $asm02.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex+XmlObjectDataContractTypeKey */ 

(function XmlObjectDataContractTypeKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex+XmlObjectDataContractTypeKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "assemblyName", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex */ 

(function XmlObjectSerializerWriteContextComplex$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"), $asm02.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfTypeSerializable", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfTypeSerializableForSharedTypeMode", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.SerializationMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSerializeWithSurrogate", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndHandleReference", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnHandleReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArraySize", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm03.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm03.TypeRef("System.Uri"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Field({Static:false, Public:false}, "mode", $asm08.TypeRef("System.Runtime.Serialization.SerializationMode"));

    $.Field({Static:false, Public:false}, "binder", $asm02.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Field({Static:false, Public:false}, "surrogateSelector", $asm02.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.Field({Static:false, Public:false}, "streamingContext", $asm02.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Field({Static:false, Public:false}, "surrogateDataContracts", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false, Virtual:true }, "Mode", $asm08.TypeRef("System.Runtime.Serialization.SerializationMode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlReaderDelegator */ 

(function XmlReaderDelegator$Members () {
  var $, $thisType;













































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlReaderDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckActualArrayLength", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckExpectedArrayLength", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidPrimitiveTypeException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Normalized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingExtensionDataReader", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ExtensionDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingReader", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WhitespaceHandling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WhitespaceHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayLengthQuota", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0A.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceURI", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToContent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQualifiedName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsAnyType", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsQName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsShort", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsSignedByte", 
      JSIL.MethodSignature.Return($.SByte)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsSingle", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUnsignedByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUnsignedInt", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsUnsignedLong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUnsignedShort", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUri", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsAnyType", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsQName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsShort", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsSignedByte", 
      JSIL.MethodSignature.Return($.SByte)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsTimeSpan", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUnsignedByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUnsignedInt", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsUnsignedLong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUnsignedShort", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUri", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadExtensionData", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Normalized", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WhitespaceHandling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.WhitespaceHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowConversionException", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowNotAtElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToShort", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadBooleanArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Boolean])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDateTimeArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDecimalArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDoubleArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt32Array", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int32])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt64Array", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int64])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSingleArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Single])])
        ])
    );

    $.Field({Static:false, Public:false}, "reader", $asm0A.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "dictionaryReader", $asm08.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Field({Static:false, Public:false}, "isEndOfEmptyElement", $.Boolean);

    $.Property({Static:false, Public:false}, "UnderlyingReader", $asm0A.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "UnderlyingExtensionDataReader", $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataReader"));

    $.Property({Static:false, Public:false}, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Normalized", $.Boolean);

    $.Property({Static:false, Public:false}, "WhitespaceHandling", $asm0A.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "Value", $.String);

    $.Property({Static:false, Public:false}, "ValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Depth", $.Int32);

    $.Property({Static:false, Public:false}, "EOF", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlSerializableReader */ 

(function XmlSerializableReader$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Runtime.Serialization.XmlSerializableReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginRead", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerReader", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0A.TypeRef("System.Xml.IXmlLineInfo"), "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0A.TypeRef("System.Xml.IXmlLineInfo"), "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.Xml.IXmlLineInfo"), "HasLineInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_Normalized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.Xml.Serialization.IXmlTextParser"), "get_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WhitespaceHandling"))
    )
      .Overrides($asm0A.TypeRef("System.Xml.Serialization.IXmlTextParser"), "get_WhitespaceHandling");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_Normalized", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.Xml.Serialization.IXmlTextParser"), "set_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.WhitespaceHandling"))
    )
      .Overrides($asm0A.TypeRef("System.Xml.Serialization.IXmlTextParser"), "set_WhitespaceHandling");

    $.Field({Static:false, Public:false}, "xmlReader", $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"));

    $.Field({Static:false, Public:false}, "startDepth", $.Int32);

    $.Field({Static:false, Public:false}, "isRootEmptyElement", $.Boolean);

    $.Field({Static:false, Public:false}, "innerReader", $asm0A.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "InnerReader", $asm0A.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0A.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0A.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0A.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0A.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0A.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.Normalized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.WhitespaceHandling", $asm0A.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0A.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm0A.TypeRef("System.Xml.Serialization.IXmlTextParser")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Serialization.XmlSerializableServices */ 

(function XmlSerializableServices$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Runtime.Serialization.XmlSerializableServices", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AddDefaultSchema", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadNodes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlNode")]), [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteNodes", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlNode")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ReadNodesMethodName", $.String, "ReadNodes");

    $.Field({Static:true , Public:false}, "WriteNodesMethodName", $.String, "WriteNodes");

    $.Field({Static:true , Public:false}, "AddDefaultSchemaMethodName", $.String, "AddDefaultSchema");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlSerializableWriter */ 

(function XmlSerializableWriter$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Runtime.Serialization.XmlSerializableWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginWrite", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndWrite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "xmlWriter", $asm0A.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "obj", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlWriterDelegator */ 

(function XmlWriterDelegator$Members () {
  var $, $thisType;






















































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlWriterDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidPrimitiveTypeException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAnyType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeBool", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeBoolValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeInt", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeIntValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedNameValue", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedNameValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeStringValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeStringValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBoolean", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBooleanArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteChar", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDateTime", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.DateTime"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDateTimeArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDecimal", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Decimal"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDecimalArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDouble", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [
          $.Double, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDoubleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Double]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElementPrimitive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFloat", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteFloat", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteGuid", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Guid"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteInt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteInt", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteInt32Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteInt64Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int64]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLong", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteLong", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteNamespaceDecl", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteQName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteShort", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteShort", 
      new JSIL.MethodSignature(null, [
          $.Int16, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSignedByte", 
      JSIL.MethodSignature.Action($.SByte)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteSignedByte", 
      new JSIL.MethodSignature(null, [
          $.SByte, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteSingleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElementPrimitive", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTimeSpan", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.TimeSpan"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedByte", 
      new JSIL.MethodSignature(null, [
          $.Byte, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedInt", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedInt", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedLong", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedLong", 
      new JSIL.MethodSignature(null, [
          $.UInt64, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedShort", 
      JSIL.MethodSignature.Action($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedShort", 
      new JSIL.MethodSignature(null, [
          $.UInt16, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUri", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.Field({Static:false, Public:false}, "writer", $asm0A.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "dictionaryWriter", $asm08.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "prefixes", $.Int32);

    $.Constant({Static:true , Public:false}, "CharChunkSize", $.Int32, 76);

    $.Constant({Static:true , Public:false}, "ByteChunkSize", $.Int32, 57);

    $.Property({Static:false, Public:false}, "Writer", $asm0A.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "WriteState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:false}, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CodeExporter */ 

(function CodeExporter$Members () {
  var $, $thisType;

































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CodeExporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"), $asm08.TypeRef("System.Runtime.Serialization.ImportOptions"), 
          $asm03.TypeRef("System.CodeDom.CodeCompileUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBaseMemberNames", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddExtensionData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddGlobalTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImportStatement", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.CodeDom.CodeNamespace")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKnownTypeContracts", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddKnownTypes", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddNamespaceFragment", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespacePair", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPropertyChangedNotifier", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferencedAssembly", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSerializableAttribute", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), 
          $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToNamespace", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendToValidClrIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanDeclareAssemblyAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm03.TypeRef("System.CodeDom.CodeTypeReference"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm03.TypeRef("System.CodeDom.CodeTypeReference"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTypeDeclaration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$.String, $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Export", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ExportClassDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportClassDataContractHierarchy", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportCollectionDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.EnumDataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportISerializableDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportXmlDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateKeyValueType", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateType", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClrNamespaces", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeTypeIPropertyChange", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeTypeReference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableDataBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataObjectField", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberField"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataObjectProperty", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberProperty"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileExtension", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateInternalTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateSerializableTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericDictionaryContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericDictionaryName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericListContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericListName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetObjectDataMethod", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetSchemaMethod", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetSchemaStaticMethod", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ISerializableBaseConstructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ISerializableDerivedConstructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeArrayField", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberField"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeArrayProperty", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberProperty"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NullReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodePrimitiveExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PropertyChangedEvent", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RaisePropertyChangedEventMethod", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadXmlMethod", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializableAttribute", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeAttributeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationInfoField", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberField"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationInfoParameter", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationInfoProperty", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberProperty"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamingContextParameter", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsAssemblyAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsDeclareEvents", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsDeclareValueTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsGenericTypeReference", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsNestedTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsPartialTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ThisReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeThisReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteXmlMethod", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetClrNamespace", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeNamespace", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeNamespace"), [
          $.String, $.String, 
          $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContractCodeDomInfo", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementTypeReference", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypeContracts", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypeContracts", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypeReferences", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm03.TypeRef("System.CodeDom.CodeTypeReference")]), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberName", 
      new JSIL.MethodSignature($.String, [$.String, $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameForAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedCollectionType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedGenericType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm08.TypeRef("System.Runtime.Serialization.GenericInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogatedTypeReference", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GlobalTypeNameConflicts", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasDefaultCollectionNames", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeProcessImportedType", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.CollectionBase"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidStart", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "NamespaceContainsType", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.CodeDom.CodeNamespace"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedsExplicitNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfReferencedBaseTypeSealed", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedDictionaryType", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.CodeDom.CodeTypeReference")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedListType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.CodeDom.CodeTypeReference")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeContainsNestedType", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapNullable", 
      new JSIL.MethodSignature($asm03.TypeRef("System.CodeDom.CodeTypeReference"), [$asm03.TypeRef("System.CodeDom.CodeTypeReference")])
    );

    $.Field({Static:false, Public:false}, "dataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm03.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Field({Static:false, Public:false}, "options", $asm08.TypeRef("System.Runtime.Serialization.ImportOptions"));

    $.Field({Static:false, Public:false}, "namespaces", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "clrNamespaces", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "wildcardNamespaceMapping", $.String, "*");

    $.Field({Static:true , Public:false, ReadOnly:true }, "typeNameFieldName", $.String, "typeName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "codeUserDataActualTypeKey", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "surrogateDataKey", $.Object, function ($pi) {
        return $asm08.System.Runtime.Serialization.IDataContractSurrogate.__Type__;
      });

    $.Constant({Static:true , Public:false}, "MaxIdentifierLength", $.Int32, 511);

    $.Property({Static:false, Public:false}, "GenerateSerializableTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "GenerateInternalTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "EnableDataBinding", $.Boolean);

    $.Property({Static:false, Public:false}, "CodeProvider", $asm03.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:false}, "SupportsDeclareEvents", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsDeclareValueTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsGenericTypeReference", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsAssemblyAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsPartialTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsNestedTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "FileExtension", $.String);

    $.Property({Static:false, Public:false}, "Namespaces", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "ClrNamespaces", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "GenericListName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericListContract", $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    $.Property({Static:false, Public:false}, "GenericDictionaryName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericDictionaryContract", $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    $.Property({Static:false, Public:false}, "CodeTypeIPropertyChange", $asm03.TypeRef("System.CodeDom.CodeTypeReference"));

    $.Property({Static:false, Public:false}, "ThisReference", $asm03.TypeRef("System.CodeDom.CodeThisReferenceExpression"));

    $.Property({Static:false, Public:false}, "NullReference", $asm03.TypeRef("System.CodeDom.CodePrimitiveExpression"));

    $.Property({Static:false, Public:false}, "SerializationInfoParameter", $asm03.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"));

    $.Property({Static:false, Public:false}, "StreamingContextParameter", $asm03.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"));

    $.Property({Static:false, Public:false}, "SerializableAttribute", $asm03.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

    $.Property({Static:false, Public:false}, "NodeArrayProperty", $asm03.TypeRef("System.CodeDom.CodeMemberProperty"));

    $.Property({Static:false, Public:false}, "NodeArrayField", $asm03.TypeRef("System.CodeDom.CodeMemberField"));

    $.Property({Static:false, Public:false}, "ReadXmlMethod", $asm03.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "WriteXmlMethod", $asm03.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "GetSchemaMethod", $asm03.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "GetSchemaStaticMethod", $asm03.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "ISerializableBaseConstructor", $asm03.TypeRef("System.CodeDom.CodeConstructor"));

    $.Property({Static:false, Public:false}, "ISerializableDerivedConstructor", $asm03.TypeRef("System.CodeDom.CodeConstructor"));

    $.Property({Static:false, Public:false}, "SerializationInfoField", $asm03.TypeRef("System.CodeDom.CodeMemberField"));

    $.Property({Static:false, Public:false}, "SerializationInfoProperty", $asm03.TypeRef("System.CodeDom.CodeMemberProperty"));

    $.Property({Static:false, Public:false}, "GetObjectDataMethod", $asm03.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "ExtensionDataObjectField", $asm03.TypeRef("System.CodeDom.CodeMemberField"));

    $.Property({Static:false, Public:false}, "ExtensionDataObjectProperty", $asm03.TypeRef("System.CodeDom.CodeMemberProperty"));

    $.Property({Static:false, Public:false}, "RaisePropertyChangedEventMethod", $asm03.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "PropertyChangedEvent", $asm03.TypeRef("System.CodeDom.CodeMemberEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ContractCodeDomInfo */ 

(function ContractCodeDomInfo$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ContractCodeDomInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClrNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ClrNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "IsProcessed", $.Boolean);

    $.Field({Static:false, Public:false}, "TypeDeclaration", $asm03.TypeRef("System.CodeDom.CodeTypeDeclaration"));

    $.Field({Static:false, Public:false}, "TypeReference", $asm03.TypeRef("System.CodeDom.CodeTypeReference"));

    $.Field({Static:false, Public:false}, "CodeNamespace", $asm03.TypeRef("System.CodeDom.CodeNamespace"));

    $.Field({Static:false, Public:false}, "ReferencedTypeExists", $.Boolean);

    $.Field({Static:false, Public:false}, "UsesWildcardNamespace", $.Boolean);

    $.Field({Static:false, Public:false}, "clrNamespace", $.String);

    $.Field({Static:false, Public:false}, "memberNames", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false}, "ClrNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContractSet */ 

(function DataContractSet$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]), 
          $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddClassDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCollectionDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKnownDataContracts", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferencedType", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Object]), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureTypeNotGeneric", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Contracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownTypesForObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessedContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SurrogateDataTable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContractCodeDomInfo", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItemTypeDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberTypeDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedCollectionTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogateData", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdd", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsContractProcessed", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeReferenceable", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_KnownTypesForObject", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContractCodeDomInfo", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContractProcessed", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSurrogateData", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedCollectionType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.Field({Static:false, Public:false}, "contracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "processedContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Object]));

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Field({Static:false, Public:false}, "surrogateDataTable", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "knownTypesForObject", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "referencedTypes", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "referencedCollectionTypes", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "referencedTypesDictionary", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Object]));

    $.Field({Static:false, Public:false}, "referencedCollectionTypesDictionary", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.Object]));

    $.Property({Static:false, Public:false}, "Contracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "ProcessedContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Object]));

    $.Property({Static:false, Public:false}, "SurrogateDataTable", $asm02.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "KnownTypesForObject", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Serialization.ExportOptions */ 

(function ExportOptions$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ExportOptions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataContractSurrogate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.Field({Static:false, Public:false}, "knownTypes", $asm02.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "KnownTypes", $asm02.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ImportOptions */ 

(function ImportOptions$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ImportOptions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeProvider", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableDataBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateInternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateSerializable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImportXmlType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedCollectionTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeProvider", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataContractSurrogate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableDataBinding", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateInternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateSerializable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ImportXmlType", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "generateSerializable", $.Boolean);

    $.Field({Static:false, Public:false}, "generateInternal", $.Boolean);

    $.Field({Static:false, Public:false}, "enableDataBinding", $.Boolean);

    $.Field({Static:false, Public:false}, "codeProvider", $asm03.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Field({Static:false, Public:false}, "referencedTypes", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "referencedCollectionTypes", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "namespaces", $asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "importXmlType", $.Boolean);

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "GenerateSerializable", $.Boolean);

    $.Property({Static:false, Public:true }, "GenerateInternal", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableDataBinding", $.Boolean);

    $.Property({Static:false, Public:true }, "CodeProvider", $asm03.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:true }, "ReferencedTypes", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "ReferencedCollectionTypes", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "Namespaces", $asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "ImportXmlType", $.Boolean);

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaExporter */ 

(function SchemaExporter$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SchemaExporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm08.TypeRef("System.Runtime.Serialization.DataContractSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDefaultDatasetType", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDefaultTypedDatasetType", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDefaultXmlType", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferenceAttributes", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfMemberHasConflict", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAnyElementType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAnyType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeContent", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchema")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Export", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportActualType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportActualType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportClassDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportCollectionDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEmitDefaultValue", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.EnumDataContract"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportGenericInfo", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportIsDictionary", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportISerializableDataContract", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportSerializationSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportSurrogateData", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTopLevelElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportXmlDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ActualTypeAnnotationName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_AnytypeQualifiedName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultEnumBaseTypeName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultValueAnnotation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EnumerationValueAnnotationName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IdAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsDictionaryAnnotationName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ISerializableFactoryTypeAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ISerializableSequence", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ISerializableWildcardElement", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaAny"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsValueTypeName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_RefAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StringQualifiedName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SurrogateDataAnnotationName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlDoc", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnnotationMarkup", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchema")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultEnumValue", 
      new JSIL.MethodSignature($.Int64, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchema"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaAnnotation", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchema")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaAnnotation", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlNode")])])
    )
      .Parameter(0, "nodes", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetXmlTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeGetSchemaMethod", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeSchemaProviderMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSpecialXmlType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReprocessAll", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetElementType", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchema")
        ])
    );

    $.Field({Static:false, Public:false}, "schemas", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "xmlDoc", $asm0A.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "dataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Field({Static:true , Public:false}, "anytypeQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "stringQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "defaultEnumBaseTypeName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "enumerationValueAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "surrogateDataAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "defaultValueAnnotation", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "actualTypeAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isDictionaryAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isValueTypeName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "Schemas", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "XmlDoc", $asm0A.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:true , Public:false}, "ISerializableSequence", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"));

    $.Property({Static:true , Public:false}, "ISerializableWildcardElement", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAny"));

    $.Property({Static:true , Public:false}, "AnytypeQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "StringQualifiedName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "DefaultEnumBaseTypeName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "EnumerationValueAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "SurrogateDataAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "DefaultValueAnnotation", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "ActualTypeAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "IsDictionaryAnnotationName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "IsValueTypeName", $asm0A.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "ISerializableFactoryTypeAttribute", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:true , Public:false}, "RefAttribute", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:true , Public:false}, "IdAttribute", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaObjectInfo */ 

(function SchemaObjectInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SchemaObjectInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchema"), $asm02.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")])
        ])
    );

    $.Field({Static:false, Public:false}, "type", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "element", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Field({Static:false, Public:false}, "schema", $asm0A.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "knownTypes", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaHelper */ 

(function SchemaHelper$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("System.Runtime.Serialization.SchemaHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddElementForm", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSchemaImport", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSchema", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGlobalElementDeclaration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Xml.Schema.XmlSchema")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaWithGlobalElementDeclaration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaWithType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Schema.XmlSchema"), [
          $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NamespacesEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaImporter */ 

(function SchemaImporter$Members () {
  var $, $thisType;



























































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SchemaImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDataContract", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckComplexType", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfElementUsesUnsupportedConstructs", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfISerializable", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckISerializableBase", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompileSchemaSet", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRedefineList", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSchemaObjects", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RedefineList", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaObjects", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseTypeName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGenericInfoForDataMember", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.GenericInfo"), [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInnerText", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Import", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportActualType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportAnnotation", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlElement"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnonymousElement", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnonymousGlobalElement", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributes", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportBaseContract", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportClass", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportClassMember", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportCollection", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportDataContractExtension", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEmitDefaultValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Boolean]), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnum", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.EnumDataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction"), 
          $.Boolean, $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportFlagsEnum", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.EnumDataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGenericInfo", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportGenericInfo", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.GenericInfo"), [$asm0A.TypeRef("System.Xml.XmlElement"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportISerializable", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportKnownTypes", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportKnownTypesForObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSimpleTypeRestriction", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSpecialXmlDataType", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSurrogateData", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTopLevelElement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
          $asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportXmlDataType", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsDictionary", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsISerializableDerived", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSequence")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsObjectContract", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlAnyElementType", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlAnyType", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFailedContract", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveOptionalUnknownSerializationElements", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowArrayTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowEnumTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowISerializableTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowTypeCannotBeImportedException", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCheckIfAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm0A.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), 
          $asm0A.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "dataContractSet", $asm08.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Field({Static:false, Public:false}, "schemaSet", $asm0A.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "typeNames", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:false, Public:false}, "elements", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaElement")]));

    $.Field({Static:false, Public:false}, "elementTypeNames", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:false, Public:false}, "importXmlDataType", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaObjects", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]));

    $.Field({Static:false, Public:false}, "redefineList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]));

    $.Field({Static:false, Public:false}, "needToImportKnownTypesForObject", $.Boolean);

    $.Field({Static:true , Public:false}, "serializationSchemaElements", $asm02.TypeRef("System.Collections.Hashtable"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "SchemaObjects", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]));

    $.Property({Static:false, Public:false}, "RedefineList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TypeInformation */ 

(function TypeInformation$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.TypeInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FullTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTypeForwardedFrom", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "fullTypeName", $.String);

    $.Field({Static:false, Public:false}, "assemblyString", $.String);

    $.Field({Static:false, Public:false}, "hasTypeForwardedFrom", $.Boolean);

    $.Property({Static:false, Public:false}, "FullTypeName", $.String);

    $.Property({Static:false, Public:false}, "AssemblyString", $.String);

    $.Property({Static:false, Public:false}, "HasTypeForwardedFrom", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.BitFlagsGenerator */ 

(function BitFlagsGenerator$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.BitFlagsGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBitCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBitValue", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetByteIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBitSet", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "SetBit", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Store", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "bitCount", $.Int32);

    $.Field({Static:false, Public:false}, "ilg", $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"));

    $.Field({Static:false, Public:false}, "locals", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.JsonFormatGeneratorStatics */ 

(function JsonFormatGeneratorStatics$Members () {
  var $, $thisType;





































  JSIL.MakeStaticClass("System.Runtime.Serialization.JsonFormatGeneratorStatics", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_BoxPointer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_CollectionItemNameProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ExtensionDataObjectCtor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ExtensionDataProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetCurrentMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetItemContractMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetJsonDataContractMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetJsonMemberIndexMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetJsonMemberNameMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetRevisedItemContractMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetUninitializedObjectMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_IsStartElementMethod0", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_IsStartElementMethod2", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_LocalNameProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MoveNextMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MoveToContentMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_NamespaceProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_NodeTypeProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_OnDeserializationMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ParseEnumMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ReadJsonValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_SerializationExceptionCtor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_SerInfoCtorArgs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ThrowDuplicateMemberExceptionMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ThrowMissingRequiredMembersMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_TypeHandleProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnboxPointer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UseSimpleDictionaryFormatReadProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UseSimpleDictionaryFormatWriteProperty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteAttributeStringMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteEndElementMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteJsonISerializableMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteJsonNameWithMappingMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteJsonValueMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteStartElementMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteStartElementStringMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "boxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "collectionItemNameProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "extensionDataObjectCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "extensionDataProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getItemContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getJsonDataContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getJsonMemberIndexMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getRevisedItemContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getUninitializedObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "ienumeratorGetCurrentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "ienumeratorMoveNextMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isStartElementMethod0", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isStartElementMethod2", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "localNameProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "namespaceProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "moveToContentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "nodeTypeProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "onDeserializationMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "readJsonValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "serializationExceptionCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "serInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwDuplicateMemberExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "throwMissingRequiredMembersMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "typeHandleProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "unboxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "useSimpleDictionaryFormatReadProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "useSimpleDictionaryFormatWriteProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeAttributeStringMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeEndElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeJsonISerializableMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeJsonNameWithMappingMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeJsonValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeStartElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeStartElementStringMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "parseEnumMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "getJsonMemberNameMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:true , Public:true }, "BoxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "CollectionItemNameProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "ExtensionDataObjectCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:true }, "ExtensionDataProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "GetCurrentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetItemContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetJsonDataContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetJsonMemberIndexMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetRevisedItemContractMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetUninitializedObjectMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "IsStartElementMethod0", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "IsStartElementMethod2", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "LocalNameProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "NamespaceProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "MoveNextMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "MoveToContentMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "NodeTypeProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "OnDeserializationMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "ReadJsonValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "SerializationExceptionCtor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:true }, "SerInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:true , Public:true }, "ThrowDuplicateMemberExceptionMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "ThrowMissingRequiredMembersMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "TypeHandleProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "UnboxPointer", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "UseSimpleDictionaryFormatReadProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "UseSimpleDictionaryFormatWriteProperty", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "WriteAttributeStringMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteEndElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteJsonISerializableMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteJsonNameWithMappingMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteJsonValueMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteStartElementMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteStartElementStringMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "ParseEnumMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetJsonMemberNameMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.LocalAppContextSwitches */ 

(function LocalAppContextSwitches$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Runtime.Serialization.LocalAppContextSwitches", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_DoNotUseEcmaScriptV6EscapeControlCharacter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DoNotUseTimeZoneInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "DoNotUseTimeZoneInfoString", $.String, "Switch.System.Runtime.Serialization.DoNotUseTimeZoneInfo");

    $.Field({Static:true , Public:false}, "doNotUseTimeZoneInfoString", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DoNotUseEcmaScriptV6EscapeControlCharacterKeyString", $.String, "Switch.System.Runtime.Serialization.DoNotUseECMAScriptV6EscapeControlCharacter");

    $.Field({Static:true , Public:false}, "doNotUseEcmaScriptV6EscapeControlCharacter", $.Int32);

    $.Property({Static:true , Public:true }, "DoNotUseTimeZoneInfo", $.Boolean);

    $.Property({Static:true , Public:true }, "DoNotUseEcmaScriptV6EscapeControlCharacter", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.FxTrace */ 

(function FxTrace$Members () {
  var $, $thisType;























  JSIL.MakeStaticClass("System.Runtime.Serialization.FxTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureEtwProviderInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EventLog", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.Diagnostics.EventLogger"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EventSourceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.ExceptionTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCriticalToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceErrorToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformationToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerboseToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarningToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Trace", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm09.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEnabledEventsList", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UpdateEventDefinitions", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.UInt16])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Action($asm09.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "baseEventSourceName", $.String, "System.Runtime.Serialization");

    $.Constant({Static:true , Public:false}, "EventSourceVersion", $.String, "4.0.0.0");

    $.Field({Static:true , Public:false}, "etwProviderId", $asm02.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "eventSourceName", $.String);

    $.Field({Static:true , Public:false}, "exceptionTrace", $asm09.TypeRef("System.Runtime.ExceptionTrace"));

    $.Field({Static:true , Public:false}, "enabledEvents", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false}, "end2EndEvents", $asm03.TypeRef("System.Collections.Generic.SortedSet`1", [$.UInt16]));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerboseToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformationToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarningToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceErrorToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCriticalToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm09.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));


    function FxTrace__cctor () {
      $thisType.etwProviderId = new $asm02.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      FxTrace__cctor
    );

    $.Property({Static:true , Public:true }, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:true }, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerbose", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceCriticalToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceErrorToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformationToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerboseToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarningToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "Exception", $asm09.TypeRef("System.Runtime.ExceptionTrace"));

    $.Property({Static:true , Public:true }, "Trace", $asm09.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));

    $.Property({Static:true , Public:true }, "EventLog", $asm09.TypeRef("System.Runtime.Diagnostics.EventLogger"));

    $.Property({Static:true , Public:false}, "EventSourceName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.FxTrace+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.FxTrace+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInitializeTracing$gb__54_0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__54_0", $asm02.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.Serialization.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Runtime.Serialization.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Runtime.Serialization.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Runtime.Serialization.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Runtime.Serialization.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "AbstractElementNotSupported", $.String, "AbstractElementNotSupported");

    $.Constant({Static:true , Public:false}, "AbstractTypeNotSupported", $.String, "AbstractTypeNotSupported");

    $.Constant({Static:true , Public:false}, "AmbiguousReferencedTypes1", $.String, "AmbiguousReferencedTypes1");

    $.Constant({Static:true , Public:false}, "AmbiguousReferencedTypes3", $.String, "AmbiguousReferencedTypes3");

    $.Constant({Static:true , Public:false}, "AmbiguousReferencedCollectionTypes1", $.String, "AmbiguousReferencedCollectionTypes1");

    $.Constant({Static:true , Public:false}, "AmbiguousReferencedCollectionTypes3", $.String, "AmbiguousReferencedCollectionTypes3");

    $.Constant({Static:true , Public:false}, "AnnotationAttributeNotFound", $.String, "AnnotationAttributeNotFound");

    $.Constant({Static:true , Public:false}, "AnonymousTypeNotSupported", $.String, "AnonymousTypeNotSupported");

    $.Constant({Static:true , Public:false}, "AnyAttributeNotSupported", $.String, "AnyAttributeNotSupported");

    $.Constant({Static:true , Public:false}, "ArrayExceededSizeAttribute", $.String, "ArrayExceededSizeAttribute");

    $.Constant({Static:true , Public:false}, "ArrayExceededSize", $.String, "ArrayExceededSize");

    $.Constant({Static:true , Public:false}, "ArraySizeXmlMismatch", $.String, "ArraySizeXmlMismatch");

    $.Constant({Static:true , Public:false}, "ArrayItemFormMustBe", $.String, "ArrayItemFormMustBe");

    $.Constant({Static:true , Public:false}, "ArraySizeAttributeIncorrect", $.String, "ArraySizeAttributeIncorrect");

    $.Constant({Static:true , Public:false}, "ArrayTypeCannotBeImported", $.String, "ArrayTypeCannotBeImported");

    $.Constant({Static:true , Public:false}, "ArrayTypeIsNotSupported", $.String, "ArrayTypeIsNotSupported");

    $.Constant({Static:true , Public:false}, "AssemblyNotFound", $.String, "AssemblyNotFound");

    $.Constant({Static:true , Public:false}, "AttributeNotFound", $.String, "AttributeNotFound");

    $.Constant({Static:true , Public:false}, "BaseTypeNotISerializable", $.String, "BaseTypeNotISerializable");

    $.Constant({Static:true , Public:false}, "CLRNamespaceMappedMultipleTimes", $.String, "CLRNamespaceMappedMultipleTimes");

    $.Constant({Static:true , Public:false}, "CallbackMustReturnVoid", $.String, "CallbackMustReturnVoid");

    $.Constant({Static:true , Public:false}, "CallbackParameterInvalid", $.String, "CallbackParameterInvalid");

    $.Constant({Static:true , Public:false}, "CallbacksCannotBeVirtualMethods", $.String, "CallbacksCannotBeVirtualMethods");

    $.Constant({Static:true , Public:false}, "CanOnlyStoreIntoArgOrLocGot0", $.String, "CanOnlyStoreIntoArgOrLocGot0");

    $.Constant({Static:true , Public:false}, "CannotComputeUniqueName", $.String, "CannotComputeUniqueName");

    $.Constant({Static:true , Public:false}, "CannotDeriveFromSealedReferenceType", $.String, "CannotDeriveFromSealedReferenceType");

    $.Constant({Static:true , Public:false}, "CannotDeserializeForwardedType", $.String, "CannotDeserializeForwardedType");

    $.Constant({Static:true , Public:false}, "CannotDeserializeRefAtTopLevel", $.String, "CannotDeserializeRefAtTopLevel");

    $.Constant({Static:true , Public:false}, "CannotExportNullAssembly", $.String, "CannotExportNullAssembly");

    $.Constant({Static:true , Public:false}, "CannotExportNullKnownType", $.String, "CannotExportNullKnownType");

    $.Constant({Static:true , Public:false}, "CannotExportNullType", $.String, "CannotExportNullType");

    $.Constant({Static:true , Public:false}, "CannotHaveDuplicateElementNames", $.String, "CannotHaveDuplicateElementNames");

    $.Constant({Static:true , Public:false}, "CannotHaveDuplicateAttributeNames", $.String, "CannotHaveDuplicateAttributeNames");

    $.Constant({Static:true , Public:false}, "CannotImportInvalidSchemas", $.String, "CannotImportInvalidSchemas");

    $.Constant({Static:true , Public:false}, "CannotImportNullDataContractName", $.String, "CannotImportNullDataContractName");

    $.Constant({Static:true , Public:false}, "CannotImportNullSchema", $.String, "CannotImportNullSchema");

    $.Constant({Static:true , Public:false}, "CannotLoadMemberType", $.String, "CannotLoadMemberType");

    $.Constant({Static:true , Public:false}, "CannotSerializeObjectWithCycles", $.String, "CannotSerializeObjectWithCycles");

    $.Constant({Static:true , Public:false}, "CannotSetMembersForReferencedType", $.String, "CannotSetMembersForReferencedType");

    $.Constant({Static:true , Public:false}, "CannotSetNamespaceForReferencedType", $.String, "CannotSetNamespaceForReferencedType");

    $.Constant({Static:true , Public:false}, "CannotUseGenericTypeAsBase", $.String, "CannotUseGenericTypeAsBase");

    $.Constant({Static:true , Public:false}, "CharIsInvalidPrimitive", $.String, "CharIsInvalidPrimitive");

    $.Constant({Static:true , Public:false}, "CircularTypeReference", $.String, "CircularTypeReference");

    $.Constant({Static:true , Public:false}, "ClrTypeNotFound", $.String, "ClrTypeNotFound");

    $.Constant({Static:true , Public:false}, "CollectionTypeCannotBeBuiltIn", $.String, "CollectionTypeCannotBeBuiltIn");

    $.Constant({Static:true , Public:false}, "CollectionTypeIsNotIEnumerable", $.String, "CollectionTypeIsNotIEnumerable");

    $.Constant({Static:true , Public:false}, "CollectionTypeDoesNotHaveDefaultCtor", $.String, "CollectionTypeDoesNotHaveDefaultCtor");

    $.Constant({Static:true , Public:false}, "CollectionTypeDoesNotHaveAddMethod", $.String, "CollectionTypeDoesNotHaveAddMethod");

    $.Constant({Static:true , Public:false}, "CollectionTypeHasMultipleDefinitionsOfInterface", $.String, "CollectionTypeHasMultipleDefinitionsOfInterface");

    $.Constant({Static:true , Public:false}, "CollectionTypeCannotHaveDataContract", $.String, "CollectionTypeCannotHaveDataContract");

    $.Constant({Static:true , Public:false}, "CollectionMustHaveGetEnumeratorMethod", $.String, "CollectionMustHaveGetEnumeratorMethod");

    $.Constant({Static:true , Public:false}, "CollectionMustHaveAddMethod", $.String, "CollectionMustHaveAddMethod");

    $.Constant({Static:true , Public:false}, "CollectionMustHaveItemType", $.String, "CollectionMustHaveItemType");

    $.Constant({Static:true , Public:false}, "ComplexTypeRestrictionNotSupported", $.String, "ComplexTypeRestrictionNotSupported");

    $.Constant({Static:true , Public:false}, "ConfigIndexOutOfRange", $.String, "ConfigIndexOutOfRange");

    $.Constant({Static:true , Public:false}, "ConfigMustSetTypeOrIndex", $.String, "ConfigMustSetTypeOrIndex");

    $.Constant({Static:true , Public:false}, "ConfigMustOnlySetTypeOrIndex", $.String, "ConfigMustOnlySetTypeOrIndex");

    $.Constant({Static:true , Public:false}, "ConfigMustOnlyAddParamsWithType", $.String, "ConfigMustOnlyAddParamsWithType");

    $.Constant({Static:true , Public:false}, "ConfigDataContractSerializerSectionLoadError", $.String, "ConfigDataContractSerializerSectionLoadError");

    $.Constant({Static:true , Public:false}, "CouldNotReadSerializationSchema", $.String, "CouldNotReadSerializationSchema");

    $.Constant({Static:true , Public:false}, "DataContractCacheOverflow", $.String, "DataContractCacheOverflow");

    $.Constant({Static:true , Public:false}, "DataContractNamespaceAlreadySet", $.String, "DataContractNamespaceAlreadySet");

    $.Constant({Static:true , Public:false}, "DataContractNamespaceIsNotValid", $.String, "DataContractNamespaceIsNotValid");

    $.Constant({Static:true , Public:false}, "DataContractNamespaceReserved", $.String, "DataContractNamespaceReserved");

    $.Constant({Static:true , Public:false}, "DataMemberOnEnumField", $.String, "DataMemberOnEnumField");

    $.Constant({Static:true , Public:false}, "DcTypeNotFoundOnDeserialize", $.String, "DcTypeNotFoundOnDeserialize");

    $.Constant({Static:true , Public:false}, "DcTypeNotFoundOnSerialize", $.String, "DcTypeNotFoundOnSerialize");

    $.Constant({Static:true , Public:false}, "DcTypeNotResolvedOnDeserialize", $.String, "DcTypeNotResolvedOnDeserialize");

    $.Constant({Static:true , Public:false}, "DefaultOnElementNotSupported", $.String, "DefaultOnElementNotSupported");

    $.Constant({Static:true , Public:false}, "DerivedTypeNotISerializable", $.String, "DerivedTypeNotISerializable");

    $.Constant({Static:true , Public:false}, "DeserializedObjectWithIdNotFound", $.String, "DeserializedObjectWithIdNotFound");

    $.Constant({Static:true , Public:false}, "DupContractInDataContractSet", $.String, "DupContractInDataContractSet");

    $.Constant({Static:true , Public:false}, "DupContractInKnownTypes", $.String, "DupContractInKnownTypes");

    $.Constant({Static:true , Public:false}, "DupEnumMemberValue", $.String, "DupEnumMemberValue");

    $.Constant({Static:true , Public:false}, "DupKeyValueName", $.String, "DupKeyValueName");

    $.Constant({Static:true , Public:false}, "DupMemberName", $.String, "DupMemberName");

    $.Constant({Static:true , Public:false}, "DupTypeContractInDataContractSet", $.String, "DupTypeContractInDataContractSet");

    $.Constant({Static:true , Public:false}, "DuplicateAttribute", $.String, "DuplicateAttribute");

    $.Constant({Static:true , Public:false}, "DuplicateCallback", $.String, "DuplicateCallback");

    $.Constant({Static:true , Public:false}, "DuplicateExtensionDataSetMethod", $.String, "DuplicateExtensionDataSetMethod");

    $.Constant({Static:true , Public:false}, "ElementMaxOccursMustBe", $.String, "ElementMaxOccursMustBe");

    $.Constant({Static:true , Public:false}, "ElementMinOccursMustBe", $.String, "ElementMinOccursMustBe");

    $.Constant({Static:true , Public:false}, "ElementRefOnLocalElementNotSupported", $.String, "ElementRefOnLocalElementNotSupported");

    $.Constant({Static:true , Public:false}, "EnumListInAnonymousTypeNotSupported", $.String, "EnumListInAnonymousTypeNotSupported");

    $.Constant({Static:true , Public:false}, "EnumListMustContainAnonymousType", $.String, "EnumListMustContainAnonymousType");

    $.Constant({Static:true , Public:false}, "EnumOnlyEnumerationFacetsSupported", $.String, "EnumOnlyEnumerationFacetsSupported");

    $.Constant({Static:true , Public:false}, "EnumEnumerationFacetsMustHaveValue", $.String, "EnumEnumerationFacetsMustHaveValue");

    $.Constant({Static:true , Public:false}, "EnumRestrictionInvalid", $.String, "EnumRestrictionInvalid");

    $.Constant({Static:true , Public:false}, "EnumTypeCannotBeImported", $.String, "EnumTypeCannotBeImported");

    $.Constant({Static:true , Public:false}, "EnumTypeCannotHaveIsReference", $.String, "EnumTypeCannotHaveIsReference");

    $.Constant({Static:true , Public:false}, "EnumUnionInAnonymousTypeNotSupported", $.String, "EnumUnionInAnonymousTypeNotSupported");

    $.Constant({Static:true , Public:false}, "ErrorInLine", $.String, "ErrorInLine");

    $.Constant({Static:true , Public:false}, "ErrorIsStartObject", $.String, "ErrorIsStartObject");

    $.Constant({Static:true , Public:false}, "ErrorDeserializing", $.String, "ErrorDeserializing");

    $.Constant({Static:true , Public:false}, "ErrorSerializing", $.String, "ErrorSerializing");

    $.Constant({Static:true , Public:false}, "ErrorWriteStartObject", $.String, "ErrorWriteStartObject");

    $.Constant({Static:true , Public:false}, "ErrorWriteEndObject", $.String, "ErrorWriteEndObject");

    $.Constant({Static:true , Public:false}, "ErrorTypeInfo", $.String, "ErrorTypeInfo");

    $.Constant({Static:true , Public:false}, "ExceededMaxItemsQuota", $.String, "ExceededMaxItemsQuota");

    $.Constant({Static:true , Public:false}, "ExpectingElement", $.String, "ExpectingElement");

    $.Constant({Static:true , Public:false}, "ExpectingElementAtDeserialize", $.String, "ExpectingElementAtDeserialize");

    $.Constant({Static:true , Public:false}, "ExpectingEnd", $.String, "ExpectingEnd");

    $.Constant({Static:true , Public:false}, "ExpectingState", $.String, "ExpectingState");

    $.Constant({Static:true , Public:false}, "EncounteredWithNameNamespace", $.String, "EncounteredWithNameNamespace");

    $.Constant({Static:true , Public:false}, "FactoryObjectContainsSelfReference", $.String, "FactoryObjectContainsSelfReference");

    $.Constant({Static:true , Public:false}, "FactoryTypeNotISerializable", $.String, "FactoryTypeNotISerializable");

    $.Constant({Static:true , Public:false}, "FixedOnElementNotSupported", $.String, "FixedOnElementNotSupported");

    $.Constant({Static:true , Public:false}, "FormMustBeQualified", $.String, "FormMustBeQualified");

    $.Constant({Static:true , Public:false}, "GenericAnnotationAttributeNotFound", $.String, "GenericAnnotationAttributeNotFound");

    $.Constant({Static:true , Public:false}, "GenericAnnotationForNestedLevelMustBeIncreasing", $.String, "GenericAnnotationForNestedLevelMustBeIncreasing");

    $.Constant({Static:true , Public:false}, "GenericAnnotationHasInvalidAttributeValue", $.String, "GenericAnnotationHasInvalidAttributeValue");

    $.Constant({Static:true , Public:false}, "GenericAnnotationHasInvalidElement", $.String, "GenericAnnotationHasInvalidElement");

    $.Constant({Static:true , Public:false}, "GenericNameBraceMismatch", $.String, "GenericNameBraceMismatch");

    $.Constant({Static:true , Public:false}, "GenericParameterNotValid", $.String, "GenericParameterNotValid");

    $.Constant({Static:true , Public:false}, "GenericTypeNameMismatch", $.String, "GenericTypeNameMismatch");

    $.Constant({Static:true , Public:false}, "GenericTypeNotExportable", $.String, "GenericTypeNotExportable");

    $.Constant({Static:true , Public:false}, "GetOnlyCollectionMustHaveAddMethod", $.String, "GetOnlyCollectionMustHaveAddMethod");

    $.Constant({Static:true , Public:false}, "GetRealObjectReturnedNull", $.String, "GetRealObjectReturnedNull");

    $.Constant({Static:true , Public:false}, "InconsistentIsReference", $.String, "InconsistentIsReference");

    $.Constant({Static:true , Public:false}, "IsAnyCannotBeNull", $.String, "IsAnyCannotBeNull");

    $.Constant({Static:true , Public:false}, "IsAnyNotSupportedByNetDataContractSerializer", $.String, "IsAnyNotSupportedByNetDataContractSerializer");

    $.Constant({Static:true , Public:false}, "IsAnyCannotBeSerializedAsDerivedType", $.String, "IsAnyCannotBeSerializedAsDerivedType");

    $.Constant({Static:true , Public:false}, "IsAnyCannotHaveXmlRoot", $.String, "IsAnyCannotHaveXmlRoot");

    $.Constant({Static:true , Public:false}, "ISerializableAssemblyNameSetToZero", $.String, "ISerializableAssemblyNameSetToZero");

    $.Constant({Static:true , Public:false}, "ISerializableCannotHaveDataContract", $.String, "ISerializableCannotHaveDataContract");

    $.Constant({Static:true , Public:false}, "ISerializableContainsMoreThanOneItems", $.String, "ISerializableContainsMoreThanOneItems");

    $.Constant({Static:true , Public:false}, "ISerializableDerivedContainsOneOrMoreItems", $.String, "ISerializableDerivedContainsOneOrMoreItems");

    $.Constant({Static:true , Public:false}, "ISerializableDoesNotContainAny", $.String, "ISerializableDoesNotContainAny");

    $.Constant({Static:true , Public:false}, "ISerializableMustRefFactoryTypeAttribute", $.String, "ISerializableMustRefFactoryTypeAttribute");

    $.Constant({Static:true , Public:false}, "ISerializableTypeCannotBeImported", $.String, "ISerializableTypeCannotBeImported");

    $.Constant({Static:true , Public:false}, "ISerializableWildcardMaxOccursMustBe", $.String, "ISerializableWildcardMaxOccursMustBe");

    $.Constant({Static:true , Public:false}, "ISerializableWildcardMinOccursMustBe", $.String, "ISerializableWildcardMinOccursMustBe");

    $.Constant({Static:true , Public:false}, "ISerializableWildcardNamespaceInvalid", $.String, "ISerializableWildcardNamespaceInvalid");

    $.Constant({Static:true , Public:false}, "ISerializableWildcardProcessContentsInvalid", $.String, "ISerializableWildcardProcessContentsInvalid");

    $.Constant({Static:true , Public:false}, "IndexedPropertyCannotBeSerialized", $.String, "IndexedPropertyCannotBeSerialized");

    $.Constant({Static:true , Public:false}, "InterfaceTypeCannotBeCreated", $.String, "InterfaceTypeCannotBeCreated");

    $.Constant({Static:true , Public:false}, "InvalidAnnotationExpectingText", $.String, "InvalidAnnotationExpectingText");

    $.Constant({Static:true , Public:false}, "InvalidAssemblyFormat", $.String, "InvalidAssemblyFormat");

    $.Constant({Static:true , Public:false}, "InvalidClassDerivation", $.String, "InvalidClassDerivation");

    $.Constant({Static:true , Public:false}, "InvalidClrNameGeneratedForISerializable", $.String, "InvalidClrNameGeneratedForISerializable");

    $.Constant({Static:true , Public:false}, "InvalidClrNamespaceGeneratedForISerializable", $.String, "InvalidClrNamespaceGeneratedForISerializable");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractItemName", $.String, "InvalidCollectionContractItemName");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractKeyName", $.String, "InvalidCollectionContractKeyName");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractKeyNoDictionary", $.String, "InvalidCollectionContractKeyNoDictionary");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractName", $.String, "InvalidCollectionContractName");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractNamespace", $.String, "InvalidCollectionContractNamespace");

    $.Constant({Static:true , Public:false}, "InvalidCollectionDataContract", $.String, "InvalidCollectionDataContract");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractValueName", $.String, "InvalidCollectionContractValueName");

    $.Constant({Static:true , Public:false}, "InvalidCollectionContractValueNoDictionary", $.String, "InvalidCollectionContractValueNoDictionary");

    $.Constant({Static:true , Public:false}, "InvalidCollectionType", $.String, "InvalidCollectionType");

    $.Constant({Static:true , Public:false}, "InvalidDataContractName", $.String, "InvalidDataContractName");

    $.Constant({Static:true , Public:false}, "InvalidDataContractNamespace", $.String, "InvalidDataContractNamespace");

    $.Constant({Static:true , Public:false}, "InvalidDataMemberName", $.String, "InvalidDataMemberName");

    $.Constant({Static:true , Public:false}, "InvalidDataNode", $.String, "InvalidDataNode");

    $.Constant({Static:true , Public:false}, "InvalidEmitDefaultAnnotation", $.String, "InvalidEmitDefaultAnnotation");

    $.Constant({Static:true , Public:false}, "InvalidEnumBaseType", $.String, "InvalidEnumBaseType");

    $.Constant({Static:true , Public:false}, "InvalidEnumMemberValue", $.String, "InvalidEnumMemberValue");

    $.Constant({Static:true , Public:false}, "InvalidEnumValueOnWrite", $.String, "InvalidEnumValueOnWrite");

    $.Constant({Static:true , Public:false}, "InvalidEnumValueOnRead", $.String, "InvalidEnumValueOnRead");

    $.Constant({Static:true , Public:false}, "InvalidGetSchemaMethod", $.String, "InvalidGetSchemaMethod");

    $.Constant({Static:true , Public:false}, "InvalidGlobalDataContractNamespace", $.String, "InvalidGlobalDataContractNamespace");

    $.Constant({Static:true , Public:false}, "InvalidInclusivePrefixListCollection", $.String, "InvalidInclusivePrefixListCollection");

    $.Constant({Static:true , Public:false}, "InvalidISerializableDerivation", $.String, "InvalidISerializableDerivation");

    $.Constant({Static:true , Public:false}, "InvalidIdDefinition", $.String, "InvalidIdDefinition");

    $.Constant({Static:true , Public:false}, "InvalidKeyValueType", $.String, "InvalidKeyValueType");

    $.Constant({Static:true , Public:false}, "InvalidKeyValueTypeNamespace", $.String, "InvalidKeyValueTypeNamespace");

    $.Constant({Static:true , Public:false}, "InvalidMember", $.String, "InvalidMember");

    $.Constant({Static:true , Public:false}, "InvalidLocalNameEmpty", $.String, "InvalidLocalNameEmpty");

    $.Constant({Static:true , Public:false}, "InvalidNodeType", $.String, "InvalidNodeType");

    $.Constant({Static:true , Public:false}, "InvalidNonNullReturnValueByIsAny", $.String, "InvalidNonNullReturnValueByIsAny");

    $.Constant({Static:true , Public:false}, "InvalidPrimitiveType", $.String, "InvalidPrimitiveType");

    $.Constant({Static:true , Public:false}, "InvalidRefDefinition", $.String, "InvalidRefDefinition");

    $.Constant({Static:true , Public:false}, "InvalidReturnTypeOnGetSchemaMethod", $.String, "InvalidReturnTypeOnGetSchemaMethod");

    $.Constant({Static:true , Public:false}, "InvalidReturnSchemaOnGetSchemaMethod", $.String, "InvalidReturnSchemaOnGetSchemaMethod");

    $.Constant({Static:true , Public:false}, "InvalidSizeDefinition", $.String, "InvalidSizeDefinition");

    $.Constant({Static:true , Public:false}, "InvalidStateInExtensionDataReader", $.String, "InvalidStateInExtensionDataReader");

    $.Constant({Static:true , Public:false}, "InvalidXmlDataContractName", $.String, "InvalidXmlDataContractName");

    $.Constant({Static:true , Public:false}, "InvalidXmlDeserializingExtensionData", $.String, "InvalidXmlDeserializingExtensionData");

    $.Constant({Static:true , Public:false}, "InvalidXsIdDefinition", $.String, "InvalidXsIdDefinition");

    $.Constant({Static:true , Public:false}, "InvalidXsRefDefinition", $.String, "InvalidXsRefDefinition");

    $.Constant({Static:true , Public:false}, "InvalidXmlQualifiedNameValue", $.String, "InvalidXmlQualifiedNameValue");

    $.Constant({Static:true , Public:false}, "IsNotAssignableFrom", $.String, "IsNotAssignableFrom");

    $.Constant({Static:true , Public:false}, "IsDictionaryFormattedIncorrectly", $.String, "IsDictionaryFormattedIncorrectly");

    $.Constant({Static:true , Public:false}, "IsRequiredDataMemberOnIsReferenceDataContractType", $.String, "IsRequiredDataMemberOnIsReferenceDataContractType");

    $.Constant({Static:true , Public:false}, "IsValueTypeFormattedIncorrectly", $.String, "IsValueTypeFormattedIncorrectly");

    $.Constant({Static:true , Public:false}, "IXmlSerializableCannotHaveCollectionDataContract", $.String, "IXmlSerializableCannotHaveCollectionDataContract");

    $.Constant({Static:true , Public:false}, "IXmlSerializableCannotHaveDataContract", $.String, "IXmlSerializableCannotHaveDataContract");

    $.Constant({Static:true , Public:false}, "IXmlSerializableIllegalOperation", $.String, "IXmlSerializableIllegalOperation");

    $.Constant({Static:true , Public:false}, "IXmlSerializableMustHaveDefaultConstructor", $.String, "IXmlSerializableMustHaveDefaultConstructor");

    $.Constant({Static:true , Public:false}, "IXmlSerializableWritePastSubTree", $.String, "IXmlSerializableWritePastSubTree");

    $.Constant({Static:true , Public:false}, "IXmlSerializableMissingEndElements", $.String, "IXmlSerializableMissingEndElements");

    $.Constant({Static:true , Public:false}, "PartialTrustIXmlSerializableTypeNotPublic", $.String, "PartialTrustIXmlSerializableTypeNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustIXmlSerialzableNoPublicConstructor", $.String, "PartialTrustIXmlSerialzableNoPublicConstructor");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractTypeNotPublic", $.String, "PartialTrustDataContractTypeNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustISerializableNoPublicConstructor", $.String, "PartialTrustISerializableNoPublicConstructor");

    $.Constant({Static:true , Public:false}, "PartialTrustNonAttributedSerializableTypeNoPublicConstructor", $.String, "PartialTrustNonAttributedSerializableTypeNoPublicConstructor");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnSerializingNotPublic", $.String, "PartialTrustDataContractOnSerializingNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnSerializedNotPublic", $.String, "PartialTrustDataContractOnSerializedNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnDeserializingNotPublic", $.String, "PartialTrustDataContractOnDeserializingNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnDeserializedNotPublic", $.String, "PartialTrustDataContractOnDeserializedNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractFieldGetNotPublic", $.String, "PartialTrustDataContractFieldGetNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractFieldSetNotPublic", $.String, "PartialTrustDataContractFieldSetNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractPropertyGetNotPublic", $.String, "PartialTrustDataContractPropertyGetNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustDataContractPropertySetNotPublic", $.String, "PartialTrustDataContractPropertySetNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustCollectionContractTypeNotPublic", $.String, "PartialTrustCollectionContractTypeNotPublic");

    $.Constant({Static:true , Public:false}, "PartialTrustCollectionContractNoPublicConstructor", $.String, "PartialTrustCollectionContractNoPublicConstructor");

    $.Constant({Static:true , Public:false}, "PartialTrustCollectionContractAddMethodNotPublic", $.String, "PartialTrustCollectionContractAddMethodNotPublic");

    $.Constant({Static:true , Public:false}, "NonAttributedSerializableTypesMustHaveDefaultConstructor", $.String, "NonAttributedSerializableTypesMustHaveDefaultConstructor");

    $.Constant({Static:true , Public:false}, "AttributedTypesCannotInheritFromNonAttributedSerializableTypes", $.String, "AttributedTypesCannotInheritFromNonAttributedSerializableTypes");

    $.Constant({Static:true , Public:false}, "ClassDataContractReturnedForGetOnlyCollection", $.String, "ClassDataContractReturnedForGetOnlyCollection");

    $.Constant({Static:true , Public:false}, "IsReferenceGetOnlyCollectionsNotSupported", $.String, "IsReferenceGetOnlyCollectionsNotSupported");

    $.Constant({Static:true , Public:false}, "SurrogatesWithGetOnlyCollectionsNotSupported", $.String, "SurrogatesWithGetOnlyCollectionsNotSupported");

    $.Constant({Static:true , Public:false}, "SurrogatesWithGetOnlyCollectionsNotSupportedSerDeser", $.String, "SurrogatesWithGetOnlyCollectionsNotSupportedSerDeser");

    $.Constant({Static:true , Public:false}, "NullValueReturnedForGetOnlyCollection", $.String, "NullValueReturnedForGetOnlyCollection");

    $.Constant({Static:true , Public:false}, "KeyTypeCannotBeParsedInSimpleDictionary", $.String, "KeyTypeCannotBeParsedInSimpleDictionary");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeEmptyString", $.String, "KnownTypeAttributeEmptyString");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeUnknownMethod", $.String, "KnownTypeAttributeUnknownMethod");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeReturnType", $.String, "KnownTypeAttributeReturnType");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeOneScheme", $.String, "KnownTypeAttributeOneScheme");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeValidMethodTypes", $.String, "KnownTypeAttributeValidMethodTypes");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeNoData", $.String, "KnownTypeAttributeNoData");

    $.Constant({Static:true , Public:false}, "KnownTypeAttributeMethodNull", $.String, "KnownTypeAttributeMethodNull");

    $.Constant({Static:true , Public:false}, "KnownTypeConfigObject", $.String, "KnownTypeConfigObject");

    $.Constant({Static:true , Public:false}, "KnownTypeConfigClosedGenericDeclared", $.String, "KnownTypeConfigClosedGenericDeclared");

    $.Constant({Static:true , Public:false}, "KnownTypeConfigGenericParamMismatch", $.String, "KnownTypeConfigGenericParamMismatch");

    $.Constant({Static:true , Public:false}, "KnownTypeConfigIndexOutOfBoundsZero", $.String, "KnownTypeConfigIndexOutOfBoundsZero");

    $.Constant({Static:true , Public:false}, "KnownTypeConfigIndexOutOfBounds", $.String, "KnownTypeConfigIndexOutOfBounds");

    $.Constant({Static:true , Public:false}, "MaxArrayLengthExceeded", $.String, "MaxArrayLengthExceeded");

    $.Constant({Static:true , Public:false}, "MixedContentNotSupported", $.String, "MixedContentNotSupported");

    $.Constant({Static:true , Public:false}, "MissingGetSchemaMethod", $.String, "MissingGetSchemaMethod");

    $.Constant({Static:true , Public:false}, "MissingSchemaType", $.String, "MissingSchemaType");

    $.Constant({Static:true , Public:false}, "MultipleIdDefinition", $.String, "MultipleIdDefinition");

    $.Constant({Static:true , Public:false}, "MustContainOnlyLocalElements", $.String, "MustContainOnlyLocalElements");

    $.Constant({Static:true , Public:false}, "NameCannotBeNullOrEmpty", $.String, "NameCannotBeNullOrEmpty");

    $.Constant({Static:true , Public:false}, "NoConversionPossibleTo", $.String, "NoConversionPossibleTo");

    $.Constant({Static:true , Public:false}, "NoGetMethodForProperty", $.String, "NoGetMethodForProperty");

    $.Constant({Static:true , Public:false}, "NoSetMethodForProperty", $.String, "NoSetMethodForProperty");

    $.Constant({Static:true , Public:false}, "NonOptionalFieldMemberOnIsReferenceSerializableType", $.String, "NonOptionalFieldMemberOnIsReferenceSerializableType");

    $.Constant({Static:true , Public:false}, "NullKnownType", $.String, "NullKnownType");

    $.Constant({Static:true , Public:false}, "ObjectTableOverflow", $.String, "ObjectTableOverflow");

    $.Constant({Static:true , Public:false}, "OnlyDataContractTypesCanHaveExtensionData", $.String, "OnlyDataContractTypesCanHaveExtensionData");

    $.Constant({Static:true , Public:false}, "OrderCannotBeNegative", $.String, "OrderCannotBeNegative");

    $.Constant({Static:true , Public:false}, "OutParametersMustBeByRefTypeReceived", $.String, "OutParametersMustBeByRefTypeReceived");

    $.Constant({Static:true , Public:false}, "ParameterCountMismatch", $.String, "ParameterCountMismatch");

    $.Constant({Static:true , Public:false}, "QueryGeneratorPathToMemberNotFound", $.String, "QueryGeneratorPathToMemberNotFound");

    $.Constant({Static:true , Public:false}, "QuotaMustBePositive", $.String, "QuotaMustBePositive");

    $.Constant({Static:true , Public:false}, "QuotaIsReadOnly", $.String, "QuotaIsReadOnly");

    $.Constant({Static:true , Public:false}, "QuotaCopyReadOnly", $.String, "QuotaCopyReadOnly");

    $.Constant({Static:true , Public:false}, "ReadOnlyClassDeserialization", $.String, "ReadOnlyClassDeserialization");

    $.Constant({Static:true , Public:false}, "ReadOnlyCollectionDeserialization", $.String, "ReadOnlyCollectionDeserialization");

    $.Constant({Static:true , Public:false}, "RecursiveCollectionType", $.String, "RecursiveCollectionType");

    $.Constant({Static:true , Public:false}, "RedefineNotSupported", $.String, "RedefineNotSupported");

    $.Constant({Static:true , Public:false}, "ReferencedBaseTypeDoesNotExist", $.String, "ReferencedBaseTypeDoesNotExist");

    $.Constant({Static:true , Public:false}, "ReferencedCollectionTypesCannotContainNull", $.String, "ReferencedCollectionTypesCannotContainNull");

    $.Constant({Static:true , Public:false}, "ReferencedTypeDoesNotMatch", $.String, "ReferencedTypeDoesNotMatch");

    $.Constant({Static:true , Public:false}, "ReferencedTypeMatchingMessage", $.String, "ReferencedTypeMatchingMessage");

    $.Constant({Static:true , Public:false}, "ReferencedTypeNotMatchingMessage", $.String, "ReferencedTypeNotMatchingMessage");

    $.Constant({Static:true , Public:false}, "ReferencedTypesCannotContainNull", $.String, "ReferencedTypesCannotContainNull");

    $.Constant({Static:true , Public:false}, "RequiredMemberMustBeEmitted", $.String, "RequiredMemberMustBeEmitted");

    $.Constant({Static:true , Public:false}, "RequiresClassDataContractToSetIsISerializable", $.String, "RequiresClassDataContractToSetIsISerializable");

    $.Constant({Static:true , Public:false}, "ResolveTypeReturnedFalse", $.String, "ResolveTypeReturnedFalse");

    $.Constant({Static:true , Public:false}, "ResolveTypeReturnedNull", $.String, "ResolveTypeReturnedNull");

    $.Constant({Static:true , Public:false}, "RootParticleMustBeSequence", $.String, "RootParticleMustBeSequence");

    $.Constant({Static:true , Public:false}, "RootSequenceMaxOccursMustBe", $.String, "RootSequenceMaxOccursMustBe");

    $.Constant({Static:true , Public:false}, "RootSequenceMustBeRequired", $.String, "RootSequenceMustBeRequired");

    $.Constant({Static:true , Public:false}, "SerializationInfo_ConstructorNotFound", $.String, "SerializationInfo_ConstructorNotFound");

    $.Constant({Static:true , Public:false}, "SimpleContentNotSupported", $.String, "SimpleContentNotSupported");

    $.Constant({Static:true , Public:false}, "SimpleTypeRestrictionDoesNotSpecifyBase", $.String, "SimpleTypeRestrictionDoesNotSpecifyBase");

    $.Constant({Static:true , Public:false}, "SimpleTypeUnionNotSupported", $.String, "SimpleTypeUnionNotSupported");

    $.Constant({Static:true , Public:false}, "SpecifiedTypeNotFoundInSchema", $.String, "SpecifiedTypeNotFoundInSchema");

    $.Constant({Static:true , Public:false}, "SubstitutionGroupOnElementNotSupported", $.String, "SubstitutionGroupOnElementNotSupported");

    $.Constant({Static:true , Public:false}, "SupportForMultidimensionalArraysNotPresent", $.String, "SupportForMultidimensionalArraysNotPresent");

    $.Constant({Static:true , Public:false}, "TooManyCollectionContracts", $.String, "TooManyCollectionContracts");

    $.Constant({Static:true , Public:false}, "TooManyDataContracts", $.String, "TooManyDataContracts");

    $.Constant({Static:true , Public:false}, "TooManyDataMembers", $.String, "TooManyDataMembers");

    $.Constant({Static:true , Public:false}, "TooManyEnumMembers", $.String, "TooManyEnumMembers");

    $.Constant({Static:true , Public:false}, "TooManyIgnoreDataMemberAttributes", $.String, "TooManyIgnoreDataMemberAttributes");

    $.Constant({Static:true , Public:false}, "TopLevelElementRepresentsDifferentType", $.String, "TopLevelElementRepresentsDifferentType");

    $.Constant({Static:true , Public:false}, "TraceCodeElementIgnored", $.String, "TraceCodeElementIgnored");

    $.Constant({Static:true , Public:false}, "TraceCodeFactoryTypeNotFound", $.String, "TraceCodeFactoryTypeNotFound");

    $.Constant({Static:true , Public:false}, "TraceCodeObjectWithLargeDepth", $.String, "TraceCodeObjectWithLargeDepth");

    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectBegin", $.String, "TraceCodeWriteObjectBegin");

    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectEnd", $.String, "TraceCodeWriteObjectEnd");

    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectContentBegin", $.String, "TraceCodeWriteObjectContentBegin");

    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectContentEnd", $.String, "TraceCodeWriteObjectContentEnd");

    $.Constant({Static:true , Public:false}, "TraceCodeReadObjectBegin", $.String, "TraceCodeReadObjectBegin");

    $.Constant({Static:true , Public:false}, "TraceCodeReadObjectEnd", $.String, "TraceCodeReadObjectEnd");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportAnnotationFailed", $.String, "TraceCodeXsdExportAnnotationFailed");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportBegin", $.String, "TraceCodeXsdExportBegin");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportDupItems", $.String, "TraceCodeXsdExportDupItems");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportEnd", $.String, "TraceCodeXsdExportEnd");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportError", $.String, "TraceCodeXsdExportError");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportAnnotationFailed", $.String, "TraceCodeXsdImportAnnotationFailed");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportBegin", $.String, "TraceCodeXsdImportBegin");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportEnd", $.String, "TraceCodeXsdImportEnd");

    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportError", $.String, "TraceCodeXsdImportError");

    $.Constant({Static:true , Public:false}, "TypeCannotBeForwardedFrom", $.String, "TypeCannotBeForwardedFrom");

    $.Constant({Static:true , Public:false}, "TypeCannotBeImported", $.String, "TypeCannotBeImported");

    $.Constant({Static:true , Public:false}, "TypeCannotBeImportedHowToFix", $.String, "TypeCannotBeImportedHowToFix");

    $.Constant({Static:true , Public:false}, "TypeHasNotBeenImported", $.String, "TypeHasNotBeenImported");

    $.Constant({Static:true , Public:false}, "TypeMustBeIXmlSerializable", $.String, "TypeMustBeIXmlSerializable");

    $.Constant({Static:true , Public:false}, "TypeNotSerializable", $.String, "TypeNotSerializable");

    $.Constant({Static:true , Public:false}, "TypeMustNotBeOpenGeneric", $.String, "TypeMustNotBeOpenGeneric");

    $.Constant({Static:true , Public:false}, "TypeMustBeConcrete", $.String, "TypeMustBeConcrete");

    $.Constant({Static:true , Public:false}, "TypeShouldNotContainAttributes", $.String, "TypeShouldNotContainAttributes");

    $.Constant({Static:true , Public:false}, "UnexpectedContractType", $.String, "UnexpectedContractType");

    $.Constant({Static:true , Public:false}, "UnexpectedElementExpectingElements", $.String, "UnexpectedElementExpectingElements");

    $.Constant({Static:true , Public:false}, "UnexpectedEndOfFile", $.String, "UnexpectedEndOfFile");

    $.Constant({Static:true , Public:false}, "UnknownConstantType", $.String, "UnknownConstantType");

    $.Constant({Static:true , Public:false}, "UnknownXmlType", $.String, "UnknownXmlType");

    $.Constant({Static:true , Public:false}, "ExtensionDataSetMustReturnVoid", $.String, "ExtensionDataSetMustReturnVoid");

    $.Constant({Static:true , Public:false}, "ExtensionDataSetParameterInvalid", $.String, "ExtensionDataSetParameterInvalid");

    $.Constant({Static:true , Public:false}, "ValueTypeCannotBeNull", $.String, "ValueTypeCannotBeNull");

    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveBaseType", $.String, "ValueTypeCannotHaveBaseType");

    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveId", $.String, "ValueTypeCannotHaveId");

    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveIsReference", $.String, "ValueTypeCannotHaveIsReference");

    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveRef", $.String, "ValueTypeCannotHaveRef");

    $.Constant({Static:true , Public:false}, "XmlForObjectCannotHaveContent", $.String, "XmlForObjectCannotHaveContent");

    $.Constant({Static:true , Public:false}, "XmlFoundElement", $.String, "XmlFoundElement");

    $.Constant({Static:true , Public:false}, "XmlFoundEndElement", $.String, "XmlFoundEndElement");

    $.Constant({Static:true , Public:false}, "XmlFoundText", $.String, "XmlFoundText");

    $.Constant({Static:true , Public:false}, "XmlFoundCData", $.String, "XmlFoundCData");

    $.Constant({Static:true , Public:false}, "XmlFoundComment", $.String, "XmlFoundComment");

    $.Constant({Static:true , Public:false}, "XmlFoundEndOfFile", $.String, "XmlFoundEndOfFile");

    $.Constant({Static:true , Public:false}, "XmlFoundNodeType", $.String, "XmlFoundNodeType");

    $.Constant({Static:true , Public:false}, "XmlCloseCData", $.String, "XmlCloseCData");

    $.Constant({Static:true , Public:false}, "XmlStartElementExpected", $.String, "XmlStartElementExpected");

    $.Constant({Static:true , Public:false}, "XmlStartElementNameExpected", $.String, "XmlStartElementNameExpected");

    $.Constant({Static:true , Public:false}, "XmlStartElementLocalNameNsExpected", $.String, "XmlStartElementLocalNameNsExpected");

    $.Constant({Static:true , Public:false}, "XmlFullStartElementExpected", $.String, "XmlFullStartElementExpected");

    $.Constant({Static:true , Public:false}, "XmlFullStartElementNameExpected", $.String, "XmlFullStartElementNameExpected");

    $.Constant({Static:true , Public:false}, "XmlFullStartElementLocalNameNsExpected", $.String, "XmlFullStartElementLocalNameNsExpected");

    $.Constant({Static:true , Public:false}, "XmlEndElementExpected", $.String, "XmlEndElementExpected");

    $.Constant({Static:true , Public:false}, "XmlMaxDepthExceeded", $.String, "XmlMaxDepthExceeded");

    $.Constant({Static:true , Public:false}, "XmlMaxStringContentLengthExceeded", $.String, "XmlMaxStringContentLengthExceeded");

    $.Constant({Static:true , Public:false}, "XmlMaxArrayLengthExceeded", $.String, "XmlMaxArrayLengthExceeded");

    $.Constant({Static:true , Public:false}, "XmlMaxArrayLengthOrMaxItemsQuotaExceeded", $.String, "XmlMaxArrayLengthOrMaxItemsQuotaExceeded");

    $.Constant({Static:true , Public:false}, "XmlMaxBytesPerReadExceeded", $.String, "XmlMaxBytesPerReadExceeded");

    $.Constant({Static:true , Public:false}, "XmlMaxNameTableCharCountExceeded", $.String, "XmlMaxNameTableCharCountExceeded");

    $.Constant({Static:true , Public:false}, "XmlBase64DataExpected", $.String, "XmlBase64DataExpected");

    $.Constant({Static:true , Public:false}, "XmlUndefinedPrefix", $.String, "XmlUndefinedPrefix");

    $.Constant({Static:true , Public:false}, "XmlProcessingInstructionNotSupported", $.String, "XmlProcessingInstructionNotSupported");

    $.Constant({Static:true , Public:false}, "XmlUnexpectedEndOfFile", $.String, "XmlUnexpectedEndOfFile");

    $.Constant({Static:true , Public:false}, "XmlUnexpectedEndElement", $.String, "XmlUnexpectedEndElement");

    $.Constant({Static:true , Public:false}, "XmlDuplicateAttribute", $.String, "XmlDuplicateAttribute");

    $.Constant({Static:true , Public:false}, "XmlInvalidFormat", $.String, "XmlInvalidFormat");

    $.Constant({Static:true , Public:false}, "XmlTokenExpected", $.String, "XmlTokenExpected");

    $.Constant({Static:true , Public:false}, "XmlTagMismatch", $.String, "XmlTagMismatch");

    $.Constant({Static:true , Public:false}, "XmlDeclNotFirst", $.String, "XmlDeclNotFirst");

    $.Constant({Static:true , Public:false}, "XmlConversionOverflow", $.String, "XmlConversionOverflow");

    $.Constant({Static:true , Public:false}, "XmlInvalidConversion", $.String, "XmlInvalidConversion");

    $.Constant({Static:true , Public:false}, "XmlInvalidUTF8Bytes", $.String, "XmlInvalidUTF8Bytes");

    $.Constant({Static:true , Public:false}, "XmlInvalidBytes", $.String, "XmlInvalidBytes");

    $.Constant({Static:true , Public:false}, "XmlEmptyNamespaceRequiresNullPrefix", $.String, "XmlEmptyNamespaceRequiresNullPrefix");

    $.Constant({Static:true , Public:false}, "XmlInvalidCharRef", $.String, "XmlInvalidCharRef");

    $.Constant({Static:true , Public:false}, "XmlInvalidFFFE", $.String, "XmlInvalidFFFE");

    $.Constant({Static:true , Public:false}, "XmlInvalidCommentChars", $.String, "XmlInvalidCommentChars");

    $.Constant({Static:true , Public:false}, "XmlInvalidDepth", $.String, "XmlInvalidDepth");

    $.Constant({Static:true , Public:false}, "XmlInvalidHighSurrogate", $.String, "XmlInvalidHighSurrogate");

    $.Constant({Static:true , Public:false}, "XmlInvalidLowSurrogate", $.String, "XmlInvalidLowSurrogate");

    $.Constant({Static:true , Public:false}, "XmlInvalidSurrogate", $.String, "XmlInvalidSurrogate");

    $.Constant({Static:true , Public:false}, "XmlMissingLowSurrogate", $.String, "XmlMissingLowSurrogate");

    $.Constant({Static:true , Public:false}, "XmlInvalidID", $.String, "XmlInvalidID");

    $.Constant({Static:true , Public:false}, "XmlInvalidOperation", $.String, "XmlInvalidOperation");

    $.Constant({Static:true , Public:false}, "XmlEndElementNoOpenNodes", $.String, "XmlEndElementNoOpenNodes");

    $.Constant({Static:true , Public:false}, "XmlInvalidPrefixState", $.String, "XmlInvalidPrefixState");

    $.Constant({Static:true , Public:false}, "XmlInvalidRootData", $.String, "XmlInvalidRootData");

    $.Constant({Static:true , Public:false}, "XmlInvalidWriteState", $.String, "XmlInvalidWriteState");

    $.Constant({Static:true , Public:false}, "XmlInvalidXmlSpace", $.String, "XmlInvalidXmlSpace");

    $.Constant({Static:true , Public:false}, "XmlInvalidXmlByte", $.String, "XmlInvalidXmlByte");

    $.Constant({Static:true , Public:false}, "XmlIDDefined", $.String, "XmlIDDefined");

    $.Constant({Static:true , Public:false}, "XmlKeyAlreadyExists", $.String, "XmlKeyAlreadyExists");

    $.Constant({Static:true , Public:false}, "XmlLineInfo", $.String, "XmlLineInfo");

    $.Constant({Static:true , Public:false}, "XmlMethodNotSupported", $.String, "XmlMethodNotSupported");

    $.Constant({Static:true , Public:false}, "XmlMultipleRootElements", $.String, "XmlMultipleRootElements");

    $.Constant({Static:true , Public:false}, "XmlWriteFunctionInvalid", $.String, "XmlWriteFunctionInvalid");

    $.Constant({Static:true , Public:false}, "XmlInvalidDeclaration", $.String, "XmlInvalidDeclaration");

    $.Constant({Static:true , Public:false}, "XmlPrefixBoundToNamespace", $.String, "XmlPrefixBoundToNamespace");

    $.Constant({Static:true , Public:false}, "XmlReservedPrefix", $.String, "XmlReservedPrefix");

    $.Constant({Static:true , Public:false}, "XmlNamespaceNotFound", $.String, "XmlNamespaceNotFound");

    $.Constant({Static:true , Public:false}, "XmlSpecificBindingNamespace", $.String, "XmlSpecificBindingNamespace");

    $.Constant({Static:true , Public:false}, "XmlSpecificBindingPrefix", $.String, "XmlSpecificBindingPrefix");

    $.Constant({Static:true , Public:false}, "XmlOnlyWhitespace", $.String, "XmlOnlyWhitespace");

    $.Constant({Static:true , Public:false}, "XmlWriterMustBeInElement", $.String, "XmlWriterMustBeInElement");

    $.Constant({Static:true , Public:false}, "XmlOnlySingleValue", $.String, "XmlOnlySingleValue");

    $.Constant({Static:true , Public:false}, "XmlWriterClosed", $.String, "XmlWriterClosed");

    $.Constant({Static:true , Public:false}, "XmlInvalidVersion", $.String, "XmlInvalidVersion");

    $.Constant({Static:true , Public:false}, "XmlInvalidEncoding", $.String, "XmlInvalidEncoding");

    $.Constant({Static:true , Public:false}, "XmlEncodingNotSupported", $.String, "XmlEncodingNotSupported");

    $.Constant({Static:true , Public:false}, "XmlInvalidStandalone", $.String, "XmlInvalidStandalone");

    $.Constant({Static:true , Public:false}, "XmlSpaceBetweenAttributes", $.String, "XmlSpaceBetweenAttributes");

    $.Constant({Static:true , Public:false}, "XmlCDATAInvalidAtTopLevel", $.String, "XmlCDATAInvalidAtTopLevel");

    $.Constant({Static:true , Public:false}, "XmlEncodingMismatch", $.String, "XmlEncodingMismatch");

    $.Constant({Static:true , Public:false}, "XmlMalformedDecl", $.String, "XmlMalformedDecl");

    $.Constant({Static:true , Public:false}, "XmlExpectedEncoding", $.String, "XmlExpectedEncoding");

    $.Constant({Static:true , Public:false}, "XmlDeclarationRequired", $.String, "XmlDeclarationRequired");

    $.Constant({Static:true , Public:false}, "XmlDeclMissingVersion", $.String, "XmlDeclMissingVersion");

    $.Constant({Static:true , Public:false}, "XmlDeclMissing", $.String, "XmlDeclMissing");

    $.Constant({Static:true , Public:false}, "XmlBadBOM", $.String, "XmlBadBOM");

    $.Constant({Static:true , Public:false}, "XmlNoRootElement", $.String, "XmlNoRootElement");

    $.Constant({Static:true , Public:false}, "XmlIllegalOutsideRoot", $.String, "XmlIllegalOutsideRoot");

    $.Constant({Static:true , Public:false}, "XmlOnlyOneRoot", $.String, "XmlOnlyOneRoot");

    $.Constant({Static:true , Public:false}, "XmlInvalidBase64Sequence", $.String, "XmlInvalidBase64Sequence");

    $.Constant({Static:true , Public:false}, "XmlInvalidBase64Length", $.String, "XmlInvalidBase64Length");

    $.Constant({Static:true , Public:false}, "XmlInvalidBinHexSequence", $.String, "XmlInvalidBinHexSequence");

    $.Constant({Static:true , Public:false}, "XmlInvalidBinHexLength", $.String, "XmlInvalidBinHexLength");

    $.Constant({Static:true , Public:false}, "XmlArrayTooSmall", $.String, "XmlArrayTooSmall");

    $.Constant({Static:true , Public:false}, "XmlArrayTooSmallInput", $.String, "XmlArrayTooSmallInput");

    $.Constant({Static:true , Public:false}, "XmlArrayTooSmallOutput", $.String, "XmlArrayTooSmallOutput");

    $.Constant({Static:true , Public:false}, "XmlInvalidQualifiedName", $.String, "XmlInvalidQualifiedName");

    $.Constant({Static:true , Public:false}, "XmlInvalidUniqueId", $.String, "XmlInvalidUniqueId");

    $.Constant({Static:true , Public:false}, "XmlInvalidStream", $.String, "XmlInvalidStream");

    $.Constant({Static:true , Public:false}, "XmlNestedArraysNotSupported", $.String, "XmlNestedArraysNotSupported");

    $.Constant({Static:true , Public:false}, "XmlCanonicalizationStarted", $.String, "XmlCanonicalizationStarted");

    $.Constant({Static:true , Public:false}, "XmlCanonicalizationNotStarted", $.String, "XmlCanonicalizationNotStarted");

    $.Constant({Static:true , Public:false}, "XmlElementAttributes", $.String, "XmlElementAttributes");

    $.Constant({Static:true , Public:false}, "ValueMustBeNonNegative", $.String, "ValueMustBeNonNegative");

    $.Constant({Static:true , Public:false}, "OffsetExceedsBufferSize", $.String, "OffsetExceedsBufferSize");

    $.Constant({Static:true , Public:false}, "SizeExceedsRemainingBufferSpace", $.String, "SizeExceedsRemainingBufferSpace");

    $.Constant({Static:true , Public:false}, "XmlDictionaryStringIDRange", $.String, "XmlDictionaryStringIDRange");

    $.Constant({Static:true , Public:false}, "XmlDictionaryStringIDUndefinedSession", $.String, "XmlDictionaryStringIDUndefinedSession");

    $.Constant({Static:true , Public:false}, "XmlDictionaryStringIDUndefinedStatic", $.String, "XmlDictionaryStringIDUndefinedStatic");

    $.Constant({Static:true , Public:false}, "ValueMustBeInRange", $.String, "ValueMustBeInRange");

    $.Constant({Static:true , Public:false}, "CombinedPrefixNSLength", $.String, "CombinedPrefixNSLength");

    $.Constant({Static:true , Public:false}, "FlushBufferAlreadyInUse", $.String, "FlushBufferAlreadyInUse");

    $.Constant({Static:true , Public:false}, "NoAsyncWritePending", $.String, "NoAsyncWritePending");

    $.Constant({Static:true , Public:false}, "MimeContentTypeHeaderInvalid", $.String, "MimeContentTypeHeaderInvalid");

    $.Constant({Static:true , Public:false}, "MimeHeaderInvalidCharacter", $.String, "MimeHeaderInvalidCharacter");

    $.Constant({Static:true , Public:false}, "MimeMessageGetContentStreamCalledAlready", $.String, "MimeMessageGetContentStreamCalledAlready");

    $.Constant({Static:true , Public:false}, "MaxMimePartsExceeded", $.String, "MaxMimePartsExceeded");

    $.Constant({Static:true , Public:false}, "MimeReaderHeaderAlreadyExists", $.String, "MimeReaderHeaderAlreadyExists");

    $.Constant({Static:true , Public:false}, "MimeReaderMalformedHeader", $.String, "MimeReaderMalformedHeader");

    $.Constant({Static:true , Public:false}, "MimeReaderResetCalledBeforeEOF", $.String, "MimeReaderResetCalledBeforeEOF");

    $.Constant({Static:true , Public:false}, "MimeReaderTruncated", $.String, "MimeReaderTruncated");

    $.Constant({Static:true , Public:false}, "MimeVersionHeaderInvalid", $.String, "MimeVersionHeaderInvalid");

    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForClose", $.String, "MimeWriterInvalidStateForClose");

    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForHeader", $.String, "MimeWriterInvalidStateForHeader");

    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForContent", $.String, "MimeWriterInvalidStateForContent");

    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForStartPart", $.String, "MimeWriterInvalidStateForStartPart");

    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForStartPreface", $.String, "MimeWriterInvalidStateForStartPreface");

    $.Constant({Static:true , Public:false}, "MtomBoundaryInvalid", $.String, "MtomBoundaryInvalid");

    $.Constant({Static:true , Public:false}, "MtomBufferQuotaExceeded", $.String, "MtomBufferQuotaExceeded");

    $.Constant({Static:true , Public:false}, "MtomContentTransferEncodingNotPresent", $.String, "MtomContentTransferEncodingNotPresent");

    $.Constant({Static:true , Public:false}, "MtomContentTransferEncodingNotSupported", $.String, "MtomContentTransferEncodingNotSupported");

    $.Constant({Static:true , Public:false}, "MtomContentTypeInvalid", $.String, "MtomContentTypeInvalid");

    $.Constant({Static:true , Public:false}, "MtomDataMustNotContainXopInclude", $.String, "MtomDataMustNotContainXopInclude");

    $.Constant({Static:true , Public:false}, "MtomExceededMaxSizeInBytes", $.String, "MtomExceededMaxSizeInBytes");

    $.Constant({Static:true , Public:false}, "MtomInvalidCIDUri", $.String, "MtomInvalidCIDUri");

    $.Constant({Static:true , Public:false}, "MtomInvalidEmptyURI", $.String, "MtomInvalidEmptyURI");

    $.Constant({Static:true , Public:false}, "MtomInvalidStartUri", $.String, "MtomInvalidStartUri");

    $.Constant({Static:true , Public:false}, "MtomInvalidTransferEncodingForMimePart", $.String, "MtomInvalidTransferEncodingForMimePart");

    $.Constant({Static:true , Public:false}, "MtomMessageContentTypeNotFound", $.String, "MtomMessageContentTypeNotFound");

    $.Constant({Static:true , Public:false}, "MtomMessageInvalidContent", $.String, "MtomMessageInvalidContent");

    $.Constant({Static:true , Public:false}, "MtomMessageInvalidContentInMimePart", $.String, "MtomMessageInvalidContentInMimePart");

    $.Constant({Static:true , Public:false}, "MtomMessageInvalidMimeVersion", $.String, "MtomMessageInvalidMimeVersion");

    $.Constant({Static:true , Public:false}, "MtomMessageNotApplicationXopXml", $.String, "MtomMessageNotApplicationXopXml");

    $.Constant({Static:true , Public:false}, "MtomMessageNotMultipart", $.String, "MtomMessageNotMultipart");

    $.Constant({Static:true , Public:false}, "MtomMessageRequiredParamNotSpecified", $.String, "MtomMessageRequiredParamNotSpecified");

    $.Constant({Static:true , Public:false}, "MtomMimePartReferencedMoreThanOnce", $.String, "MtomMimePartReferencedMoreThanOnce");

    $.Constant({Static:true , Public:false}, "MtomPartNotFound", $.String, "MtomPartNotFound");

    $.Constant({Static:true , Public:false}, "MtomRootContentTypeNotFound", $.String, "MtomRootContentTypeNotFound");

    $.Constant({Static:true , Public:false}, "MtomRootNotApplicationXopXml", $.String, "MtomRootNotApplicationXopXml");

    $.Constant({Static:true , Public:false}, "MtomRootPartNotFound", $.String, "MtomRootPartNotFound");

    $.Constant({Static:true , Public:false}, "MtomRootRequiredParamNotSpecified", $.String, "MtomRootRequiredParamNotSpecified");

    $.Constant({Static:true , Public:false}, "MtomRootUnexpectedCharset", $.String, "MtomRootUnexpectedCharset");

    $.Constant({Static:true , Public:false}, "MtomRootUnexpectedType", $.String, "MtomRootUnexpectedType");

    $.Constant({Static:true , Public:false}, "MtomXopIncludeHrefNotSpecified", $.String, "MtomXopIncludeHrefNotSpecified");

    $.Constant({Static:true , Public:false}, "MtomXopIncludeInvalidXopAttributes", $.String, "MtomXopIncludeInvalidXopAttributes");

    $.Constant({Static:true , Public:false}, "MtomXopIncludeInvalidXopElement", $.String, "MtomXopIncludeInvalidXopElement");

    $.Constant({Static:true , Public:false}, "ReadNotSupportedOnStream", $.String, "ReadNotSupportedOnStream");

    $.Constant({Static:true , Public:false}, "SeekNotSupportedOnStream", $.String, "SeekNotSupportedOnStream");

    $.Constant({Static:true , Public:false}, "WriteBufferOverflow", $.String, "WriteBufferOverflow");

    $.Constant({Static:true , Public:false}, "WriteNotSupportedOnStream", $.String, "WriteNotSupportedOnStream");

    $.Constant({Static:true , Public:false}, "JsonOnlyWhitespace", $.String, "JsonOnlyWhitespace");

    $.Constant({Static:true , Public:false}, "JsonInvalidStartElementCall", $.String, "JsonInvalidStartElementCall");

    $.Constant({Static:true , Public:false}, "JsonNodeTypeArrayOrObjectNotSpecified", $.String, "JsonNodeTypeArrayOrObjectNotSpecified");

    $.Constant({Static:true , Public:false}, "JsonInvalidLocalNameEmpty", $.String, "JsonInvalidLocalNameEmpty");

    $.Constant({Static:true , Public:false}, "JsonMustSpecifyDataType", $.String, "JsonMustSpecifyDataType");

    $.Constant({Static:true , Public:false}, "JsonAttributeAlreadyWritten", $.String, "JsonAttributeAlreadyWritten");

    $.Constant({Static:true , Public:false}, "JsonSizeExceedsRemainingBufferSpace", $.String, "JsonSizeExceedsRemainingBufferSpace");

    $.Constant({Static:true , Public:false}, "JsonEndElementNoOpenNodes", $.String, "JsonEndElementNoOpenNodes");

    $.Constant({Static:true , Public:false}, "JsonNoMatchingStartAttribute", $.String, "JsonNoMatchingStartAttribute");

    $.Constant({Static:true , Public:false}, "JsonWriterClosed", $.String, "JsonWriterClosed");

    $.Constant({Static:true , Public:false}, "JsonCannotWriteStandaloneTextAfterQuotedText", $.String, "JsonCannotWriteStandaloneTextAfterQuotedText");

    $.Constant({Static:true , Public:false}, "JsonOffsetExceedsBufferSize", $.String, "JsonOffsetExceedsBufferSize");

    $.Constant({Static:true , Public:false}, "JsonEncounteredUnexpectedCharacter", $.String, "JsonEncounteredUnexpectedCharacter");

    $.Constant({Static:true , Public:false}, "JsonInvalidBytes", $.String, "JsonInvalidBytes");

    $.Constant({Static:true , Public:false}, "JsonEncodingNotSupported", $.String, "JsonEncodingNotSupported");

    $.Constant({Static:true , Public:false}, "JsonUnexpectedEndOfFile", $.String, "JsonUnexpectedEndOfFile");

    $.Constant({Static:true , Public:false}, "JsonValueMustBeInRange", $.String, "JsonValueMustBeInRange");

    $.Constant({Static:true , Public:false}, "JsonDuplicateMemberNames", $.String, "JsonDuplicateMemberNames");

    $.Constant({Static:true , Public:false}, "JsonDuplicateMemberInInput", $.String, "JsonDuplicateMemberInInput");

    $.Constant({Static:true , Public:false}, "JsonRequiredMembersNotFound", $.String, "JsonRequiredMembersNotFound");

    $.Constant({Static:true , Public:false}, "JsonOneRequiredMemberNotFound", $.String, "JsonOneRequiredMemberNotFound");

    $.Constant({Static:true , Public:false}, "JsonInvalidWriteStat", $.String, "JsonInvalidWriteStat");

    $.Constant({Static:true , Public:false}, "JsonInvalidDateTimeString", $.String, "JsonInvalidDateTimeString");

    $.Constant({Static:true , Public:false}, "JsonExpectedEncoding", $.String, "JsonExpectedEncoding");

    $.Constant({Static:true , Public:false}, "JsonOpenAttributeMustBeClosedFirst", $.String, "JsonOpenAttributeMustBeClosedFirst");

    $.Constant({Static:true , Public:false}, "JsonTypeNotSupportedByDataContractJsonSerializer", $.String, "JsonTypeNotSupportedByDataContractJsonSerializer");

    $.Constant({Static:true , Public:false}, "EnumTypeNotSupportedByDataContractJsonSerializer", $.String, "EnumTypeNotSupportedByDataContractJsonSerializer");

    $.Constant({Static:true , Public:false}, "JsonNamespaceMustBeEmpty", $.String, "JsonNamespaceMustBeEmpty");

    $.Constant({Static:true , Public:false}, "ChangingFullTypeNameNotSupported", $.String, "ChangingFullTypeNameNotSupported");

    $.Constant({Static:true , Public:false}, "JsonXmlProcessingInstructionNotSupported", $.String, "JsonXmlProcessingInstructionNotSupported");

    $.Constant({Static:true , Public:false}, "JsonXmlInvalidDeclaration", $.String, "JsonXmlInvalidDeclaration");

    $.Constant({Static:true , Public:false}, "JsonMultipleRootElementsNotAllowedOnWriter", $.String, "JsonMultipleRootElementsNotAllowedOnWriter");

    $.Constant({Static:true , Public:false}, "JsonInvalidMethodBetweenStartEndAttribute", $.String, "JsonInvalidMethodBetweenStartEndAttribute");

    $.Constant({Static:true , Public:false}, "JsonServerTypeSpecifiedForInvalidDataType", $.String, "JsonServerTypeSpecifiedForInvalidDataType");

    $.Constant({Static:true , Public:false}, "JsonInvalidDataTypeSpecifiedForServerType", $.String, "JsonInvalidDataTypeSpecifiedForServerType");

    $.Constant({Static:true , Public:false}, "JsonUnexpectedAttributeValue", $.String, "JsonUnexpectedAttributeValue");

    $.Constant({Static:true , Public:false}, "JsonPrefixMustBeNullOrEmpty", $.String, "JsonPrefixMustBeNullOrEmpty");

    $.Constant({Static:true , Public:false}, "JsonUnexpectedAttributeLocalName", $.String, "JsonUnexpectedAttributeLocalName");

    $.Constant({Static:true , Public:false}, "JsonCannotWriteTextAfterNonTextAttribute", $.String, "JsonCannotWriteTextAfterNonTextAttribute");

    $.Constant({Static:true , Public:false}, "JsonInvalidItemNameForArrayElement", $.String, "JsonInvalidItemNameForArrayElement");

    $.Constant({Static:true , Public:false}, "JsonInvalidRootElementName", $.String, "JsonInvalidRootElementName");

    $.Constant({Static:true , Public:false}, "JsonAttributeMustHaveElement", $.String, "JsonAttributeMustHaveElement");

    $.Constant({Static:true , Public:false}, "JsonNestedArraysNotSupported", $.String, "JsonNestedArraysNotSupported");

    $.Constant({Static:true , Public:false}, "JsonMethodNotSupported", $.String, "JsonMethodNotSupported");

    $.Constant({Static:true , Public:false}, "JsonInvalidFFFE", $.String, "JsonInvalidFFFE");

    $.Constant({Static:true , Public:false}, "JsonUnsupportedForIsReference", $.String, "JsonUnsupportedForIsReference");

    $.Constant({Static:true , Public:false}, "JsonMustUseWriteStringForWritingAttributeValues", $.String, "JsonMustUseWriteStringForWritingAttributeValues");

    $.Constant({Static:true , Public:false}, "JsonWriteArrayNotSupported", $.String, "JsonWriteArrayNotSupported");

    $.Constant({Static:true , Public:false}, "JsonDateTimeOutOfRange", $.String, "JsonDateTimeOutOfRange");

    $.Constant({Static:true , Public:false}, "XmlObjectAssignedToIncompatibleInterface", $.String, "XmlObjectAssignedToIncompatibleInterface");

    $.Constant({Static:true , Public:false}, "CollectionAssignedToIncompatibleInterface", $.String, "CollectionAssignedToIncompatibleInterface");

    $.Constant({Static:true , Public:false}, "InvalidCharacterEncountered", $.String, "InvalidCharacterEncountered");

    $.Constant({Static:true , Public:false}, "JsonInvalidWriteState", $.String, "JsonInvalidWriteState");

    $.Constant({Static:true , Public:false}, "InvalidAsyncResult", $.String, "InvalidAsyncResult");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm02.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Json");
/* class System.Runtime.Serialization.Json.DataContractJsonSerializer */ 

(function DataContractJsonSerializer$Members () {
  var $, $thisType;






























































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "System.Runtime.Serialization.Json.DataContractJsonSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), $.Int32, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), $.Int32, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializerSettings")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddCollectionItemTypeToKnownTypes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfJsonNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfJsonNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfTypeIsReference", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfXmlNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfXmlNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertXmlNameToJsonName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertXmlNameToJsonName", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryString"), [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AlwaysEmitTypeInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateTimeFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_EmitTypeInformation", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Type")]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UseSimpleDictionaryFormat", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDeserializeType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSerializeType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"), 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]), $.Int32, 
          $.Boolean, $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"), $.Boolean, 
          $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsJsonLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadJsonValue", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteJsonNull", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteJsonValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), 
          $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object])
    );

    $.Field({Static:false, Public:false}, "knownTypeList", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "emitTypeInformation", $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"));

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean);

    $.Field({Static:false, Public:false}, "knownTypeCollection", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32);

    $.Field({Static:false, Public:false}, "rootContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "rootName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "rootNameRequiresMapping", $.Boolean);

    $.Field({Static:false, Public:false}, "rootType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "serializeReadOnlyTypes", $.Boolean);

    $.Field({Static:false, Public:false}, "dateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"));

    $.Field({Static:false, Public:false}, "useSimpleDictionaryFormat", $.Boolean);

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:true }, "KnownTypes", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32);

    $.Property({Static:false, Public:false}, "AlwaysEmitTypeInformation", $.Boolean);

    $.Property({Static:false, Public:true }, "EmitTypeInformation", $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "SerializeReadOnlyTypes", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "UseSimpleDictionaryFormat", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "RootContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "RootName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.Json.DataContractJsonSerializerSettings */ 

(function DataContractJsonSerializerSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.System.Runtime.Serialization.IDataContractSurrogate)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.System.Runtime.Serialization.DateTimeFormat)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.System.Runtime.Serialization.EmitTypeInformation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.System.Collections.Generic.IEnumerable$b1.Of($asm02.System.Type))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.System.String)) ();
  };



  function DataContractJsonSerializerSettings_get_DataContractSurrogate () {
    return this.DataContractJsonSerializerSettings$DataContractSurrogate$value;
  }; 

  function DataContractJsonSerializerSettings_get_DateTimeFormat () {
    return this.DataContractJsonSerializerSettings$DateTimeFormat$value;
  }; 

  function DataContractJsonSerializerSettings_get_EmitTypeInformation () {
    return this.DataContractJsonSerializerSettings$EmitTypeInformation$value;
  }; 

  function DataContractJsonSerializerSettings_get_IgnoreExtensionDataObject () {
    return this.DataContractJsonSerializerSettings$IgnoreExtensionDataObject$value;
  }; 

  function DataContractJsonSerializerSettings_get_KnownTypes () {
    return this.DataContractJsonSerializerSettings$KnownTypes$value;
  }; 


  function DataContractJsonSerializerSettings_get_RootName () {
    return this.DataContractJsonSerializerSettings$RootName$value;
  }; 

  function DataContractJsonSerializerSettings_get_SerializeReadOnlyTypes () {
    return this.DataContractJsonSerializerSettings$SerializeReadOnlyTypes$value;
  }; 

  function DataContractJsonSerializerSettings_get_UseSimpleDictionaryFormat () {
    return this.DataContractJsonSerializerSettings$UseSimpleDictionaryFormat$value;
  }; 

  function DataContractJsonSerializerSettings_set_DataContractSurrogate (value) {
    this.DataContractJsonSerializerSettings$DataContractSurrogate$value = value;
  }; 

  function DataContractJsonSerializerSettings_set_DateTimeFormat (value) {
    this.DataContractJsonSerializerSettings$DateTimeFormat$value = value;
  }; 

  function DataContractJsonSerializerSettings_set_EmitTypeInformation (value) {
    this.DataContractJsonSerializerSettings$EmitTypeInformation$value = value;
  }; 

  function DataContractJsonSerializerSettings_set_IgnoreExtensionDataObject (value) {
    this.DataContractJsonSerializerSettings$IgnoreExtensionDataObject$value = value;
  }; 

  function DataContractJsonSerializerSettings_set_KnownTypes (value) {
    this.DataContractJsonSerializerSettings$KnownTypes$value = value;
  }; 


  function DataContractJsonSerializerSettings_set_RootName (value) {
    this.DataContractJsonSerializerSettings$RootName$value = value;
  }; 

  function DataContractJsonSerializerSettings_set_SerializeReadOnlyTypes (value) {
    this.DataContractJsonSerializerSettings$SerializeReadOnlyTypes$value = value;
  }; 

  function DataContractJsonSerializerSettings_set_UseSimpleDictionaryFormat (value) {
    this.DataContractJsonSerializerSettings$UseSimpleDictionaryFormat$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.DataContractJsonSerializerSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_DataContractSurrogate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")), 
      DataContractJsonSerializerSettings_get_DataContractSurrogate
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DateTimeFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat")), 
      DataContractJsonSerializerSettings_get_DateTimeFormat
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_EmitTypeInformation", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation")), 
      DataContractJsonSerializerSettings_get_EmitTypeInformation
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Return($.Boolean), 
      DataContractJsonSerializerSettings_get_IgnoreExtensionDataObject
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KnownTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])), 
      DataContractJsonSerializerSettings_get_KnownTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_RootName", 
      JSIL.MethodSignature.Return($.String), 
      DataContractJsonSerializerSettings_get_RootName
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      DataContractJsonSerializerSettings_get_SerializeReadOnlyTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "get_UseSimpleDictionaryFormat", 
      JSIL.MethodSignature.Return($.Boolean), 
      DataContractJsonSerializerSettings_get_UseSimpleDictionaryFormat
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_DataContractSurrogate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")), 
      DataContractJsonSerializerSettings_set_DataContractSurrogate
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DateTimeFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat")), 
      DataContractJsonSerializerSettings_set_DateTimeFormat
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_EmitTypeInformation", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation")), 
      DataContractJsonSerializerSettings_set_EmitTypeInformation
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_IgnoreExtensionDataObject", 
      JSIL.MethodSignature.Action($.Boolean), 
      DataContractJsonSerializerSettings_set_IgnoreExtensionDataObject
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KnownTypes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")])), 
      DataContractJsonSerializerSettings_set_KnownTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxItemsInObjectGraph", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_RootName", 
      JSIL.MethodSignature.Action($.String), 
      DataContractJsonSerializerSettings_set_RootName
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_SerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($.Boolean), 
      DataContractJsonSerializerSettings_set_SerializeReadOnlyTypes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Method({Static:false, Public:true }, "set_UseSimpleDictionaryFormat", 
      JSIL.MethodSignature.Action($.Boolean), 
      DataContractJsonSerializerSettings_set_UseSimpleDictionaryFormat
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32);

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$RootName$value", $.String)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$KnownTypes$value", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$IgnoreExtensionDataObject$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$DataContractSurrogate$value", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$EmitTypeInformation$value", $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$DateTimeFormat$value", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$SerializeReadOnlyTypes$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DataContractJsonSerializerSettings$UseSimpleDictionaryFormat$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "RootName", $.String)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "KnownTypes", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Type")]))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm08.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "EmitTypeInformation", $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "SerializeReadOnlyTypes", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "UseSimpleDictionaryFormat", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.Serialization.Json.JsonDataContract */ 

(function JsonDataContract$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Helper", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalDataContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetJsonDataContract", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HandleReadValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopKnownDataContracts", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PushKnownDataContracts", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadJsonValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryReadNullAtTopLevel", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteJsonValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "Helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"));

    $.Property({Static:false, Public:false}, "TraditionalDataContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper */ 

(function JsonDataContractCriticalHelper$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCollectionItemContractsToKnownDataContracts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateJsonDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), [$.Int32, $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownDataContracts", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalDataContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetJsonDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.Field({Static:true , Public:false}, "cacheLock", $.Object);

    $.Field({Static:true , Public:false}, "createDataContractLock", $.Object);

    $.Field({Static:true , Public:false}, "dataContractCache", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract")]), function ($pi) {
        return JSIL.Array.New($asm08.System.Runtime.Serialization.Json.JsonDataContract, 32);
      });

    $.Field({Static:true , Public:false}, "dataContractID", $.Int32, 0);

    $.Field({Static:true , Public:false}, "typeHandleRef", $asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef"));

    $.Field({Static:true , Public:false}, "typeToIDCache", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm08.TypeRef("System.Runtime.Serialization.TypeHandleRef"), $asm08.TypeRef("System.Runtime.Serialization.IntRef")]));

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Field({Static:false, Public:false}, "traditionalDataContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Property({Static:false, Public:false}, "KnownDataContracts", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Xml.XmlQualifiedName"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "TraditionalDataContract", $asm08.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false, Virtual:true }, "TypeName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonClassDataContract */ 

(function JsonClassDataContract$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonClassDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalClassDataContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonClassDataContract+JsonClassDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false, Virtual:true }, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "TraditionalClassDataContract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonClassDataContract+JsonClassDataContractCriticalHelper */ 

(function JsonClassDataContractCriticalHelper$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.Json.JsonClassDataContract+JsonClassDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyMembersAndCheckDuplicateNames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalClassDataContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatReaderDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatWriterDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"))
    );

    $.Field({Static:false, Public:false}, "jsonFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"));

    $.Field({Static:false, Public:false}, "jsonFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"));

    $.Field({Static:false, Public:false}, "memberNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "traditionalClassDataContract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false}, "TraditionalClassDataContract", $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonStringDataContract */ 

(function JsonStringDataContract$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonStringDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.StringDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonQNameDataContract */ 

(function JsonQNameDataContract$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonQNameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.QNameDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonUriDataContract */ 

(function JsonUriDataContract$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonUriDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.UriDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonByteArrayDataContract */ 

(function JsonByteArrayDataContract$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonByteArrayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ByteArrayDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonCollectionDataContract */ 

(function JsonCollectionDataContract$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonCollectionDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatGetOnlyReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalCollectionDataContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonCollectionDataContract+JsonCollectionDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatGetOnlyReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "TraditionalCollectionDataContract", $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonCollectionDataContract+JsonCollectionDataContractCriticalHelper */ 

(function JsonCollectionDataContractCriticalHelper$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.Json.JsonCollectionDataContract+JsonCollectionDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatGetOnlyReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalCollectionDataContract", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatGetOnlyReaderDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatReaderDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatWriterDelegate", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"))
    );

    $.Field({Static:false, Public:false}, "jsonFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"));

    $.Field({Static:false, Public:false}, "jsonFormatGetOnlyReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"));

    $.Field({Static:false, Public:false}, "jsonFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"));

    $.Field({Static:false, Public:false}, "traditionalCollectionDataContract", $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatGetOnlyReaderDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "TraditionalCollectionDataContract", $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonEnumDataContract */ 

(function JsonEnumDataContract$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonEnumDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.EnumDataContract"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsULong", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonEnumDataContract+JsonEnumDataContractCriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "IsULong", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonEnumDataContract+JsonEnumDataContractCriticalHelper */ 

(function JsonEnumDataContractCriticalHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract+JsonDataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.Json.JsonEnumDataContract+JsonEnumDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.EnumDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsULong", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "isULong", $.Boolean);

    $.Property({Static:false, Public:true }, "IsULong", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonXmlDataContract */ 

(function JsonXmlDataContract$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonXmlDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypesFromContext", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Type")]), [$asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonObjectDataContract */ 

(function JsonObjectDataContract$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonObjectDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DataContract"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonNumber", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.TypeCode")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonNumber", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.ByteArrayHelperWithString */ 

(function ByteArrayHelperWithString$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Byte")]), 
      Name: "System.Runtime.Serialization.Json.ByteArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowConversionException", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonReaderDelegator */ 

(function JsonReaderDelegator$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
      Name: "System.Runtime.Serialization.Json.JsonReaderDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlReader"), $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTimeArrayHelper", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonReaderDelegator+DateTimeArrayJsonHelperWithString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderQuotas", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonDate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.DateTime"), [$.String, $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonDateInDefaultFormat", 
      new JSIL.MethodSignature($asm02.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseQualifiedName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.XmlQualifiedName"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsQName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsUnsignedLong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsUnsignedLong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadJsonDateTimeArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")])])
        ])
    );

    $.Field({Static:false, Public:false}, "dateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"));

    $.Field({Static:false, Public:false}, "dateTimeArrayHelper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonReaderDelegator+DateTimeArrayJsonHelperWithString"));

    $.Property({Static:false, Public:false}, "ReaderQuotas", $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:false}, "DateTimeArrayHelper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonReaderDelegator+DateTimeArrayJsonHelperWithString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonReaderDelegator+DateTimeArrayJsonHelperWithString */ 

(function DateTimeArrayJsonHelperWithString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.ArrayHelper`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.DateTime")]), 
      Name: "System.Runtime.Serialization.Json.JsonReaderDelegator+DateTimeArrayJsonHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "dateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonWriterDelegator */ 

(function JsonWriterDelegator$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
      Name: "System.Runtime.Serialization.Json.JsonWriterDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Xml.XmlWriter"), $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBoolean", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDateTime", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDateTimeInDefaultFormat", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDecimal", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDouble", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFloat", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteInt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonBooleanArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonDateTimeArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonDecimalArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonDoubleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Double]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonInt32Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonInt64Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int64]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonSingleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLong", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteQName", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteShort", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSignedByte", 
      JSIL.MethodSignature.Action($.SByte)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedInt", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedLong", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedShort", 
      JSIL.MethodSignature.Action($.UInt16)
    );

    $.Field({Static:false, Public:false}, "dateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson */ 

(function XmlObjectSerializerReadContextComplexJson$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContextComplex"), 
      Name: "System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReaderDelegatorForReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), [$asm0A.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializerKnownTypeList", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSimpleDictionaryFormat", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetArraySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetJsonMemberIndex", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $.Int32, $asm08.TypeRef("System.Runtime.Serialization.ExtensionDataObject")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetJsonMemberName", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBitSet", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingClassExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingCollectionExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributes", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadDataContractValue", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNumericalPrimitiveExtensionDataValue", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadPrimitiveExtensionDataValue", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromRootDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartReadExtensionDataValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowDuplicateMemberException", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMissingRequiredMembers", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetJsonLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "extensionDataValueType", $.String);

    $.Field({Static:false, Public:false}, "dateTimeFormat", $asm08.TypeRef("System.Runtime.Serialization.DateTimeFormat"));

    $.Field({Static:false, Public:false}, "useSimpleDictionaryFormat", $.Boolean);

    $.Property({Static:false, Public:false}, "SerializerKnownTypeList", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "UseSimpleDictionaryFormat", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson */ 

(function XmlObjectSerializerWriteContextComplexJson$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex"), 
      Name: "System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollectionItemName", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializerKnownTypeList", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSimpleDictionaryFormat", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm02.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRevisedItemContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleCollectionAssignedToObject", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Runtime.Serialization.DataContract")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresJsonTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromRootDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [$asm0A.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveJsonDataContractFromRootDataContract", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm08.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), $asm0A.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiType", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm02.TypeRef("System.RuntimeTypeHandle"), $asm02.TypeRef("System.Type"), 
          $.Int32, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiTypeAtTopLevel", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm02.TypeRef("System.RuntimeTypeHandle"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TruncateDefaultDataContractNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyObjectCompatibilityWithInterface", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $.Object, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyType", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArraySize", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDataContractValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.DataContract"), $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm02.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteExtensionDataTypeInfo", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.IDataNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonISerializable", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Runtime.Serialization.ISerializable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteJsonNameWithMapping", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNull", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm08.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm08.TypeRef("System.Runtime.Serialization.DataContract")
        ])
    );

    $.Field({Static:false, Public:false}, "emitXsiType", $asm08.TypeRef("System.Runtime.Serialization.EmitTypeInformation"));

    $.Field({Static:false, Public:false}, "perCallXsiTypeAlreadyEmitted", $.Boolean);

    $.Field({Static:false, Public:false}, "useSimpleDictionaryFormat", $.Boolean);

    $.Property({Static:false, Public:false}, "SerializerKnownTypeList", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "UseSimpleDictionaryFormat", $.Boolean);

    $.Property({Static:false, Public:false}, "CollectionItemName", $asm08.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Object"), 
      $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), 
      $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    ]));

/* delegate System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm08.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm02.TypeRef("System.Object"), 
      $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
    ]));

/* class System.Runtime.Serialization.Json.JsonFormatWriterGenerator */ 

(function JsonFormatWriterGenerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatWriterGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatWriterGenerator+CriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonFormatWriterGenerator+CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatWriterGenerator+CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"), $.String, 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerialized", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerializing", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMemberValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm08.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfCannotSerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfCannotSerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfCannotSerializeReadOnlyTypes", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnwrapNullableObject", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClass", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.Field({Static:false, Public:false}, "ilg", $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"));

    $.Field({Static:false, Public:false}, "xmlWriterArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "contextArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "dataContractArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "objectLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "memberNamesArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "typeIndex", $.Int32);

    $.Field({Static:false, Public:false}, "childElementIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Object"), [
      $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson"), 
      $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Xml.XmlDictionaryString")])
    ]));

/* delegate System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Object"), [
      $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson"), 
      $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
      $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
    ]));

/* delegate System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm08.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm08.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson"), 
      $asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
      $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
    ]));

/* class System.Runtime.Serialization.Json.JsonFormatReaderGenerator */ 

(function JsonFormatReaderGenerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatReaderGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatReaderGenerator+CriticalHelper"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonFormatReaderGenerator+CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatReaderGenerator+CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"), $.String, 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRequiredElements", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObject", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionReaderHelper", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnexpectedItemInCollection", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserialize", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserialized", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserializing", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"), $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadClass", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollectionItem", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadGetOnlyCollection", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadISerializable", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm08.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.Emit.Label")]), $asm02.TypeRef("System.Reflection.Emit.Label"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSimpleDictionary", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetExpectedElements", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExpectedElements", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequiredElements", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreCollectionValue", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreKeyValuePair", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm08.TypeRef("System.Runtime.Serialization.CollectionDataContract"), 
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowSerializationException", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "values", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ThrowSerializationException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedStateException", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapNullableObject", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm08.TypeRef("System.Runtime.Serialization.CodeGenerator"));

    $.Field({Static:false, Public:false}, "objectLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "objectType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "xmlReaderArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "contextArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "memberNamesArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "collectionContractArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));

    $.Field({Static:false, Public:false}, "emptyDictionaryStringArg", $asm08.TypeRef("System.Runtime.Serialization.ArgBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.JsonFormatReaderGenerator+CriticalHelper+KeyParseMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Json.JsonFormatReaderGenerator+CriticalHelper+KeyParseMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Fail: 0, 
    AsString: 1, 
    UsingParseEnum: 2, 
    UsingCustomParse: 3, 
  }
);

/* class System.Runtime.Serialization.Json.JsonGlobals */ 

(function JsonGlobals$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Runtime.Serialization.Json.JsonGlobals", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataContractXsdBaseNamespaceLength", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "dDictionaryString", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "floatingPointCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "itemDictionaryString", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "rootDictionaryString", $asm08.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "unixEpochTicks", $.Int64);

    $.Constant({Static:true , Public:true }, "applicationJsonMediaType", $.String, "application/json");

    $.Constant({Static:true , Public:true }, "arrayString", $.String, "array");

    $.Constant({Static:true , Public:true }, "booleanString", $.String, "boolean");

    $.Constant({Static:true , Public:true }, "CacheControlString", $.String, "Cache-Control");

    $.Constant({Static:true , Public:true }, "CollectionByte", $.Byte, 91);

    $.Constant({Static:true , Public:true }, "CollectionChar", $.Char, "[");

    $.Constant({Static:true , Public:true }, "DateTimeEndGuardReader", $.String, ")/");

    $.Constant({Static:true , Public:true }, "DateTimeEndGuardWriter", $.String, ")\\/");

    $.Constant({Static:true , Public:true }, "DateTimeStartGuardReader", $.String, "/Date(");

    $.Constant({Static:true , Public:true }, "DateTimeStartGuardWriter", $.String, "\\/Date(");

    $.Constant({Static:true , Public:true }, "dString", $.String, "d");

    $.Constant({Static:true , Public:true }, "EndCollectionByte", $.Byte, 93);

    $.Constant({Static:true , Public:true }, "EndCollectionChar", $.Char, "]");

    $.Constant({Static:true , Public:true }, "EndObjectByte", $.Byte, 125);

    $.Constant({Static:true , Public:true }, "EndObjectChar", $.Char, "}");

    $.Constant({Static:true , Public:true }, "ExpiresString", $.String, "Expires");

    $.Constant({Static:true , Public:true }, "IfModifiedSinceString", $.String, "If-Modified-Since");

    $.Constant({Static:true , Public:true }, "itemString", $.String, "item");

    $.Constant({Static:true , Public:true }, "jsonerrorString", $.String, "jsonerror");

    $.Constant({Static:true , Public:true }, "KeyString", $.String, "Key");

    $.Constant({Static:true , Public:true }, "LastModifiedString", $.String, "Last-Modified");

    $.Constant({Static:true , Public:true }, "maxScopeSize", $.Int32, 25);

    $.Constant({Static:true , Public:true }, "MemberSeparatorByte", $.Byte, 44);

    $.Constant({Static:true , Public:true }, "MemberSeparatorChar", $.Char, ",");

    $.Constant({Static:true , Public:true }, "NameValueSeparatorByte", $.Byte, 58);

    $.Constant({Static:true , Public:true }, "NameValueSeparatorChar", $.Char, ":");

    $.Constant({Static:true , Public:true }, "NameValueSeparatorString", $.String, ":");

    $.Constant({Static:true , Public:true }, "nullString", $.String, "null");

    $.Constant({Static:true , Public:true }, "numberString", $.String, "number");

    $.Constant({Static:true , Public:true }, "ObjectByte", $.Byte, 123);

    $.Constant({Static:true , Public:true }, "ObjectChar", $.Char, "{");

    $.Constant({Static:true , Public:true }, "objectString", $.String, "object");

    $.Constant({Static:true , Public:true }, "publicString", $.String, "public");

    $.Constant({Static:true , Public:true }, "QuoteByte", $.Byte, 34);

    $.Constant({Static:true , Public:true }, "QuoteChar", $.Char, "\"");

    $.Constant({Static:true , Public:true }, "rootString", $.String, "root");

    $.Constant({Static:true , Public:true }, "serverTypeString", $.String, "__type");

    $.Constant({Static:true , Public:true }, "stringString", $.String, "string");

    $.Constant({Static:true , Public:true }, "textJsonMediaType", $.String, "text/json");

    $.Constant({Static:true , Public:true }, "trueString", $.String, "true");

    $.Constant({Static:true , Public:true }, "typeString", $.String, "type");

    $.Constant({Static:true , Public:true }, "ValueString", $.String, "Value");

    $.Constant({Static:true , Public:true }, "WhitespaceChar", $.Char, " ");

    $.Constant({Static:true , Public:true }, "xmlnsPrefix", $.String, "xmlns");

    $.Constant({Static:true , Public:true }, "xmlPrefix", $.String, "xml");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.Json.IXmlJsonReaderInitializer */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Json.IXmlJsonReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ]));
  }, [])
  .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* interface System.Runtime.Serialization.Json.IXmlJsonWriterInitializer */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Json.IXmlJsonWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ]));
  }, [])
  .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* class System.Runtime.Serialization.Json.JsonReaderWriterFactory */ 

(function JsonReaderWriterFactory$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("System.Runtime.Serialization.Json.JsonReaderWriterFactory", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryReader"), [$asm02.TypeRef("System.IO.Stream"), $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryReader"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryReader"), [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryReader"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryReader"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryWriter"), [$asm02.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryWriter"), [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryWriter"), [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryWriter"), [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Xml.XmlDictionaryWriter"), [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "DefaultIndentChars", $.String, "  ");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Runtime.Serialization.Json.XmlJsonWriter */ 

(function XmlJsonWriter$Members () {
  var $, $thisType;




































































































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Runtime.Serialization.Json.XmlJsonWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharacterNeedsEscaping", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckText", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BinHexEncoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Text.BinHexEncoding"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasOpenAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritingCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritingNameAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritingNameWithMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrittenNameWithMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCharacterAbbrevs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeWriter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnicodeNewlineCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfServerTypeWritten", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidAttributeContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TryEscapeControlCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $jsilcore.TypeRef("JSIL.Reference", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetWritingNameWithMapping", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm08.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDataTypeServerType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEscapedJsonString", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonQuote", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteServerTypeAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.Constant({Static:true , Public:false}, "BACK_SLASH", $.Char, "\\");

    $.Constant({Static:true , Public:false}, "FORWARD_SLASH", $.Char, "/");

    $.Constant({Static:true , Public:false}, "HIGH_SURROGATE_START", $.Char, "\ud800");

    $.Constant({Static:true , Public:false}, "LOW_SURROGATE_END", $.Char, "\udfff");

    $.Constant({Static:true , Public:false}, "MAX_CHAR", $.Char, "\ufffe");

    $.Constant({Static:true , Public:false}, "WHITESPACE", $.Char, " ");

    $.Constant({Static:true , Public:false}, "CARRIAGE_RETURN", $.Char, "\r");

    $.Constant({Static:true , Public:false}, "NEWLINE", $.Char, "\n");

    $.Constant({Static:true , Public:false}, "BACKSPACE", $.Char, "\x08");

    $.Constant({Static:true , Public:false}, "FORM_FEED", $.Char, "\x0c");

    $.Constant({Static:true , Public:false}, "HORIZONTAL_TABULATION", $.Char, "\t");

    $.Constant({Static:true , Public:false}, "xmlNamespace", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:false}, "xmlnsNamespace", $.String, "http://www.w3.org/2000/xmlns/");

    $.Field({Static:true , Public:false}, "binHexEncoding", $asm08.TypeRef("System.Text.BinHexEncoding"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "CharacterAbbrevs", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "attributeText", $.String);

    $.Field({Static:false, Public:false}, "dataType", $asm08.TypeRef("System.Runtime.Serialization.Json.XmlJsonWriter+JsonDataType"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "endElementBuffer", $.Boolean);

    $.Field({Static:false, Public:false}, "isWritingDataTypeAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isWritingServerTypeAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isWritingXmlnsAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isWritingXmlnsAttributeDefaultNs", $.Boolean);

    $.Field({Static:false, Public:false}, "nameState", $asm08.TypeRef("System.Runtime.Serialization.Json.XmlJsonWriter+NameState"));

    $.Field({Static:false, Public:false}, "nodeType", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"));

    $.Field({Static:false, Public:false}, "nodeWriter", $asm08.TypeRef("System.Runtime.Serialization.Json.XmlJsonWriter+JsonNodeWriter"));

    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")]));

    $.Field({Static:false, Public:false}, "serverTypeValue", $.String);

    $.Field({Static:false, Public:false}, "writeState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Field({Static:false, Public:false}, "wroteServerTypeAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "indent", $.Boolean);

    $.Field({Static:false, Public:false}, "indentChars", $.String);

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0A.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0A.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0A.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:true , Public:false}, "BinHexEncoding", $asm08.TypeRef("System.Text.BinHexEncoding"));

    $.Property({Static:false, Public:false}, "HasOpenAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritingCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritingNameAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritingNameWithMapping", $.Boolean);

    $.Property({Static:false, Public:false}, "WrittenNameWithMapping", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm08.TypeRef("System.Runtime.Serialization.Json.IXmlJsonWriterInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.XmlJsonWriter+JsonDataType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Json.XmlJsonWriter+JsonDataType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Null: 1, 
    Boolean: 2, 
    Number: 3, 
    String: 4, 
    Object: 5, 
    Array: 6, 
  }
);

/* enum System.Runtime.Serialization.Json.XmlJsonWriter+NameState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Json.XmlJsonWriter+NameState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    IsWritingNameWithMapping: 1, 
    IsWritingNameAttribute: 2, 
    WrittenNameWithMapping: 4, 
  }
);

/* class System.Runtime.Serialization.Json.XmlJsonWriter+JsonNodeWriter */ 

(function JsonNodeWriter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlUTF8NodeWriter"), 
      Name: "System.Runtime.Serialization.Json.XmlJsonWriter+JsonNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteChars", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonEncodingStreamWrapper */ 

(function JsonEncodingStreamWrapper$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.Stream"), 
      Name: "System.Runtime.Serialization.Json.JsonEncodingStreamWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCharBreak", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByteBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FillBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Text.Encoding"), [$asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingName", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedEncoding", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding"), [$asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitForReading", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitForWriting", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ProcessBuffer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.ArraySegment`1", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadEncoding", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding"), [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEncoding", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowExpectedEncodingMismatch", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding"), $asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeBEUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF8", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingBEUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF16", $asm02.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF8", $asm02.TypeRef("System.Text.UTF8Encoding"));

    $.Constant({Static:true , Public:false}, "BufferLength", $.Int32, 128);

    $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "byteCount", $.Int32);

    $.Field({Static:false, Public:false}, "byteOffset", $.Int32);

    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "dec", $asm02.TypeRef("System.Text.Decoder"));

    $.Field({Static:false, Public:false}, "enc", $asm02.TypeRef("System.Text.Encoder"));

    $.Field({Static:false, Public:false}, "encoding", $asm02.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "encodingCode", $asm08.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding"));

    $.Field({Static:false, Public:false}, "isReading", $.Boolean);

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Json.JsonEncodingStreamWrapper+SupportedEncoding", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UTF8: 0, 
    UTF16LE: 1, 
    UTF16BE: 2, 
    None: 3, 
  }
);

/* enum System.Runtime.Serialization.Json.JsonNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Json.JsonNodeType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Object: 1, 
    Element: 2, 
    EndElement: 3, 
    QuotedText: 4, 
    StandaloneText: 5, 
    Collection: 6, 
  }
);

/* class System.Runtime.Serialization.Json.XmlJsonReader */ 

(function XmlJsonReader$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Xml.XmlBaseReader"), 
      Name: "System.Runtime.Serialization.Json.XmlJsonReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeNumericalTextLength", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeQuotedTextLengthUntilEndQuote", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Xml.XmlSigningNodeWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterJsonScope", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitJsonScope", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadingCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadingComplexText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm08.TypeRef("System.Xml.XmlDictionaryString"), $asm08.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAndSetLocalName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseChar", 
      new JSIL.MethodSignature($.Char, [$.String, $asm02.TypeRef("System.Globalization.NumberStyles")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm02.TypeRef("System.Globalization.NumberStyles")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEscapedCharacter", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNonExistentElementName", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.StringHandleConstStringType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNonFFFE", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNumericalText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadQuotedText", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadServerTypeAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Text.Encoding"), 
          $asm08.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetJsonNameWithMapping", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Xml.XmlBaseReader+XmlElementNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipExpectedByteInBufferReader", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhitespaceInBufferReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetByte", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnescapeJsonString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "MaxTextChunk", $.Int32, 2048);

    $.Field({Static:true , Public:false}, "charType", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "buffered", $.Boolean);

    $.Field({Static:false, Public:false}, "charactersToSkipOnNextRead", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "complexTextMode", $asm08.TypeRef("System.Runtime.Serialization.Json.XmlJsonReader+JsonComplexTextMode"));

    $.Field({Static:false, Public:false}, "expectingFirstElementInNonPrimitiveChild", $.Boolean);

    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32);

    $.Field({Static:false, Public:false}, "onReaderClose", $asm08.TypeRef("System.Xml.OnXmlDictionaryReaderClose"));

    $.Field({Static:false, Public:false}, "readServerTypeElement", $.Boolean);

    $.Field({Static:false, Public:false}, "scopeDepth", $.Int32);

    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false}, "IsAttributeValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadingCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadingComplexText", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm08.TypeRef("System.Runtime.Serialization.Json.IXmlJsonReaderInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.XmlJsonReader+JsonComplexTextMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.Json.XmlJsonReader+JsonComplexTextMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    QuotedText: 0, 
    NumericalText: 1, 
    None: 2, 
  }
);

/* class System.Runtime.Serialization.Json.XmlJsonReader+CharType */ 

(function CharType$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Runtime.Serialization.Json.XmlJsonReader+CharType", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "FirstName", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "Name", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "None", $.Byte, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Configuration");
/* class System.Runtime.Serialization.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Runtime.Serialization.Configuration.ConfigurationStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_DataContractSerializerSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetDataContractSerializerSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "SectionGroupName", $.String, "system.runtime.serialization");

    $.Constant({Static:true , Public:false}, "DefaultCollectionName", $.String, "");

    $.Constant({Static:true , Public:false}, "DeclaredTypes", $.String, "declaredTypes");

    $.Constant({Static:true , Public:false}, "Index", $.String, "index");

    $.Constant({Static:true , Public:false}, "Parameter", $.String, "parameter");

    $.Constant({Static:true , Public:false}, "Type", $.String, "type");

    $.Constant({Static:true , Public:false}, "EnableUnsafeTypeForwarding", $.String, "enableUnsafeTypeForwarding");

    $.Constant({Static:true , Public:false}, "DataContractSerializerSectionName", $.String, "dataContractSerializer");

    $.Constant({Static:true , Public:false}, "NetDataContractSerializerSectionName", $.String, "netDataContractSerializer");

    $.Property({Static:true , Public:false}, "DataContractSerializerSectionPath", $.String);

    $.Property({Static:true , Public:false}, "NetDataContractSerializerSectionPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeElement */ 

(function DeclaredTypeElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "KnownTypes", $asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElementCollection"))
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection */ 

(function DeclaredTypeElementCollection$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"));

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm04.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm08.System.Runtime.Serialization.Configuration.DeclaredTypeElement.__Type__]; });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeValidator */ 

(function DeclaredTypeValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute */ 

(function DeclaredTypeValidatorAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm04.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Property]; });

})();

/* class System.Runtime.Serialization.Configuration.NetDataContractSerializerSection */ 

(function NetDataContractSerializerSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Runtime.Serialization.Configuration.NetDataContractSerializerSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableUnsafeTypeForwarding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryUnsafeGetSection", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "EnableUnsafeTypeForwarding", $.Boolean)
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enableUnsafeTypeForwarding"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.ParameterElement */ 

(function ParameterElement$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Serialization.Configuration.ParameterElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PreSerialize", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Index", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "identity", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Index", $.Int32)
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["index"]; })
      .Attribute($asm04.TypeRef("System.Configuration.IntegerValidatorAttribute"));

    $.Property({Static:false, Public:true }, "Parameters", $asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"))
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm04.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.ParameterElementCollection */ 

(function ParameterElementCollection$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Serialization.Configuration.ParameterElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm04.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm04.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm08.System.Runtime.Serialization.Configuration.ParameterElement.__Type__]; });

})();

/* class System.Runtime.Serialization.Configuration.DataContractSerializerSection */ 

(function DataContractSerializerSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Runtime.Serialization.Configuration.DataContractSerializerSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeclaredTypes", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetSection", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "DeclaredTypes", $asm08.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection"))
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["declaredTypes"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.TypeElement */ 

(function TypeElement$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Serialization.Configuration.TypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), 
          $.String, $.Int32, 
          $asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Index", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false}, "key", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm04.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.Property({Static:false, Public:true }, "Parameters", $asm08.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"))
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm04.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "Index", $.Int32)
      .Attribute($asm04.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["index"]; })
      .Attribute($asm04.TypeRef("System.Configuration.IntegerValidatorAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.SerializationSectionGroup */ 

(function SerializationSectionGroup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "System.Runtime.Serialization.Configuration.SerializationSectionGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSerializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetDataContractSerializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Runtime.Serialization.Configuration.NetDataContractSerializerSection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSectionGroup", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("System.Configuration.Configuration")])
    );

    $.Property({Static:false, Public:true }, "DataContractSerializer", $asm08.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"));

    $.Property({Static:false, Public:true }, "NetDataContractSerializer", $asm08.TypeRef("System.Runtime.Serialization.Configuration.NetDataContractSerializerSection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.TypeElementCollection */ 

(function TypeElementCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Serialization.Configuration.TypeElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElement")])
    );

    $.Constant({Static:true , Public:false}, "KnownTypeConfig", $.String, "knownType");

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("System.Runtime.Serialization.Configuration.TypeElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm04.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm04.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm08.System.Runtime.Serialization.Configuration.TypeElement.__Type__]; });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Diagnostics");
/* class System.Runtime.Serialization.Diagnostics.TraceCode */ 

(function TraceCode$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Runtime.Serialization.Diagnostics.TraceCode", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Serialization", $.Int32, 196608);

    $.Constant({Static:true , Public:true }, "WriteObjectBegin", $.Int32, 196609);

    $.Constant({Static:true , Public:true }, "WriteObjectEnd", $.Int32, 196610);

    $.Constant({Static:true , Public:true }, "WriteObjectContentBegin", $.Int32, 196611);

    $.Constant({Static:true , Public:true }, "WriteObjectContentEnd", $.Int32, 196612);

    $.Constant({Static:true , Public:true }, "ReadObjectBegin", $.Int32, 196613);

    $.Constant({Static:true , Public:true }, "ReadObjectEnd", $.Int32, 196614);

    $.Constant({Static:true , Public:true }, "ElementIgnored", $.Int32, 196615);

    $.Constant({Static:true , Public:true }, "XsdExportBegin", $.Int32, 196616);

    $.Constant({Static:true , Public:true }, "XsdExportEnd", $.Int32, 196617);

    $.Constant({Static:true , Public:true }, "XsdImportBegin", $.Int32, 196618);

    $.Constant({Static:true , Public:true }, "XsdImportEnd", $.Int32, 196619);

    $.Constant({Static:true , Public:true }, "XsdExportError", $.Int32, 196620);

    $.Constant({Static:true , Public:true }, "XsdImportError", $.Int32, 196621);

    $.Constant({Static:true , Public:true }, "XsdExportAnnotationFailed", $.Int32, 196622);

    $.Constant({Static:true , Public:true }, "XsdImportAnnotationFailed", $.Int32, 196623);

    $.Constant({Static:true , Public:true }, "XsdExportDupItems", $.Int32, 196624);

    $.Constant({Static:true , Public:true }, "FactoryTypeNotFound", $.Int32, 196625);

    $.Constant({Static:true , Public:true }, "ObjectWithLargeDepth", $.Int32, 196626);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Diagnostics.TraceUtility */ 

(function TraceUtility$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Runtime.Serialization.Diagnostics.TraceUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm09.TypeRef("System.Runtime.Diagnostics.TraceRecord")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm09.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $asm02.TypeRef("System.Exception")
        ])
    );

    $.Field({Static:true , Public:false}, "traceCodes", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Diagnostics.Application");
/* class System.Runtime.Serialization.Diagnostics.Application.TD */ 

(function TD$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Diagnostics.Application.TD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEventDescriptors", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DCDeserializeWithSurrogateStart", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCDeserializeWithSurrogateStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCDeserializeWithSurrogateStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DCDeserializeWithSurrogateStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenReaderStart", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenReaderStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenReaderStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenReaderStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenWriterStart", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenWriterStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenWriterStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DCGenWriterStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenReaderStart", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenReaderStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenReaderStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenReaderStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenWriterStart", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenWriterStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenWriterStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DCJsonGenWriterStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCResolverResolve", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCResolverResolveIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCSerializeWithSurrogateStart", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCSerializeWithSurrogateStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DCSerializeWithSurrogateStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DCSerializeWithSurrogateStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureEventDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenXmlSerializableStart", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GenXmlSerializableStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GenXmlSerializableStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenXmlSerializableStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypesStart", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypesStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypesStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypesStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEtwEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReaderQuotaExceeded", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ReaderQuotaExceededIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm09.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm09.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm09.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "resourceManager", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "syncLock", $.Object);

    $.Field({Static:true , Public:false}, "eventDescriptorsCreated", $asm02.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm02.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "14A9DC09E10179B15BEAF94C0AED53904ACE0336", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "66928E6CBB59C3A3BCE606959EF4A865FE04E642", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "6AD618784EF9475526FEC47F0466559A788B4A49", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "C7332892AD7D1974562844144E505B853270A0A3", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "E767C9DC651168B3700C26F778E2004D2764ADD4", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EBC658B067B5C785A3F0BB67D73755F6FEE7F70C", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

